--Paquetes

--ESPECIFICACIÓN PAQUETE DE PROCEDIMIENTOS ALMACENADOS

CREATE OR REPLACE PACKAGE FIDE_PROCEDIMIENTOS_PKG AS
   /*********************** CRUD CITAS **********************/

    PROCEDURE FIDE_CITA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_INSERTAR_CITA_SP(
        P_USUARIO_ID IN NUMBER,
        P_SERVICIO_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_FECHA IN DATE,
        P_HORA IN VARCHAR2
    );
    
    PROCEDURE FIDE_MODIFICAR_CITA_SP(
        P_CITA_ID IN NUMBER, 
        P_USUARIO_ID IN NUMBER,
        P_SERVICIO_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_FECHA IN DATE,
        P_HORA IN VARCHAR2
    );
    
    PROCEDURE FIDE_ELIMINAR_CITA_SP(P_CITA_ID IN NUMBER);

/*********************** CRUD EVENTOS **********************/

    PROCEDURE FIDE_EVENTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_INSERTAR_EVENTO_SP(
        P_USUARIO_ID IN NUMBER,
        P_SERVICIO_ID IN NUMBER,
        P_DIRECCION_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_FECHA IN DATE
    );

    PROCEDURE FIDE_ACTUALIZAR_EVENTO_SP(
        P_EVENTO_ID IN NUMBER,
        P_USUARIO_ID IN NUMBER,
        P_SERVICIO_ID IN NUMBER,
        P_DIRECCION_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_FECHA IN DATE
    );

    PROCEDURE FIDE_ELIMINAR_EVENTO_SP(P_EVENTO_ID IN NUMBER);

/*********************** CRUD PROVINCIA **********************/

    PROCEDURE FIDE_PROVINCIA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);
    
    PROCEDURE FIDE_INSERTAR_PROVINCIA_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_ACTUALIZAR_PROVINCIA_SP(
        P_PROVINCIA_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_ELIMINAR_PROVINCIA_SP(P_PROVINCIA_ID IN NUMBER);

/*********************** CRUD CANTON **********************/

    PROCEDURE FIDE_CANTON_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_CANTON_TB_INSERTAR_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_CANTON_TB_ACTUALIZAR_SP(
        P_CANTON_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_CANTON_TB_ELIMINAR_SP(P_CANTON_ID IN NUMBER);

/*********************** CRUD DISTRITO **********************/

    PROCEDURE FIDE_DISTRITO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DISTRITO_TB_INSERTAR_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_DISTRITO_TB_ACTUALIZAR_SP(
        P_DISTRITO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_DISTRITO_TB_ELIMINAR_SP(P_DISTRITO_ID IN NUMBER);

/***********************CRUD DIRECCION**********************/

    PROCEDURE FIDE_DIRECCION_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DIRECCION_TB_INSERTAR_SP(
        P_SEÑAS IN VARCHAR2,
        P_PROVINCIA_ID IN NUMBER,
        P_DISTRITO_ID IN NUMBER,
        P_CANTON_ID IN NUMBER
    );

    PROCEDURE FIDE_DIRECCION_TB_ACTUALIZAR_SP(
        P_DIRECCION_ID IN NUMBER,
        P_SEÑAS IN VARCHAR2,
        P_PROVINCIA_ID IN NUMBER,
        P_DISTRITO_ID IN NUMBER,
        P_CANTON_ID IN NUMBER
    );

    PROCEDURE FIDE_DIRECCION_TB_ELIMINAR_SP(P_DIRECCION_ID IN NUMBER);

/***********************CRUD ESTADO**********************/

    PROCEDURE FIDE_ESTADO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_ESTADO_TB_INSERTAR_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_ESTADO_TB_ACTUALIZAR_SP(P_ESTADO_ID IN NUMBER, P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_ESTADO_TB_ELIMINAR_SP(P_ESTADO_ID IN NUMBER);

/***********************CRUD ROL**********************/

    PROCEDURE FIDE_ROL_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_ROL_TB_INSERTAR_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_ROL_TB_ACTUALIZAR_SP(P_ROL_ID IN NUMBER, P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_ROL_TB_ELIMINAR_SP(P_ROL_ID IN NUMBER);

/***********************CRUD USUARIO**********************/

    PROCEDURE FIDE_USUARIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_USUARIO_TB_INSERTAR_SP(
        P_NOMBRE IN VARCHAR2,
        P_APELLIDO IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_CONTRASEÑA IN VARCHAR2,
        P_DIRECCION_ID IN NUMBER,
        P_ROL_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER
    );

    PROCEDURE FIDE_USUARIO_TB_ELIMINAR_SP(P_USUARIO_ID IN NUMBER);

/***********************CRUD INVENTARIO**********************/

    PROCEDURE FIDE_INVENTARIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_INVENTARIO_TB_INSERT_SP(
        P_STOCK IN NUMBER,
        P_FECHA_VENCIMIENTO IN DATE,
        P_DIAS_EN_STOCK IN NUMBER,
        P_PRECIO_UNIT IN DECIMAL,
        P_ESTADO_ID IN NUMBER,
        P_PRODUCTO_ID IN NUMBER
    );

    PROCEDURE FIDE_INVENTARIO_TB_ACTUALIZAR_SP(
        P_INVENTARIO_ID IN NUMBER,
        P_STOCK IN NUMBER,
        P_FECHA_VENCIMIENTO IN DATE,
        P_DIAS_EN_STOCK IN NUMBER,
        P_PRECIO_UNIT IN DECIMAL,
        P_ESTADO_ID IN NUMBER,
        P_PRODUCTO_ID IN NUMBER
    );

    PROCEDURE FIDE_INVENTARIO_TB_ELIMINAR_SP(P_INVENTARIO_ID IN NUMBER);

/***********************CRUD TIPO_CURSO**********************/

    PROCEDURE FIDE_TIPO_CURSO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_TIPO_CURSO_TB_INSERTAR_SP(
        P_TIPO_CURSO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_TIPO_CURSO_TB_ACTUALIZAR_SP(P_TIPO_CURSO_ID IN NUMBER, P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_TIPO_CURSO_TB_ELIMINAR_SP(P_TIPO_CURSO_ID IN NUMBER);

/***********************CRUD CURSO**********************/

    PROCEDURE FIDE_CURSO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_CURSO_TB_INSERTAR_SP(
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_FECHA IN DATE,
        P_HORA IN VARCHAR2,
        P_IMAGEN IN VARCHAR2,
        P_PRECIO IN DECIMAL,
        P_CAPACIDAD IN NUMBER,
        P_TIPO_CURSO_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_DIRECCION_ID IN NUMBER
    );

    PROCEDURE FIDE_CURSO_TB_ACTUALIZAR_SP(
        P_CURSO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_FECHA IN DATE,
        P_HORA IN VARCHAR2,
        P_IMAGEN IN VARCHAR2,
        P_PRECIO IN DECIMAL,
        P_CAPACIDAD IN NUMBER,
        P_TIPO_CURSO_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_DIRECCION_ID IN NUMBER
    );

    PROCEDURE FIDE_CURSO_TB_ELIMINAR_SP(P_CURSO_ID IN NUMBER);

/***********************CRUD METODO_PAGO**********************/

    PROCEDURE FIDE_METODO_PAGO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_METODO_PAGO_TB_INSERTAR_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_METODO_PAGO_TB_ACTUALIZAR_SP(P_METODO_PAGO_ID IN NUMBER, P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_METODO_PAGO_TB_ELIMINAR_SP(P_METODO_PAGO_ID IN NUMBER);

/***********************CRUD DESCUENTO**********************/

    PROCEDURE FIDE_DESCUENTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DESCUENTO_TB_INSERTAR_SP(
        P_NOMBRE IN VARCHAR2,
        P_PORCENTAJE IN DECIMAL
    );

    PROCEDURE FIDE_DESCUENTO_TB_ACTUALIZAR_SP(
        P_DESCUENTO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_PORCENTAJE IN DECIMAL
    );

    PROCEDURE FIDE_DESCUENTO_TB_ELIMINAR_SP(
        P_DESCUENTO_ID IN NUMBER
    );

/***********************CRUD TIPO_COMPRA**********************/

    PROCEDURE FIDE_TIPO_COMPRA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_TIPO_COMPRA_TB_INSERTAR_SP(
        P_PRODUCTO_ID IN NUMBER,
        P_CURSO_ID IN NUMBER,
        P_SERVICIO_ID IN NUMBER
    );

    PROCEDURE FIDE_TIPO_COMPRA_TB_ACTUALIZAR_SP(
        P_TIPO_COMPRA_ID IN NUMBER,
        P_PRODUCTO_ID IN NUMBER,
        P_CURSO_ID IN NUMBER,
        P_SERVICIO_ID IN NUMBER
    );

    PROCEDURE FIDE_TIPO_COMPRA_TB_ELIMINAR_SP(
        P_TIPO_COMPRA_ID IN NUMBER
    );

/***********************CRUD DETALLE_FACTURA**********************/

    PROCEDURE FIDE_DETALLE_FACTURA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DETALLE_FACTURA_TB_INSERTAR_SP(
        P_CANTIDAD_LINEAS IN NUMBER,
        P_TOTAL_POR_LINEA IN NUMBER,
        P_TIPO_COMPRA_ID IN NUMBER
    );

    PROCEDURE FIDE_DETALLE_FACTURA_TB_ACTUALIZAR_SP(
        P_DETALLE_FACTURA_ID IN NUMBER,
        P_CANTIDAD_LINEAS IN NUMBER,
        P_TOTAL_POR_LINEA IN NUMBER,
        P_TIPO_COMPRA_ID IN NUMBER
    );

    PROCEDURE FIDE_DETALLE_FACTURA_TB_ELIMINAR_SP(
        P_DETALLE_FACTURA_ID IN NUMBER
    );

/***********************CRUD FACTURA**********************/

    PROCEDURE FIDE_FACTURA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_FACTURA_TB_INSERTAR_SP(
        P_USUARIO_ID IN NUMBER,
        P_FECHA IN DATE,
        P_DETALLE_FACTURA_ID IN NUMBER,
        P_CANTIDAD_LINEAS IN NUMBER,
        P_DESCUENTO_ID IN NUMBER,
        P_IVA IN DECIMAL,
        P_SUBTOTAL IN DECIMAL,
        P_MONTO_TOTAL IN DECIMAL,
        P_METODO_PAGO_ID IN NUMBER
    );

    PROCEDURE FIDE_FACTURA_TB_ACTUALIZAR_SP(
        P_FACTURA_ID IN NUMBER,
        P_USUARIO_ID IN NUMBER,
        P_FECHA IN DATE,
        P_DETALLE_FACTURA_ID IN NUMBER,
        P_CANTIDAD_LINEAS IN NUMBER,
        P_DESCUENTO_ID IN NUMBER,
        P_IVA IN DECIMAL,
        P_SUBTOTAL IN DECIMAL,
        P_MONTO_TOTAL IN DECIMAL,
        P_METODO_PAGO_ID IN NUMBER
    );

    PROCEDURE FIDE_FACTURA_TB_ELIMINAR_SP(
        P_FACTURA_ID IN NUMBER
    );


/***********************CRUD CATEGORIA**********************/

    PROCEDURE FIDE_CATEGORIA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_CATEGORIA_TB_INSERTAR_SP (
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_CATEGORIA_ACTUALIZAR_SP(
        P_CATEGORIA_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_CATEGORIA_ELIMINAR_SP(P_CATEGORIA_ID IN NUMBER);

    
/***********************CRUD PRODUCTO**********************/

    PROCEDURE FIDE_PRODUCTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_PRODUCTO_TB_INSERTAR_SP (
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_IMAGEN IN VARCHAR2,
        P_PRECIO_UNIT IN NUMBER,
        P_CATEGORIA_ID IN NUMBER
    );

    PROCEDURE FIDE_PRODUCTO_ACTUALIZAR_SP(
        P_PRODUCTO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_IMAGEN IN VARCHAR2,
        P_PRECIO_UNIT IN NUMBER,
        P_CATEGORIA_ID IN NUMBER
    );

    PROCEDURE FIDE_PRODUCTO_ELIMINAR_SP(P_PRODUCTO_ID IN NUMBER);

/***********************CRUD SERVICIO**********************/

    PROCEDURE FIDE_SERVICIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_SERVICIO_TB_INSERTAR_SP (
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_IMAGEN IN VARCHAR2
    );

    PROCEDURE FIDE_SERVICIO_ACTUALIZAR_SP(
        P_SERVICIO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_IMAGEN IN VARCHAR2
    );

    PROCEDURE FIDE_SERVICIO_ELIMINAR_SP(P_SERVICIO_ID IN NUMBER);
    
    /***********************REGISTROS POR ID**********************/

    -- INVENTARIO
    PROCEDURE FIDE_INVENTARIO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );

    -- PRODUCTO
    PROCEDURE FIDE_PRODUCTO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );

    -- CATEGORIA
    PROCEDURE FIDE_CATEGORIA_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );

    -- SERVICIO
    PROCEDURE FIDE_SERVICIO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
     -- ESTADO
    PROCEDURE FIDE_ESTADO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
     -- TIPO_CURSO
    PROCEDURE FIDE_TIPO_CURSO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
     -- DIRECCION
    PROCEDURE FIDE_DIRECCION_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
     -- CURSO
    PROCEDURE FIDE_CURSO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );

END FIDE_PROCEDIMIENTOS_PKG;


--BODY DEL PAQUETE DE PROCEDIMIENTOS ALMACENADOS

CREATE OR REPLACE PACKAGE BODY FIDE_PROCEDIMIENTOS_PKG AS
/***********************CRUD CITAS**********************/
--Procedimiento de lectura de citas 
PROCEDURE FIDE_CITA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * 
        FROM FIDE_CITA_TB;
END FIDE_CITA_TB_OBTENER_SP;

--Procedimiento de insert de citas
PROCEDURE FIDE_INSERTAR_CITA_SP(
    P_USUARIO_ID IN NUMBER,
    P_SERVICIO_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_FECHA IN DATE,
    P_HORA IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_CITA_TB (
        CITA_ID,
        USUARIO_ID,
        SERVICIO_ID,
        ESTADO_ID,
        FECHA,
        HORA
    )
    VALUES (
        FIDE_CITA_SEQ.NEXTVAL, 
        P_USUARIO_ID,
        P_SERVICIO_ID,
        P_ESTADO_ID,
        P_FECHA,
        P_HORA
    );
    COMMIT; 
END FIDE_INSERTAR_CITA_SP;

--Procedimiento de modificar de citas
PROCEDURE FIDE_MODIFICAR_CITA_SP(
    P_CITA_ID IN NUMBER, 
    P_USUARIO_ID IN NUMBER,
    P_SERVICIO_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_FECHA IN DATE,
    P_HORA IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_CITA_TB
    SET
        USUARIO_ID = P_USUARIO_ID,
        SERVICIO_ID = P_SERVICIO_ID,
        ESTADO_ID = P_ESTADO_ID,
        FECHA = P_FECHA,
        HORA = P_HORA
    WHERE CITA_ID = P_CITA_ID;
    COMMIT; 
END FIDE_MODIFICAR_CITA_SP;

--Procedimiento de eliminar de citas
PROCEDURE FIDE_ELIMINAR_CITA_SP(
    P_CITA_ID IN NUMBER 
) AS
BEGIN
    DELETE FROM FIDE_CITA_TB
    WHERE CITA_ID = P_CITA_ID;
    COMMIT; 
END FIDE_ELIMINAR_CITA_SP;


/***********************CRUD EVENTOS**********************/


--Procedimiento de lectura 
PROCEDURE FIDE_EVENTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * 
        FROM FIDE_EVENTO_TB;
END FIDE_EVENTO_TB_OBTENER_SP;

--Procedimiento de insert de evento
PROCEDURE FIDE_INSERTAR_EVENTO_SP(
    P_USUARIO_ID IN NUMBER,
    P_SERVICIO_ID IN NUMBER,
    P_DIRECCION_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_FECHA IN DATE
) AS
BEGIN
    INSERT INTO FIDE_EVENTO_TB (
        EVENTO_ID,
        USUARIO_ID,
        SERVICIO_ID,
        DIRECCION_ID,
        ESTADO_ID,
        FECHA
    )
    VALUES (
        FIDE_EVENTO_SEQ.NEXTVAL, 
        P_USUARIO_ID,
        P_SERVICIO_ID,
        P_DIRECCION_ID,
        P_ESTADO_ID,
        P_FECHA
    );
    COMMIT; 
END FIDE_INSERTAR_EVENTO_SP;

--Procedimiento de update de evento
PROCEDURE FIDE_ACTUALIZAR_EVENTO_SP(
    P_EVENTO_ID IN NUMBER,
    P_USUARIO_ID IN NUMBER,
    P_SERVICIO_ID IN NUMBER,
    P_DIRECCION_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_FECHA IN DATE
) AS
BEGIN
    UPDATE FIDE_EVENTO_TB
    SET 
        USUARIO_ID = P_USUARIO_ID,
        SERVICIO_ID = P_SERVICIO_ID,
        DIRECCION_ID = P_DIRECCION_ID,
        ESTADO_ID = P_ESTADO_ID,
        FECHA = P_FECHA
    WHERE 
        EVENTO_ID = P_EVENTO_ID;
    COMMIT; 
END FIDE_ACTUALIZAR_EVENTO_SP;

--Procedimiento almacenado de delete evento 
PROCEDURE FIDE_ELIMINAR_EVENTO_SP(
    P_EVENTO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_EVENTO_TB
    WHERE EVENTO_ID = P_EVENTO_ID;
    COMMIT; 
END FIDE_ELIMINAR_EVENTO_SP;


-------------------------Procedimientos de la parte de DIRECCIONES-------------------------------

/***********************CRUD PROVINCIA**********************/

--LECTURA
PROCEDURE FIDE_PROVINCIA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_PROVINCIA_TB;
END FIDE_PROVINCIA_TB_OBTENER_SP;


--Procedimiento de insert 
PROCEDURE FIDE_INSERTAR_PROVINCIA_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_PROVINCIA_TB (
        PROVINCIA_ID,
        NOMBRE
    )
    VALUES (
        FIDE_PROVINCIA_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT; 
END FIDE_INSERTAR_PROVINCIA_SP;


--Procedimiento update 
PROCEDURE FIDE_ACTUALIZAR_PROVINCIA_SP(
    P_PROVINCIA_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_PROVINCIA_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE 
        PROVINCIA_ID = P_PROVINCIA_ID;
    COMMIT; 
END FIDE_ACTUALIZAR_PROVINCIA_SP;


--Procedimiento delete 
PROCEDURE FIDE_ELIMINAR_PROVINCIA_SP(
    P_PROVINCIA_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_PROVINCIA_TB
    WHERE PROVINCIA_ID = P_PROVINCIA_ID;
    COMMIT; 
END FIDE_ELIMINAR_PROVINCIA_SP;


/***********************CRUD CANTON**********************/
--Lectura
PROCEDURE FIDE_CANTON_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_CANTON_TB;
END FIDE_CANTON_TB_OBTENER_SP;

--INSERT 
PROCEDURE FIDE_CANTON_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_CANTON_TB (
        CANTON_ID,
        NOMBRE
    )
    VALUES (
        FIDE_CANTON_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT; 
END FIDE_CANTON_TB_INSERTAR_SP;


--Update 
PROCEDURE FIDE_CANTON_TB_ACTUALIZAR_SP(
    P_CANTON_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_CANTON_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE 
        CANTON_ID = P_CANTON_ID;
    COMMIT; 
END FIDE_CANTON_TB_ACTUALIZAR_SP;

--Delete
PROCEDURE FIDE_CANTON_TB_ELIMINAR_SP(
    P_CANTON_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_CANTON_TB
    WHERE CANTON_ID = P_CANTON_ID;
    COMMIT; 
END FIDE_CANTON_TB_ELIMINAR_SP;

/***********************CRUD DISTRITO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_DISTRITO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_DISTRITO_TB;
END FIDE_DISTRITO_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT 
PROCEDURE FIDE_DISTRITO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_DISTRITO_TB (
        DISTRITO_ID,
        NOMBRE
    )
    VALUES (
        FIDE_DISTRITO_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT; 
END FIDE_DISTRITO_TB_INSERTAR_SP;


--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_DISTRITO_TB_ACTUALIZAR_SP(
    P_DISTRITO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_DISTRITO_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE 
        DISTRITO_ID = P_DISTRITO_ID;
    COMMIT; 
END FIDE_DISTRITO_TB_ACTUALIZAR_SP;

--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_DISTRITO_TB_ELIMINAR_SP(
    P_DISTRITO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_DISTRITO_TB
    WHERE DISTRITO_ID = P_DISTRITO_ID;
    COMMIT; 
END FIDE_DISTRITO_TB_ELIMINAR_SP;

/***********************CRUD DIRECCION**********************/

--Procedimiento de lectura 
PROCEDURE FIDE_DIRECCION_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_DIRECCION_TB;
END FIDE_DIRECCION_TB_OBTENER_SP;

--Procedimiento de insert 
PROCEDURE FIDE_DIRECCION_TB_INSERTAR_SP(
    P_SEÑAS IN VARCHAR2,
    P_PROVINCIA_ID IN NUMBER,
    P_DISTRITO_ID IN NUMBER,
    P_CANTON_ID IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_DIRECCION_TB (
        DIRECCION_ID,
        SEÑAS,
        PROVINCIA_ID,
        DISTRITO_ID,
        CANTON_ID
    )
    VALUES (
        FIDE_DIRECCION_SEQ.NEXTVAL, 
        P_SEÑAS,
        P_PROVINCIA_ID,
        P_DISTRITO_ID,
        P_CANTON_ID
    );
    COMMIT; 
END FIDE_DIRECCION_TB_INSERTAR_SP;

--Procedimiento update 
PROCEDURE FIDE_DIRECCION_TB_ACTUALIZAR_SP(
    P_DIRECCION_ID IN NUMBER,
    P_SEÑAS IN VARCHAR2,
    P_PROVINCIA_ID IN NUMBER,
    P_DISTRITO_ID IN NUMBER,
    P_CANTON_ID IN NUMBER
) AS
BEGIN
    UPDATE FIDE_DIRECCION_TB
    SET 
        SEÑAS = P_SEÑAS,
        PROVINCIA_ID = P_PROVINCIA_ID,
        DISTRITO_ID = P_DISTRITO_ID,
        CANTON_ID = P_CANTON_ID
    WHERE 
        DIRECCION_ID = P_DIRECCION_ID;
    COMMIT; 
END FIDE_DIRECCION_TB_ACTUALIZAR_SP;

--Procedimiento delete 
PROCEDURE FIDE_DIRECCION_TB_ELIMINAR_SP(
    P_DIRECCION_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_DIRECCION_TB
    WHERE DIRECCION_ID = P_DIRECCION_ID;
    COMMIT; 
END FIDE_DIRECCION_TB_ELIMINAR_SP;


/***************Procedimientos de la parte de ESTADO******************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_ESTADO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_ESTADO_TB;
END FIDE_ESTADO_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT
PROCEDURE FIDE_ESTADO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_ESTADO_TB (
        ESTADO_ID,
        NOMBRE
    )
    VALUES (
        FIDE_ESTADO_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT; 
END FIDE_ESTADO_TB_INSERTAR_SP;


--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_ESTADO_TB_ACTUALIZAR_SP(
    P_ESTADO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_ESTADO_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE 
        ESTADO_ID = P_ESTADO_ID;
    COMMIT; 
END FIDE_ESTADO_TB_ACTUALIZAR_SP;


--PROCEDIMIENTO DE DELETE 
PROCEDURE FIDE_ESTADO_TB_ELIMINAR_SP(
    P_ESTADO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_ESTADO_TB
    WHERE ESTADO_ID = P_ESTADO_ID;
    COMMIT; 
END FIDE_ESTADO_TB_ELIMINAR_SP;

-------------------------Procedimientos de la parte de USUARIOS-------------------------------
/***********************CRUD ROL**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_ROL_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_ROL_TB;
END FIDE_ROL_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT
PROCEDURE FIDE_ROL_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_ROL_TB (
        ROL_ID,
        NOMBRE
    )
    VALUES (
        FIDE_ROL_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT; 
END FIDE_ROL_TB_INSERTAR_SP;

--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_ROL_TB_ACTUALIZAR_SP(
    P_ROL_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_ROL_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE 
        ROL_ID = P_ROL_ID;
    COMMIT; 
END FIDE_ROL_TB_ACTUALIZAR_SP;

--PROCEDIMIENTO DELETE
PROCEDURE FIDE_ROL_TB_ELIMINAR_SP(
    P_ROL_ID IN NUMBER
) AS
BEGIN
    DELETE FROM AdminDB.FIDE_ROL_TB
    WHERE ROL_ID = P_ROL_ID;
    COMMIT; 
END FIDE_ROL_TB_ELIMINAR_SP;

/***********************CRUD USUARIO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_USUARIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_USUARIO_TB;
END FIDE_USUARIO_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT
PROCEDURE FIDE_USUARIO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2,
    P_APELLIDO IN VARCHAR2,
    P_CORREO IN VARCHAR2,
    P_CONTRASEÑA IN VARCHAR2,
    P_DIRECCION_ID IN NUMBER,
    P_ROL_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_USUARIO_TB (
        USUARIO_ID,
        NOMBRE,
        APELLIDO,
        CORREO,
        CONTRASEÑA,
        DIRECCION_ID,
        ROL_ID,
        ESTADO_ID
    )
    VALUES (
         FIDE_USUARIO_SEQ.NEXTVAL, 
        P_NOMBRE,
        P_APELLIDO,
        P_CORREO,
        P_CONTRASEÑA,
        P_DIRECCION_ID,
        P_ROL_ID,
        P_ESTADO_ID
    );
    COMMIT; 
END FIDE_USUARIO_TB_INSERTAR_SP;

--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_USUARIO_TB_ELIMINAR_SP(
    P_USUARIO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_USUARIO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;
    COMMIT; 
END FIDE_USUARIO_TB_ELIMINAR_SP;

-------------------------Procedimientos de la parte de INVENTARIO-------------------------------
/***********************CRUD INVENTARIO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_INVENTARIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_INVENTARIO_TB;
END FIDE_INVENTARIO_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT
PROCEDURE FIDE_INVENTARIO_TB_INSERT_SP(
    P_STOCK IN NUMBER,
    P_FECHA_VENCIMIENTO IN DATE,
    P_DIAS_EN_STOCK IN NUMBER,
    P_PRECIO_UNIT IN DECIMAL,
    P_ESTADO_ID IN NUMBER,
    P_PRODUCTO_ID IN NUMBER
) AS
BEGIN
    INSERT INTO AdminDB.FIDE_INVENTARIO_TB (
        INVENTARIO_ID,
        STOCK,
        FECHA_VENCIMIENTO,
        DIAS_EN_STOCK,
        PRECIO_UNIT,
        ESTADO_ID,
        PRODUCTO_ID
    )
    VALUES (
       FIDE_INVENTARIO_SEQ.NEXTVAL,
        P_STOCK,
        P_FECHA_VENCIMIENTO,
        P_DIAS_EN_STOCK,
        P_PRECIO_UNIT,
        P_ESTADO_ID,
        P_PRODUCTO_ID
    );
    COMMIT;
END FIDE_INVENTARIO_TB_INSERT_SP;

--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_INVENTARIO_TB_ACTUALIZAR_SP(
    P_INVENTARIO_ID IN NUMBER,
    P_STOCK IN NUMBER,
    P_FECHA_VENCIMIENTO IN DATE,
    P_DIAS_EN_STOCK IN NUMBER,
    P_PRECIO_UNIT IN DECIMAL,
    P_ESTADO_ID IN NUMBER,
    P_PRODUCTO_ID IN NUMBER
) AS
BEGIN
    UPDATE FIDE_INVENTARIO_TB
    SET 
        STOCK = P_STOCK,
        FECHA_VENCIMIENTO = P_FECHA_VENCIMIENTO,
        DIAS_EN_STOCK = P_DIAS_EN_STOCK,
        PRECIO_UNIT = P_PRECIO_UNIT,
        ESTADO_ID = P_ESTADO_ID,
        PRODUCTO_ID = P_PRODUCTO_ID
    WHERE 
        INVENTARIO_ID = P_INVENTARIO_ID;
    COMMIT; 
END FIDE_INVENTARIO_TB_ACTUALIZAR_SP;

--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_INVENTARIO_TB_ELIMINAR_SP(
    P_INVENTARIO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_INVENTARIO_TB
    WHERE INVENTARIO_ID = P_INVENTARIO_ID;
    COMMIT; 
END FIDE_INVENTARIO_TB_ELIMINAR_SP;


-------------------------Procedimientos de la parte de CURSOS-------------------------------
/***********************CRUD TIPO_CURSO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_TIPO_CURSO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_TIPO_CURSO_TB;
END FIDE_TIPO_CURSO_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT
PROCEDURE FIDE_TIPO_CURSO_TB_INSERTAR_SP(
    P_TIPO_CURSO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_TIPO_CURSO_TB (
        TIPO_CURSO_ID,
        NOMBRE
    ) VALUES (
        P_TIPO_CURSO_ID,
        P_NOMBRE
    );
    COMMIT;
END FIDE_TIPO_CURSO_TB_INSERTAR_SP;


--PROCEDIMIENTO UPDATE 
PROCEDURE FIDE_TIPO_CURSO_TB_ACTUALIZAR_SP(
    P_TIPO_CURSO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_TIPO_CURSO_TB
    SET
        NOMBRE = P_NOMBRE
    WHERE
        TIPO_CURSO_ID = P_TIPO_CURSO_ID;
    COMMIT;
END FIDE_TIPO_CURSO_TB_ACTUALIZAR_SP;

--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_TIPO_CURSO_TB_ELIMINAR_SP(
    P_TIPO_CURSO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_TIPO_CURSO_TB
    WHERE TIPO_CURSO_ID = P_TIPO_CURSO_ID;
    COMMIT;
END FIDE_TIPO_CURSO_TB_ELIMINAR_SP;


/***********************CRUD CURSO**********************/

--PROCEDIMIENTO LECTURA 
PROCEDURE FIDE_CURSO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_CURSO_TB;
END FIDE_CURSO_TB_OBTENER_SP;

--PROCEDIMIENTO INSERT
PROCEDURE FIDE_CURSO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_FECHA IN DATE,
    P_HORA IN VARCHAR2,
    P_IMAGEN IN VARCHAR2,
    P_PRECIO IN DECIMAL,
    P_CAPACIDAD IN NUMBER,
    P_TIPO_CURSO_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_DIRECCION_ID IN NUMBER
) AS
BEGIN
    INSERT INTO AdminDB.FIDE_CURSO_TB (
        CURSO_ID, 
        NOMBRE, 
        DESCRIPCION, 
        FECHA, 
        HORA, 
        IMAGEN, 
        PRECIO, 
        CAPACIDAD, 
        TIPO_CURSO_ID, 
        ESTADO_ID, 
        DIRECCION_ID
    )
    VALUES (
        FIDE_CURSO_SEQ.NEXTVAL, 
        P_NOMBRE,
        P_DESCRIPCION,
        P_FECHA,
        P_HORA,
        P_IMAGEN,
        P_PRECIO,
        P_CAPACIDAD,
        P_TIPO_CURSO_ID,
        P_ESTADO_ID,
        P_DIRECCION_ID
    );
    COMMIT;
END FIDE_CURSO_TB_INSERTAR_SP;

--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_CURSO_TB_ACTUALIZAR_SP(
    P_CURSO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_FECHA IN DATE,
    P_HORA IN VARCHAR2,
    P_IMAGEN IN VARCHAR2,
    P_PRECIO IN DECIMAL,
    P_CAPACIDAD IN NUMBER,
    P_TIPO_CURSO_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_DIRECCION_ID IN NUMBER
) AS
BEGIN
    UPDATE FIDE_CURSO_TB
    SET 
        NOMBRE = P_NOMBRE,
        DESCRIPCION = P_DESCRIPCION,
        FECHA = P_FECHA,
        HORA = P_HORA,
        IMAGEN = P_IMAGEN,
        PRECIO = P_PRECIO,
        CAPACIDAD = P_CAPACIDAD,
        TIPO_CURSO_ID = P_TIPO_CURSO_ID,
        ESTADO_ID = P_ESTADO_ID,
        DIRECCION_ID = P_DIRECCION_ID
    WHERE CURSO_ID = P_CURSO_ID;
    COMMIT;
END FIDE_CURSO_TB_ACTUALIZAR_SP;


--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_CURSO_TB_ELIMINAR_SP(
    P_CURSO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_CURSO_TB
    WHERE CURSO_ID = P_CURSO_ID;
    COMMIT;
END FIDE_CURSO_TB_ELIMINAR_SP;


-------------------------Procedimientos de la parte de COMPRAS-------------------------------
/***********************CRUD METODO_PAGO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_METODO_PAGO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * 
        FROM FIDE_METODO_PAGO_TB;
END FIDE_METODO_PAGO_TB_OBTENER_SP;

--PROCEDIMIENTO INSERT
PROCEDURE FIDE_METODO_PAGO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_METODO_PAGO_TB (
        METODO_PAGO_ID, 
        NOMBRE
    )
    VALUES (
        FIDE_METODO_PAGO_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT;
END FIDE_METODO_PAGO_TB_INSERTAR_SP;

--PROCEDIMIENTO UPDATE 
PROCEDURE FIDE_METODO_PAGO_TB_ACTUALIZAR_SP(
    P_METODO_PAGO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_METODO_PAGO_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;
    COMMIT;
END FIDE_METODO_PAGO_TB_ACTUALIZAR_SP;

--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_METODO_PAGO_TB_ELIMINAR_SP(
    P_METODO_PAGO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_METODO_PAGO_TB
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;
    COMMIT;
END FIDE_METODO_PAGO_TB_ELIMINAR_SP;


/***********************CRUD DESCUENTO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_DESCUENTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_DESCUENTO_TB;
END FIDE_DESCUENTO_TB_OBTENER_SP;


--PROCEDIMIENTO INSERT
PROCEDURE FIDE_DESCUENTO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2,
    P_PORCENTAJE IN DECIMAL
) AS
BEGIN
    INSERT INTO FIDE_DESCUENTO_TB (
        DESCUENTO_ID, 
        NOMBRE, 
        PORCENTAJE
    )
    VALUES (
        FIDE_DESCUENTO_SEQ.NEXTVAL, 
        P_NOMBRE,
        P_PORCENTAJE
    );
    COMMIT;
END FIDE_DESCUENTO_TB_INSERTAR_SP;

--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_DESCUENTO_TB_ACTUALIZAR_SP(
    P_DESCUENTO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_PORCENTAJE IN DECIMAL
) AS
BEGIN
    UPDATE FIDE_DESCUENTO_TB
    SET 
        NOMBRE = P_NOMBRE,
        PORCENTAJE = P_PORCENTAJE
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;
    COMMIT;
END FIDE_DESCUENTO_TB_ACTUALIZAR_SP;

--PROCEDIMEINTO DELETE 
PROCEDURE FIDE_DESCUENTO_TB_ELIMINAR_SP(
    P_DESCUENTO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_DESCUENTO_TB
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;
    COMMIT;
END FIDE_DESCUENTO_TB_ELIMINAR_SP;

/***********************CRUD TIPO_COMPRA**********************/

--PROCEDIMIENTO LECTURA
PROCEDURE FIDE_TIPO_COMPRA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_TIPO_COMPRA_TB;
END FIDE_TIPO_COMPRA_TB_OBTENER_SP;

--PROCEDIMIENTO INSERT
PROCEDURE FIDE_TIPO_COMPRA_TB_INSERTAR_SP(
    P_PRODUCTO_ID IN NUMBER,
    P_CURSO_ID IN NUMBER,
    P_SERVICIO_ID IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_TIPO_COMPRA_TB (
        TIPO_COMPRA_ID, 
        PRODUCTO_ID, 
        CURSO_ID, 
        SERVICIO_ID
    )
    VALUES (
        FIDE_TIPO_COMPRA_SEQ.NEXTVAL, 
        P_PRODUCTO_ID,
        P_CURSO_ID,
        P_SERVICIO_ID
    );
    COMMIT;
END FIDE_TIPO_COMPRA_TB_INSERTAR_SP;

--PROCEDIMIENTO UPDATE 
PROCEDURE FIDE_TIPO_COMPRA_TB_ACTUALIZAR_SP(
    P_TIPO_COMPRA_ID IN NUMBER,
    P_PRODUCTO_ID IN NUMBER,
    P_CURSO_ID IN NUMBER,
    P_SERVICIO_ID IN NUMBER
) AS
BEGIN
    UPDATE FIDE_TIPO_COMPRA_TB
    SET 
        PRODUCTO_ID = P_PRODUCTO_ID,
        CURSO_ID = P_CURSO_ID,
        SERVICIO_ID = P_SERVICIO_ID
    WHERE TIPO_COMPRA_ID = P_TIPO_COMPRA_ID;
    COMMIT;
END FIDE_TIPO_COMPRA_TB_ACTUALIZAR_SP;

--PROCEDIMEINTO DELETE 
PROCEDURE FIDE_TIPO_COMPRA_TB_ELIMINAR_SP(
    P_TIPO_COMPRA_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_TIPO_COMPRA_TB
    WHERE TIPO_COMPRA_ID = P_TIPO_COMPRA_ID;
    COMMIT;
END FIDE_TIPO_COMPRA_TB_ELIMINAR_SP;


/***********************CRUD DETALLE_FACTURA**********************/

--PROCEDIMIENTO LECTURA
PROCEDURE FIDE_DETALLE_FACTURA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_DETALLE_FACTURA_TB;
END FIDE_DETALLE_FACTURA_TB_OBTENER_SP;

--PROCEDIMIENTO INSERT
PROCEDURE FIDE_DETALLE_FACTURA_TB_INSERTAR_SP(
    P_CANTIDAD_LINEAS IN NUMBER,
    P_TOTAL_POR_LINEA IN NUMBER,
    P_TIPO_COMPRA_ID IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_DETALLE_FACTURA_TB (
        DETALLE_FACTURA_ID, 
        CANTIDAD_LINEAS, 
        TOTAL_POR_LINEA, 
        TIPO_COMPRA_ID
    )
    VALUES (
        FIDE_DETALLE_FACTURA_SEQ.NEXTVAL, 
        P_CANTIDAD_LINEAS,
        P_TOTAL_POR_LINEA,
        P_TIPO_COMPRA_ID
    );
    COMMIT;
END FIDE_DETALLE_FACTURA_TB_INSERTAR_SP;

--PROCEDIMIENTO UPDATE 
PROCEDURE FIDE_DETALLE_FACTURA_TB_ACTUALIZAR_SP(
    P_DETALLE_FACTURA_ID IN NUMBER,
    P_CANTIDAD_LINEAS IN NUMBER,
    P_TOTAL_POR_LINEA IN NUMBER,
    P_TIPO_COMPRA_ID IN NUMBER
) AS
BEGIN
    UPDATE FIDE_DETALLE_FACTURA_TB
    SET 
        CANTIDAD_LINEAS = P_CANTIDAD_LINEAS,
        TOTAL_POR_LINEA = P_TOTAL_POR_LINEA,
        TIPO_COMPRA_ID = P_TIPO_COMPRA_ID
    WHERE DETALLE_FACTURA_ID = P_DETALLE_FACTURA_ID;
    COMMIT;
END FIDE_DETALLE_FACTURA_TB_ACTUALIZAR_SP;

--PROCEDIMEITNO DELETE
PROCEDURE FIDE_DETALLE_FACTURA_TB_ELIMINAR_SP(
    P_DETALLE_FACTURA_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_DETALLE_FACTURA_TB
    WHERE DETALLE_FACTURA_ID = P_DETALLE_FACTURA_ID;
    COMMIT;
END FIDE_DETALLE_FACTURA_TB_ELIMINAR_SP;

/***********************CRUD FACTURA**********************/

--PROCEDIMEINTO LECTURA 
PROCEDURE FIDE_FACTURA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_FACTURA_TB;
END FIDE_FACTURA_TB_OBTENER_SP;

--PROCEDIMIENTO INSERT
PROCEDURE FIDE_FACTURA_TB_INSERTAR_SP(
    P_USUARIO_ID IN NUMBER,
    P_FECHA IN DATE,
    P_DETALLE_FACTURA_ID IN NUMBER,
    P_CANTIDAD_LINEAS IN NUMBER,
    P_DESCUENTO_ID IN NUMBER,
    P_IVA IN DECIMAL,
    P_SUBTOTAL IN DECIMAL,
    P_MONTO_TOTAL IN DECIMAL,
    P_METODO_PAGO_ID IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_FACTURA_TB (
        FACTURA_ID, 
        USUARIO_ID, 
        FECHA, 
        DETALLE_FACTURA_ID, 
        CANTIDAD_LINEAS, 
        DESCUENTO_ID, 
        IVA, 
        SUBTOTAL, 
        MONTO_TOTAL, 
        METODO_PAGO_ID
    )
    VALUES (
        FIDE_FACTURA_SEQ.NEXTVAL, 
        P_USUARIO_ID,
        P_FECHA,
        P_DETALLE_FACTURA_ID,
        P_CANTIDAD_LINEAS,
        P_DESCUENTO_ID,
        P_IVA,
        P_SUBTOTAL,
        P_MONTO_TOTAL,
        P_METODO_PAGO_ID
    );
    COMMIT;
END FIDE_FACTURA_TB_INSERTAR_SP;


--PROCEDIMIENTO UPDATE 
PROCEDURE FIDE_FACTURA_TB_ACTUALIZAR_SP(
    P_FACTURA_ID IN NUMBER,
    P_USUARIO_ID IN NUMBER,
    P_FECHA IN DATE,
    P_DETALLE_FACTURA_ID IN NUMBER,
    P_CANTIDAD_LINEAS IN NUMBER,
    P_DESCUENTO_ID IN NUMBER,
    P_IVA IN DECIMAL,
    P_SUBTOTAL IN DECIMAL,
    P_MONTO_TOTAL IN DECIMAL,
    P_METODO_PAGO_ID IN NUMBER
) AS
BEGIN
    UPDATE FIDE_FACTURA_TB
    SET 
        USUARIO_ID = P_USUARIO_ID,
        FECHA = P_FECHA,
        DETALLE_FACTURA_ID = P_DETALLE_FACTURA_ID,
        CANTIDAD_LINEAS = P_CANTIDAD_LINEAS,
        DESCUENTO_ID = P_DESCUENTO_ID,
        IVA = P_IVA,
        SUBTOTAL = P_SUBTOTAL,
        MONTO_TOTAL = P_MONTO_TOTAL,
        METODO_PAGO_ID = P_METODO_PAGO_ID
    WHERE FACTURA_ID = P_FACTURA_ID;
    COMMIT;
END FIDE_FACTURA_TB_ACTUALIZAR_SP;


--PROCEDIMIENTO DELETE
PROCEDURE FIDE_FACTURA_TB_ELIMINAR_SP(
    P_FACTURA_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_FACTURA_TB
    WHERE FACTURA_ID = P_FACTURA_ID;
    COMMIT;
END FIDE_FACTURA_TB_ELIMINAR_SP;

/***********************CRUD CATEGORIA**********************/

--READ
PROCEDURE FIDE_CATEGORIA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_FACTURA_TB;
END FIDE_CATEGORIA_TB_OBTENER_SP;

--INSERT
PROCEDURE FIDE_CATEGORIA_TB_INSERTAR_SP (
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_CATEGORIA_TB (
        CATEGORIA_ID, 
        NOMBRE
    )
    VALUES (
        FIDE_CATEGORIA_SEQ.NEXTVAL, 
        P_NOMBRE
    );
     COMMIT;
END FIDE_CATEGORIA_TB_INSERTAR_SP;

--UPDATE
PROCEDURE FIDE_CATEGORIA_ACTUALIZAR_SP(
    P_CATEGORIA_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
)
IS
BEGIN
    UPDATE FIDE_CATEGORIA_TB
    SET NOMBRE = P_NOMBRE
    WHERE CATEGORIA_ID = P_CATEGORIA_ID;
    COMMIT;
END FIDE_CATEGORIA_ACTUALIZAR_SP;

--DELETE
PROCEDURE FIDE_CATEGORIA_ELIMINAR_SP(P_CATEGORIA_ID IN NUMBER) AS
    BEGIN
        DELETE FROM FIDE_CATEGORIA_TB
        WHERE CATEGORIA_ID = P_CATEGORIA_ID;
        COMMIT;
    END FIDE_CATEGORIA_ELIMINAR_SP;
    
/***********************CRUD PRODUCTO**********************/

--READ
PROCEDURE FIDE_PRODUCTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_FACTURA_TB;
END FIDE_PRODUCTO_TB_OBTENER_SP;

--INSERT
PROCEDURE FIDE_PRODUCTO_TB_INSERTAR_SP (
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_IMAGEN IN VARCHAR2,
    P_PRECIO_UNIT IN NUMBER,
    P_CATEGORIA_ID IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_PRODUCTO_TB (
        PRODUCTO_ID, 
        NOMBRE,
        DESCRIPCION,
        IMAGEN,
        PRECIO_UNIT,
        CATEGORIA_ID
    )
    VALUES (
        FIDE_PRODUCTO_SEQ.NEXTVAL, 
        P_NOMBRE,
        P_DESCRIPCION,
        P_IMAGEN,
        P_PRECIO_UNIT,
        P_CATEGORIA_ID
    );
     COMMIT;
END FIDE_PRODUCTO_TB_INSERTAR_SP;

--UPDATE
PROCEDURE FIDE_PRODUCTO_ACTUALIZAR_SP(
    P_PRODUCTO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_IMAGEN IN VARCHAR2,
    P_PRECIO_UNIT IN NUMBER,
    P_CATEGORIA_ID NUMBER
)
IS
BEGIN
    UPDATE FIDE_PRODUCTO_TB
    SET NOMBRE = P_NOMBRE,
        DESCRIPCION = P_DESCRIPCION,
        IMAGEN = P_IMAGEN,
        PRECIO_UNIT = P_PRECIO_UNIT,
        CATEGORIA_ID = P_CATEGORIA_ID
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;
    COMMIT;
END FIDE_PRODUCTO_ACTUALIZAR_SP;

--DELETE
PROCEDURE FIDE_PRODUCTO_ELIMINAR_SP(P_PRODUCTO_ID IN NUMBER) AS
    BEGIN
        DELETE FROM FIDE_PRODUCTO_TB
        WHERE PRODUCTO_ID = P_PRODUCTO_ID;
        COMMIT;
    END FIDE_PRODUCTO_ELIMINAR_SP;

/***********************CRUD SERVICIO**********************/

--READ
PROCEDURE FIDE_SERVICIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_FACTURA_TB;
END FIDE_SERVICIO_TB_OBTENER_SP;

--INSERT
PROCEDURE FIDE_SERVICIO_TB_INSERTAR_SP (
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_IMAGEN IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_SERVICIO_TB (
        SERVICIO_ID, 
        NOMBRE, 
        DESCRIPCION,
        IMAGEN
    )
    VALUES (
        FIDE_SERVICIO_SEQ.NEXTVAL, 
        P_NOMBRE, 
        P_DESCRIPCION,
        P_IMAGEN
    );
     COMMIT;
END FIDE_SERVICIO_TB_INSERTAR_SP;

--UPDATE
PROCEDURE FIDE_SERVICIO_ACTUALIZAR_SP(
    P_SERVICIO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_IMAGEN IN VARCHAR2
)
IS
BEGIN
    UPDATE FIDE_SERVICIO_TB
    SET NOMBRE = P_NOMBRE,
        DESCRIPCION = P_DESCRIPCION,
        IMAGEN = P_IMAGEN
    WHERE SERVICIO_ID = P_SERVICIO_ID;
    COMMIT;
END FIDE_SERVICIO_ACTUALIZAR_SP;

--DELETE
PROCEDURE FIDE_SERVICIO_ELIMINAR_SP(P_SERVICIO_ID IN NUMBER) AS
    BEGIN
        DELETE FROM FIDE_SERVICIO_TB
        WHERE SERVICIO_ID = P_SERVICIO_ID;
        COMMIT;
    END FIDE_SERVICIO_ELIMINAR_SP;
    
/***********************PROCEDIMIENTOS PARA OBTENER ID**********************/

--INVENTARIO
PROCEDURE FIDE_INVENTARIO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_INVENTARIO_TB
        WHERE INVENTARIO_ID = V_ID; 
END FIDE_INVENTARIO_TB_GET_BY_ID;

--PRODUCTO
PROCEDURE FIDE_PRODUCTO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_PRODUCTO_TB
        WHERE PRODUCTO_ID = V_ID; 
END FIDE_PRODUCTO_TB_GET_BY_ID;

--CATEGORIA
PROCEDURE FIDE_CATEGORIA_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_CATEGORIA_TB
        WHERE CATEGORIA_ID = V_ID; 
END FIDE_CATEGORIA_TB_GET_BY_ID;

--SERVICIO
PROCEDURE FIDE_SERVICIO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_SERVICIO_TB
        WHERE SERVICIO_ID = V_ID; 
END FIDE_SERVICIO_TB_GET_BY_ID;

--ESTADO
PROCEDURE FIDE_ESTADO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_ESTADO_TB
        WHERE ESTADO_ID = V_ID; 
END FIDE_ESTADO_TB_GET_BY_ID;

--TIPO CURSO
PROCEDURE FIDE_TIPO_CURSO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_TIPO_CURSO_TB
        WHERE TIPO_CURSO_ID = V_ID; 
END FIDE_TIPO_CURSO_TB_GET_BY_ID;

--DIRECCION
PROCEDURE FIDE_DIRECCION_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_DIRECCION_TB
        WHERE DIRECCION_ID = V_ID; 
END FIDE_DIRECCION_TB_GET_BY_ID;

--CURSO
PROCEDURE FIDE_CURSO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_CURSO_TB
        WHERE CURSO_ID = V_ID; 
END FIDE_CURSO_TB_GET_BY_ID;

END FIDE_PROCEDIMIENTOS_PKG;



/******************************************************************************************
*******************************************************************************************/


--ESPECIFICACIÓN DEL PAQUETE DE FUNCIONES

CREATE OR REPLACE PACKAGE FIDE_FUNCIONES_PKG AS
/*********************** FUNCIONES PARA PROVINCIA **********************/

    FUNCTION FIDE_PROVINCIA_TB_BUSCAR_NOMBRE_X_PROVINCIA_ID_FN(P_PROVINCIA_ID NUMBER)
    RETURN VARCHAR2;

    FUNCTION FIDE_PROVINCIA_TB_BUSCAR_PROVINCIA_X_NOMBRE_FN(P_NOMBRE VARCHAR2)
    RETURN NUMBER;
    
    FUNCTION FIDE_PROVINCIA_TB_LISTA_PROVINICAS_FN
    RETURN SYS.ODCIVARCHAR2LIST;

/*********************** FUNCIONES PARA CANTÓN **********************/
    FUNCTION FIDE_CANTON_TB_NOMBRE_CANTON_FN(P_CANTON_ID NUMBER)
    RETURN VARCHAR2;

    FUNCTION FIDE_CANTON_TB_BUSCAR_NOMBRE_CANTON_FN(P_NOMBRE VARCHAR2)
    RETURN NUMBER;

    FUNCTION FIDE_CANTON_TB_LISTA_CANTONES_FN
    RETURN SYS.ODCIVARCHAR2LIST;

/*********************** FUNCIONES PARA DISTRITO **********************/
    FUNCTION FIDE_DISTRITO_TB_BUSCAR_NOMBRE_X_DISTRITO_ID_FN(P_DISTRITO_ID NUMBER)
    RETURN VARCHAR2;

    FUNCTION FIDE_DISTRITO_TB_BUSCAR_DISTRITO_X_NOMBRE_FN(P_NOMBRE VARCHAR2)
    RETURN NUMBER;

    FUNCTION FIDE_DISTRITO_TB_LISTA_DISTRITOS_FN
    RETURN SYS.ODCIVARCHAR2LIST;

/*********************** FUNCIONES PARA DIRECCIONES **********************/
    FUNCTION FIDE_DIRECCION_TB_CONTAR_POR_PROVINCIA_FN(P_PROVINCIA_ID NUMBER)
    RETURN PROVINCIA_RESULTADO;

    FUNCTION FIDE_DIRECCION_TB_VALIDAR_FN(
        P_PROVINCIA_ID NUMBER,
        P_CANTON_ID NUMBER,
        P_DISTRITO_ID NUMBER
    ) RETURN NUMBER;

    FUNCTION FIDE_DIRECCION_TB_OBTENER_DETALLES_FN(P_DIRECCION_ID NUMBER)
    RETURN VARCHAR2;

    FUNCTION FIDE_DIRECCION_TB_FORMATO_FN(P_DIRECCION_ID NUMBER)
    RETURN VARCHAR2;

/*********************** FUNCIONES PARA ESTADOS **********************/
    FUNCTION FIDE_ESTADO_TB_OBTENER_NOMBRE_FN(P_ESTADO_ID NUMBER)
    RETURN VARCHAR2;

    FUNCTION FIDE_ESTADO_TB_VALIDAR_ACTIVO_FN(P_ESTADO_ID NUMBER)
    RETURN NUMBER;

    FUNCTION FIDE_ESTADO_TB_CONTAR_POR_ESTADO_FN(P_ESTADO_ID NUMBER)
    RETURN NUMBER;

    FUNCTION FIDE_ESTADO_TB_OBTENER_ESTADO_INVERSO_FN(P_ESTADO_ID NUMBER)
    RETURN NUMBER;

/*********************** FUNCIONES PARA ROLES **********************/
 
    FUNCTION FIDE_ROL_TB_VALIDAR_ADMIN_FN(P_ROL_ID NUMBER)
    RETURN NUMBER;

    FUNCTION FIDE_ROL_TB_VALIDAR_USUARIO_FN(P_ROL_ID NUMBER)
    RETURN NUMBER;

    FUNCTION FIDE_ROL_TB_OBTENER_NOMBRE_FN(P_ROL_ID NUMBER)
    RETURN VARCHAR2;
    
    FUNCTION FIDE_USUARIO_TB_VERIFICAR_ACTIVO_FN(P_USUARIO_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_USUARIO_TB_CONTAR_ACTIVOS_FN RETURN NUMBER;
    
    FUNCTION FIDE_USUARIO_TB_VERIFICAR_ROL_FN(P_USUARIO_ID NUMBER, P_ROL_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_USUARIO_TB_OBTENER_NOMBRE_COMPLETO_FN(P_USUARIO_ID NUMBER) RETURN VARCHAR2;

    FUNCTION FIDE_CATEGORIA_TB_EXISTE_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;
    
    FUNCTION FIDE_CATEGORIA_TB_OBTENER_NOMBRE_FN(P_CATEGORIA_ID NUMBER) RETURN VARCHAR2;
    
    FUNCTION FIDE_CATEGORIA_TB_CONTAR_TOTAL_FN RETURN NUMBER;
    
    FUNCTION FIDE_PRODUCTO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;
    
    FUNCTION FIDE_PRODUCTO_TB_OBTENER_PRECIO_FN(P_PRODUCTO_ID NUMBER) RETURN DECIMAL;
    
    FUNCTION FIDE_PRODUCTO_TB_CONTAR_POR_CATEGORIA_FN(P_CATEGORIA_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_PRODUCTO_TB_OBTENER_DESCRIPCION_FN(P_PRODUCTO_ID NUMBER) RETURN VARCHAR2;

    FUNCTION FIDE_INVENTARIO_TB_VERIFICAR_STOCK_FN(P_PRODUCTO_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_INVENTARIO_TB_DIAS_PARA_VENCER_FN(P_INVENTARIO_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_INVENTARIO_TB_VERIFICAR_ACTIVO_FN(P_PRODUCTO_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_INVENTARIO_TB_CALCULAR_VALOR_TOTAL_FN(P_PRODUCTO_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_INVENTARIO_TOTAL_PRODUCTOS_FN RETURN NUMBER;

    FUNCTION FIDE_TIPO_CURSO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;
    
    FUNCTION FIDE_TIPO_CURSO_TB_OBTENER_NOMBRE_FN(P_TIPO_CURSO_ID NUMBER) RETURN VARCHAR2;
    
    FUNCTION FIDE_TIPO_CURSO_TB_CONTAR_FN RETURN NUMBER;
    
    FUNCTION FIDE_TIPO_CURSO_TB_OBTENER_ID_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;

    FUNCTION FIDE_CURSO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;
    
    FUNCTION FIDE_CURSO_TB_OBTENER_ID_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;

    FUNCTION FIDE_SERVICIO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;
    
    FUNCTION FIDE_SERVICIO_TB_OBTENER_DESCRIPCION_FN(P_SERVICIO_ID NUMBER) RETURN VARCHAR2;
    
    FUNCTION FIDE_SERVICIO_TB_CONTAR_FN RETURN NUMBER;
    
    FUNCTION FIDE_SERVICIO_TB_OBTENER_NOMBRE_FN(P_SERVICIO_ID NUMBER) RETURN VARCHAR2;
    
    FUNCTION FIDE_EVENTO_TB_EXISTE_FN(P_EVENTO_ID NUMBER) RETURN NUMBER;
    
/*********************** FUNCIONES PARA LA TABLA METODO_PAGO **********************/
    FUNCTION FIDE_METODO_PAGO_TB_EXISTE_FN(P_METODO_PAGO_ID NUMBER) RETURN NUMBER;

    FUNCTION FIDE_METODO_PAGO_TB_NOMBRE_FN(P_METODO_PAGO_ID NUMBER) RETURN VARCHAR2;

    FUNCTION FIDE_METODO_PAGO_TB_ASOCIADO_COMPRA_FN(P_METODO_PAGO_ID NUMBER) RETURN NUMBER;

    FUNCTION FIDE_METODO_PAGO_TB_TOTAL_FN RETURN NUMBER;

    /*********************** FUNCIONES PARA LA TABLA DESCUENTOS **********************/
    FUNCTION FIDE_DESCUENTO_TB_PORCENTAJE_FN(P_DESCUENTO_ID NUMBER) RETURN NUMBER;

    FUNCTION FIDE_DESCUENTO_TB_NOMBRE_Y_PORCENTAJE_FN(P_DESCUENTO_ID NUMBER) RETURN VARCHAR2;

    FUNCTION FIDE_DESCUENTO_TB_VALOR_DESCUENTO_FN(P_DESCUENTO_ID NUMBER,P_PRECIO_ORIGINAL NUMBER) RETURN NUMBER;

    FUNCTION FIDE_DESCUENTO_TB_TOTAL_FN RETURN NUMBER;

/*********************** FUNCIONES PARA LA TABLA COMPRA **********************/
    FUNCTION FIDE_TIPO_COMPRA_OBTENER_DETALLE_FN(p_tipo_compra_id IN NUMBER) RETURN VARCHAR2;

    FUNCTION FIDE_TIPO_COMPRA_CONTAR_TIPO_COMPRA_FN(p_categoria IN VARCHAR2) RETURN NUMBER;

    FUNCTION FIDE_TIPO_COMPRA_EXISTE_FN(p_tipo_compra_id IN NUMBER) RETURN BOOLEAN;

/*********************** FUNCIONES PARA EL DETALLE DE FACTURA **********************/
    FUNCTION FIDE_DETALLE_FACTURA_CALCULAR_TOTAL_FN(p_detalle_factura_id IN NUMBER) RETURN NUMBER;

    FUNCTION FIDE_DETALLE_FACTURA_OBTENER_FN(p_detalle_factura_id IN NUMBER) RETURN VARCHAR2;

/*********************** FUNCIONES PARA LA TABLA FACTURA **********************/
    FUNCTION FIDE_FACTURA_CALCULAR_TOTAL_FN(FACTURA_ID_IN NUMBER) RETURN NUMBER;

    FUNCTION FIDE_FACTURA_OBTENER_IVA_FN(FACTURA_ID_IN NUMBER) RETURN NUMBER;

    FUNCTION FIDE_FACTURA_RESUMEN_FACTURACION_FN(USUARIO_ID_IN NUMBER) RETURN VARCHAR2;

END FIDE_FUNCIONES_PKG;

/**************************************************
**************************************************/

--BODY DEL PAQUETE DE FUNCIONES

CREATE OR REPLACE PACKAGE BODY FIDE_FUNCIONES_PKG AS

 /*********************** FUNCIONES PARA PROVINCIA **********************/

---SELECCIONAR PROVINCIAS POR ID
FUNCTION FIDE_PROVINCIA_TB_BUSCAR_NOMBRE_X_PROVINCIA_ID_FN(P_PROVINCIA_ID NUMBER)
RETURN VARCHAR2 IS 
    V_NOMBRE VARCHAR2(100);
BEGIN
SELECT NOMBRE INTO V_NOMBRE
FROM AdminDB.FIDE_PROVINCIA_TB
WHERE PROVINCIA_ID= P_PROVINCIA_ID;
RETURN V_NOMBRE;
END FIDE_PROVINCIA_TB_BUSCAR_NOMBRE_X_PROVINCIA_ID_FN; 

SELECT FIDE_PROVINCIA_TB_BUSCAR_NOMBRE_X_PROVINCIA_ID_FN(1) AS Provincia FROM DUAL;

--SELECCIONAR PROVINCIAS POR NOMBRE 
FUNCTION FIDE_PROVINCIA_TB_BUSCAR_PROVINCIA_X_NOMBRE_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS 
    V_PROVINCIA_ID NUMBER;
BEGIN
SELECT PROVINCIA_ID INTO V_PROVINCIA_ID
FROM AdminDB.FIDE_PROVINCIA_TB
WHERE NOMBRE= P_NOMBRE;
RETURN V_PROVINCIA_ID;
END FIDE_PROVINCIA_TB_BUSCAR_PROVINCIA_X_NOMBRE_FN; 

SELECT FIDE_PROVINCIA_TB_BUSCAR_PROVINCIA_X_NOMBRE_FN('Alajuela') AS Provincia FROM DUAL;
/
SELECT * FROM AdminDB.FIDE_PROVINCIA_TB;
/
---ENLISTAR TODAS LAS PROVINCIAS DE LA TABLA 
FUNCTION FIDE_PROVINCIA_TB_LISTA_PROVINICAS_FN
RETURN SYS.ODCIVARCHAR2LIST IS
    V_PROVINCIAS SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    FOR R IN (SELECT NOMBRE FROM AdminDB.FIDE_PROVINCIA_TB) LOOP
        V_PROVINCIAS.EXTEND;
        V_PROVINCIAS(V_PROVINCIAS.COUNT) := R.NOMBRE;
    END LOOP;

    RETURN V_PROVINCIAS;
EXCEPTION
    WHEN OTHERS THEN
        -- Retornar una lista vacía en caso de error
        RETURN SYS.ODCIVARCHAR2LIST();
END FIDE_PROVINCIA_TB_LISTA_PROVINICAS_FN;
/
SELECT COLUMN_VALUE AS PROVINCIA
FROM TABLE(FIDE_PROVINCIA_TB_LISTA_PROVINICAS_FN());

/*********************** FUNCIONES PARA CANTON **********************/

--SELECCIONAR CANTON POR ID 
FUNCTION FIDE_CANTON_TB_NOMBRE_CANTON_FN(P_CANTON_ID NUMBER)
RETURN VARCHAR2 IS 
    V_NOMBRE VARCHAR2(100);
BEGIN
SELECT NOMBRE INTO V_NOMBRE
FROM AdminDB.FIDE_CANTON_TB
WHERE CANTON_ID= P_CANTON_ID;
RETURN V_NOMBRE;
END FIDE_CANTON_TB_NOMBRE_CANTON_FN; 
/
SELECT FIDE_CANTON_TB_NOMBRE_CANTON_FN(1) AS CANTON FROM DUAL;
SELECT * FROM AdminDB.FIDE_CANTON_TB;

--SELECCIONAR CANTON POR NOMBRE
FUNCTION FIDE_CANTON_TB_BUSCAR_NOMBRE_CANTON_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS 
    V_CANTON_ID NUMBER;
BEGIN
SELECT CANTON_ID INTO V_CANTON_ID
FROM AdminDB.FIDE_CANTON_TB
WHERE NOMBRE= P_NOMBRE;
RETURN V_CANTON_ID;
END FIDE_CANTON_TB_BUSCAR_NOMBRE_CANTON_FN; 
/
SELECT FIDE_CANTON_TB_BUSCAR_NOMBRE_CANTON_FN('Central') AS CANTON FROM DUAL;
/

---ENLISTAR TODAS LOS CANTONES DE LA TABLA 
FUNCTION FIDE_CANTON_TB_LISTA_CANTONES_FN
RETURN SYS.ODCIVARCHAR2LIST IS
    V_CANTONES SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    FOR R IN (SELECT NOMBRE FROM AdminDB.FIDE_CANTON_TB) LOOP
        V_CANTONES.EXTEND;
        V_CANTONES(V_CANTONES.COUNT) := R.NOMBRE;
    END LOOP;

    RETURN V_CANTONES;
EXCEPTION
    WHEN OTHERS THEN
        -- Retornar una lista vacía en caso de error
        RETURN SYS.ODCIVARCHAR2LIST();
END FIDE_CANTON_TB_LISTA_CANTONES_FN;
/
SELECT COLUMN_VALUE AS CANTON
FROM TABLE(FIDE_CANTON_TB_LISTA_CANTONES_FN());

/*********************** FUNCIONES PARA DISTRITO **********************/

---SELECCIONAR DISTRITO POR ID
FUNCTION FIDE_DISTRITO_TB_BUSCAR_NOMBRE_X_DISTRITO_ID_FN(P_DISTRITO_ID NUMBER)
RETURN VARCHAR2 IS 
    V_NOMBRE VARCHAR2(100);
BEGIN
SELECT NOMBRE INTO V_NOMBRE
FROM AdminDB.FIDE_DISTRITO_TB
WHERE DISTRITO_ID= P_DISTRITO_ID;
RETURN V_NOMBRE;
END FIDE_DISTRITO_TB_BUSCAR_NOMBRE_X_DISTRITO_ID_FN; 

SELECT FIDE_DISTRITO_TB_BUSCAR_NOMBRE_X_DISTRITO_ID_FN(1) AS DISTRITO FROM DUAL;
/
--SELECCIONAR DISTRITO POR NOMBRE 
FUNCTION FIDE_DISTRITO_TB_BUSCAR_DISTRITO_X_NOMBRE_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS 
    V_DISTRITO_ID NUMBER;
BEGIN
SELECT DISTRITO_ID INTO V_DISTRITO_ID
FROM AdminDB.FIDE_DISTRITO_TB
WHERE NOMBRE= P_NOMBRE;
RETURN V_DISTRITO_ID;
END FIDE_DISTRITO_TB_BUSCAR_DISTRITO_X_NOMBRE_FN; 

SELECT FIDE_DISTRITO_TB_BUSCAR_DISTRITO_X_NOMBRE_FN('La Uruca') AS DISTRITO FROM DUAL;
/
SELECT * FROM AdminDB.FIDE_PROVINCIA_TB;
/
---ENLISTAR TODAS LOS DISTRITOS DE LA TABLA 
FUNCTION FIDE_DISTRITO_TB_LISTA_DISTRITOS_FN
RETURN SYS.ODCIVARCHAR2LIST IS
    V_DISTRITOS SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    FOR R IN (SELECT NOMBRE FROM AdminDB.FIDE_DISTRITO_TB) LOOP
        V_DISTRITOS.EXTEND;
        V_DISTRITOS(V_DISTRITOS.COUNT) := R.NOMBRE;
    END LOOP;

    RETURN V_DISTRITOS;
EXCEPTION
    WHEN OTHERS THEN
        -- Retornar una lista vacía en caso de error
        RETURN SYS.ODCIVARCHAR2LIST();
END FIDE_DISTRITO_TB_LISTA_DISTRITOS_FN;
/
SELECT COLUMN_VALUE AS DISTRITO
FROM TABLE(FIDE_DISTRITO_TB_LISTA_DISTRITOS_FN());

/*********************** FUNCIONES PARA LA TABLA DIRECCIONES **********************/
---CONTAR DIRECCIONES POR PROVINCIA 
--SE CREA OBJETO
CREATE OR REPLACE TYPE PROVINCIA_RESULTADO AS OBJECT (
    NOMBRE_PROVINCIA VARCHAR2(100),
    TOTAL_DIRECCIONES NUMBER
);
/
FUNCTION FIDE_DIRECCION_TB_CONTAR_POR_PROVINCIA_FN(P_PROVINCIA_ID NUMBER)
RETURN PROVINCIA_RESULTADO IS
    V_NOMBRE_PROVINCIA VARCHAR2(100);
    V_TOTAL NUMBER;
BEGIN
    -- Obtener el nombre de la provincia
    SELECT NOMBRE
    INTO V_NOMBRE_PROVINCIA
    FROM AdminDB.FIDE_PROVINCIA_TB
    WHERE PROVINCIA_ID = P_PROVINCIA_ID;
    
    -- Contar direcciones
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_DIRECCION_TB
    WHERE PROVINCIA_ID = P_PROVINCIA_ID;
    
    -- Devolver el objeto
    RETURN PROVINCIA_RESULTADO(V_NOMBRE_PROVINCIA, V_TOTAL);
END FIDE_DIRECCION_TB_CONTAR_POR_PROVINCIA_FN;
/
SELECT 
    FIDE_DIRECCION_TB_CONTAR_POR_PROVINCIA_FN(1).NOMBRE_PROVINCIA AS NOMBRE_PROVINCIA,
    FIDE_DIRECCION_TB_CONTAR_POR_PROVINCIA_FN(1).TOTAL_DIRECCIONES AS TOTAL_DIRECCIONES
FROM DUAL;

---VALIDAR LA DIRECCION POR IDS 
FUNCTION FIDE_DIRECCION_TB_VALIDAR_FN(
    P_PROVINCIA_ID NUMBER,
    P_CANTON_ID NUMBER,
    P_DISTRITO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_DIRECCION_TB
    WHERE PROVINCIA_ID = P_PROVINCIA_ID
      AND CANTON_ID = P_CANTON_ID
      AND DISTRITO_ID = P_DISTRITO_ID;

    -- Retornar 1 si existe, 0 si no existe
    RETURN CASE WHEN V_EXISTE > 0 THEN 1 ELSE 0 END;
END FIDE_DIRECCION_TB_VALIDAR_FN;
/
SELECT FIDE_DIRECCION_TB_VALIDAR_FN(1, 1, 1) AS DIRECCION_EXISTE FROM DUAL;


---OBTENER DETALLE DE DIRECCIONES
FUNCTION FIDE_DIRECCION_TB_OBTENER_DETALLES_FN(
    P_DIRECCION_ID NUMBER
) RETURN VARCHAR2 IS
    V_DETALLES VARCHAR2(400);
BEGIN
    SELECT CONCAT(CONCAT(CONCAT(P.NOMBRE, ', '), C.NOMBRE), CONCAT(', ', CONCAT(D.NOMBRE, ': ')))
           || SENAS
    INTO V_DETALLES
    FROM AdminDB.FIDE_DIRECCION_TB DIR
    JOIN AdminDB.FIDE_PROVINCIA_TB P ON DIR.PROVINCIA_ID = P.PROVINCIA_ID
    JOIN AdminDB.FIDE_CANTON_TB C ON DIR.CANTON_ID = C.CANTON_ID
    JOIN AdminDB.FIDE_DISTRITO_TB D ON DIR.DISTRITO_ID = D.DISTRITO_ID
    WHERE DIR.DIRECCION_ID = P_DIRECCION_ID;

    RETURN V_DETALLES;
END FIDE_DIRECCION_TB_OBTENER_DETALLES_FN;
/
SELECT FIDE_DIRECCION_TB_OBTENER_DETALLES_FN(1) AS DETALLES FROM DUAL;

-------CONCATENAR DIRECCION 
FUNCTION FIDE_DIRECCION_TB_FORMATO_FN(
    P_DIRECCION_ID NUMBER
) RETURN VARCHAR2 IS
    V_FORMATO VARCHAR2(400);
BEGIN
    SELECT P.NOMBRE || ', ' || C.NOMBRE || ', ' || D.NOMBRE || ' - ' || DIR.SENAS
    INTO V_FORMATO
    FROM AdminDB.FIDE_DIRECCION_TB DIR
    JOIN AdminDB.FIDE_PROVINCIA_TB P ON DIR.PROVINCIA_ID = P.PROVINCIA_ID
    JOIN AdminDB.FIDE_CANTON_TB C ON DIR.CANTON_ID = C.CANTON_ID
    JOIN AdminDB.FIDE_DISTRITO_TB D ON DIR.DISTRITO_ID = D.DISTRITO_ID
    WHERE DIR.DIRECCION_ID = P_DIRECCION_ID;

    RETURN V_FORMATO;
END FIDE_DIRECCION_TB_FORMATO_FN;
/ 
SELECT FIDE_DIRECCION_TB_FORMATO_FN(1) AS DIRECCION_EXACTA FROM DUAL;
/

/*********************** FUNCIONES PARA LA TABLA ESTADOS **********************/
---OBTENER NOMBRE DE ESTADO POR ID 
FUNCTION FIDE_ESTADO_TB_OBTENER_NOMBRE_FN(P_ESTADO_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE_ESTADO VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE_ESTADO
    FROM AdminDB.FIDE_ESTADO_TB
    WHERE ESTADO_ID = P_ESTADO_ID;

    RETURN V_NOMBRE_ESTADO;
END FIDE_ESTADO_TB_OBTENER_NOMBRE_FN;
/
SELECT FIDE_ESTADO_TB_OBTENER_NOMBRE_FN(1) AS ESTADO_NOMBRE FROM DUAL;
/
-----------VALIDA SI ESTA ACTIVO 
FUNCTION FIDE_ESTADO_TB_VALIDAR_ACTIVO_FN(
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
BEGIN
    IF P_ESTADO_ID = 1 THEN
        RETURN 1;  -- Retorna 1 si el estado es "Activo"
    ELSE
        RETURN 0;  -- Retorna 0 si el estado no es "Activo"
    END IF;
END FIDE_ESTADO_TB_VALIDAR_ACTIVO_FN;
/

SELECT FIDE_ESTADO_TB_VALIDAR_ACTIVO_FN(1) AS ES_ACTIVO FROM DUAL;
/
--------------CONTAR REGISTROS POR ESTADO
FUNCTION FIDE_ESTADO_TB_CONTAR_POR_ESTADO_FN(P_ESTADO_ID NUMBER) 
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_ESTADO_TB
    WHERE ESTADO_ID = P_ESTADO_ID;

    RETURN V_TOTAL;
END FIDE_ESTADO_TB_CONTAR_POR_ESTADO_FN;
/
SELECT FIDE_ESTADO_TB_CONTAR_POR_ESTADO_FN(1) AS TOTAL_ACTIVOS FROM DUAL;
/
-----------DEVUELVE ESTADO INVERSO 
FUNCTION FIDE_ESTADO_TB_OBTENER_ESTADO_INVERSO_FN(
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
    V_ESTADO_INVERSO NUMBER;
BEGIN
    IF P_ESTADO_ID = 1 THEN
        V_ESTADO_INVERSO := 2; -- Si es Activo, retorna Inactivo
    ELSE
        V_ESTADO_INVERSO := 1; -- Si es Inactivo, retorna Activo
    END IF;

    RETURN V_ESTADO_INVERSO;
END FIDE_ESTADO_TB_OBTENER_ESTADO_INVERSO_FN;
/
SELECT FIDE_ESTADO_TB_OBTENER_ESTADO_INVERSO_FN(1) AS ESTADO_INVERSO FROM DUAL;

/*********************** FUNCIONES PARA LA TABLA ROL **********************/
---VALIDA SI EL ROL ES ADMIN
FUNCTION FIDE_ROL_TB_VALIDAR_ADMIN_FN(P_ROL_ID NUMBER) 
RETURN NUMBER IS
BEGIN
    IF P_ROL_ID = 1 THEN
        RETURN 1;  -- Retorna 1 si el rol es "Administrador"
    ELSE
        RETURN 0;  -- Retorna 0 si no es "Administrador"
    END IF;
END FIDE_ROL_TB_VALIDAR_ADMIN_FN;
/
SELECT FIDE_ROL_TB_VALIDAR_ADMIN_FN(1) AS ROL_ADMIN FROM DUAL;
/
----------VALIDA SI ES USUARIO 
FUNCTION FIDE_ROL_TB_VALIDAR_USUARIO_FN(
    P_ROL_ID NUMBER
) RETURN NUMBER IS
BEGIN
    IF P_ROL_ID = 2 THEN
        RETURN 1;  -- Retorna 1 si el rol es "Usuario"
    ELSE
        RETURN 0;  -- Retorna 0 si no es "Usuario"
    END IF;
END FIDE_ROL_TB_VALIDAR_USUARIO_FN;
/
SELECT FIDE_ROL_TB_VALIDAR_USUARIO_FN(2) AS ROL_USUARIO FROM DUAL;
/

---Obtener nombre de rol 
FUNCTION FIDE_ROL_TB_OBTENER_NOMBRE_FN(P_ROL_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE_ROL VARCHAR2(50);
BEGIN
    IF P_ROL_ID = 1 THEN
        V_NOMBRE_ROL := 'Administrador';
    ELSIF P_ROL_ID = 2 THEN
        V_NOMBRE_ROL := 'Usuario';
    ELSE
        V_NOMBRE_ROL := 'Desconocido';  -- En caso de que no sea 1 ni 2
    END IF;

    RETURN V_NOMBRE_ROL;
END FIDE_ROL_TB_OBTENER_NOMBRE_FN;
/
SELECT FIDE_ROL_TB_OBTENER_NOMBRE_FN(1) AS NOMBRE_ROL FROM DUAL;
/

/*********************** FUNCIONES PARA LA TABLA USUARIOS **********************/

-----VERIFICA SI UN USUARIO ESTÁ ACTIVO
FUNCTION FIDE_USUARIO_TB_VERIFICAR_ACTIVO_FN(P_USUARIO_ID NUMBER) 
RETURN NUMBER IS
    V_ESTADO_ID NUMBER;
BEGIN
    -- Obtener el estado del usuario
    SELECT ESTADO_ID
    INTO V_ESTADO_ID
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    -- Verificar si el usuario está activo (ESTADO_ID = 1)
    IF V_ESTADO_ID = 1 THEN
        RETURN 1;  -- Usuario activo
    ELSE
        RETURN 0;  -- Usuario inactivo
    END IF;
END FIDE_USUARIO_TB_VERIFICAR_ACTIVO_FN;
/

SELECT FIDE_USUARIO_TB_VERIFICAR_ACTIVO_FN(1) AS ESTA_ACTIVO FROM DUAL;


-----CONTAR CANTIDAD DE USUARIOS ACTIVOS 
FUNCTION FIDE_USUARIO_TB_CONTAR_ACTIVOS_FN 
RETURN NUMBER IS
    V_CANTIDAD_ACTIVOS NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD_ACTIVOS
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE ESTADO_ID = 1;  -- Solo cuenta los usuarios activos

    RETURN V_CANTIDAD_ACTIVOS;
END FIDE_USUARIO_TB_CONTAR_ACTIVOS_FN;
/
SELECT FIDE_USUARIO_TB_CONTAR_ACTIVOS_FN FROM DUAL;  -- Devuelve el número de usuarios activos

----VALIDA EL ROL DEL USUARIO
FUNCTION FIDE_USUARIO_TB_VERIFICAR_ROL_FN(P_USUARIO_ID NUMBER, P_ROL_ID NUMBER) 
RETURN NUMBER IS
    V_ROL_ID NUMBER;
BEGIN
    -- Verifica si el usuario tiene el rol
    SELECT ROL_ID 
    INTO V_ROL_ID
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    IF V_ROL_ID = P_ROL_ID THEN
        RETURN 1;  -- El usuario tiene el rol especificado (TRUE)
    ELSE
        RETURN 0;  -- El usuario no tiene el rol especificado (FALSE)
    END IF;
END FIDE_USUARIO_TB_VERIFICAR_ROL_FN;
/
SELECT FIDE_USUARIO_TB_VERIFICAR_ROL_FN(1, 1) AS ADMINISTRADORES FROM DUAL; 
/
-----OBTENER EL NOMBRE COMPLETO DEL USUARIO 
FUNCTION FIDE_USUARIO_TB_OBTENER_NOMBRE_COMPLETO_FN(
    P_USUARIO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE_COMPLETO VARCHAR2(200);
BEGIN
    SELECT NOMBRE || ' ' || APELLIDO
    INTO V_NOMBRE_COMPLETO
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    RETURN V_NOMBRE_COMPLETO;
END FIDE_USUARIO_TB_OBTENER_NOMBRE_COMPLETO_FN;
/
SELECT FIDE_USUARIO_TB_OBTENER_NOMBRE_COMPLETO_FN(1) AS NOMBRE_COMPLETO FROM DUAL;  -- Devuelve el nombre completo del usuario con ID 1

/*********************** FUNCIONES PARA LA TABLA CATEGORIA **********************/

----VERIFICA SI CATEGORIA EXISTE POR NOMBRE 
FUNCTION FIDE_CATEGORIA_TB_EXISTE_FN(P_NOMBRE VARCHAR2) 
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_CATEGORIA_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- La categoría existe
    ELSE
        RETURN 0; -- La categoría no existe
    END IF;
END FIDE_CATEGORIA_TB_EXISTE_FN;
/
SELECT FIDE_CATEGORIA_TB_EXISTE_FN('Botanica') AS CATEGORIA_EXISTE FROM DUAL;
/
----OBTENER CATEGORIA POR ID 
FUNCTION FIDE_CATEGORIA_TB_OBTENER_NOMBRE_FN(P_CATEGORIA_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_CATEGORIA_TB
    WHERE CATEGORIA_ID = P_CATEGORIA_ID;

    RETURN V_NOMBRE;
END FIDE_CATEGORIA_TB_OBTENER_NOMBRE_FN;
/
SELECT FIDE_CATEGORIA_TB_OBTENER_NOMBRE_FN(5) AS NOMBRE_CATEGORIA FROM DUAL;
/
SELECT * FROM AdminDB.FIDE_CATEGORIA_TB;
/
---CONTAR TOTAL DE CATEGORIAS 
FUNCTION FIDE_CATEGORIA_TB_CONTAR_TOTAL_FN 
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_CATEGORIA_TB;

    RETURN V_TOTAL;
END FIDE_CATEGORIA_TB_CONTAR_TOTAL_FN;
/
SELECT FIDE_CATEGORIA_TB_CONTAR_TOTAL_FN() AS TOTAL_CATEGORIAS FROM DUAL;
/

/*********************** FUNCIONES PARA PRODUCTOS **********************/
FUNCTION FIDE_PRODUCTO_TB_EXISTE_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- El producto existe
    ELSE
        RETURN 0; -- El producto no existe
    END IF;
END FIDE_PRODUCTO_TB_EXISTE_FN;
/
----OBTENER PRECIO DE UN PRODUCTO X ID 
FUNCTION FIDE_PRODUCTO_TB_OBTENER_PRECIO_FN(P_PRODUCTO_ID NUMBER)
RETURN DECIMAL IS
    V_PRECIO DECIMAL(10, 2);
BEGIN
    SELECT PRECIO_UNIT
    INTO V_PRECIO
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    RETURN V_PRECIO;
END FIDE_PRODUCTO_TB_OBTENER_PRECIO_FN;
/
SELECT FIDE_PRODUCTO_TB_OBTENER_PRECIO_FN(1) AS PRECIO FROM DUAL;
/
---CONTAR PRODUCTOS POR CATEGORÍA 
FUNCTION FIDE_PRODUCTO_TB_CONTAR_POR_CATEGORIA_FN(P_CATEGORIA_ID NUMBER)
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE CATEGORIA_ID = P_CATEGORIA_ID;

    RETURN V_COUNT;
END FIDE_PRODUCTO_TB_CONTAR_POR_CATEGORIA_FN;
/
SELECT FIDE_PRODUCTO_TB_CONTAR_POR_CATEGORIA_FN(5) AS TOTAL_PRODUCTOS FROM DUAL;
/
SELECT * FROM AdminDB.FIDE_CATEGORIA_TB;
/
---OBTENER DESCRIPCION DEL PRODUCTO 
FUNCTION FIDE_PRODUCTO_TB_OBTENER_DESCRIPCION_FN(P_PRODUCTO_ID NUMBER)
RETURN VARCHAR2 IS
    V_DESCRIPCION VARCHAR2(250);
BEGIN
    SELECT DESCRIPCION
    INTO V_DESCRIPCION
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    RETURN V_DESCRIPCION;
END FIDE_PRODUCTO_TB_OBTENER_DESCRIPCION_FN;
/
SELECT FIDE_PRODUCTO_TB_OBTENER_DESCRIPCION_FN(1) AS DESCRIPCION FROM DUAL;
/

/*********************** FUNCIONES PARA LA TABLA INVENTARIO **********************/

SELECT * FROM AdminDB.FIDE_INVENTARIO_TB;
/
---VERIFICA SI UN PRODUCTO ESTA EN STOCK 
FUNCTION FIDE_INVENTARIO_TB_VERIFICAR_STOCK_FN(
    P_PRODUCTO_ID NUMBER
) RETURN NUMBER IS
    V_STOCK NUMBER;
BEGIN
    SELECT STOCK 
    INTO V_STOCK
    FROM AdminDB.FIDE_INVENTARIO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    IF V_STOCK > 0 THEN
        RETURN 1; -- Hay stock disponible
    ELSE
        RETURN 0; -- No hay stock
    END IF;
END FIDE_INVENTARIO_TB_VERIFICAR_STOCK_FN;
/
SELECT FIDE_INVENTARIO_TB_VERIFICAR_STOCK_FN(2) AS TIENE_STOCK FROM DUAL;
/

---CALCULAR DIAS DE VIDA DEL PRODUCTO
FUNCTION FIDE_INVENTARIO_TB_DIAS_PARA_VENCER_FN(
    P_INVENTARIO_ID NUMBER
) RETURN NUMBER IS
    V_DIAS_RESTANTES NUMBER;
BEGIN
    SELECT TRUNC(FECHA_VENCIMIENTO - SYSDATE)
    INTO V_DIAS_RESTANTES
    FROM AdminDB.FIDE_INVENTARIO_TB
    WHERE INVENTARIO_ID = P_INVENTARIO_ID;

    RETURN V_DIAS_RESTANTES;
END FIDE_INVENTARIO_TB_DIAS_PARA_VENCER_FN;
/
SELECT FIDE_INVENTARIO_TB_DIAS_PARA_VENCER_FN(2) AS DIAS_PARA_VENCER FROM DUAL;
/

---VERIFICA SI EL PRODUCTO ESTA ACTIVO EN EL INVENTARIO
FUNCTION FIDE_INVENTARIO_TB_VERIFICAR_ACTIVO_FN(
    P_PRODUCTO_ID NUMBER
) RETURN NUMBER IS
    V_ESTADO_ID NUMBER;
BEGIN
    SELECT ESTADO_ID
    INTO V_ESTADO_ID
    FROM AdminDB.FIDE_INVENTARIO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    IF V_ESTADO_ID = 1 THEN
        RETURN 1; -- Producto activo
    ELSE
        RETURN 0; -- Producto inactivo
    END IF;
END FIDE_INVENTARIO_TB_VERIFICAR_ACTIVO_FN;
/
SELECT FIDE_INVENTARIO_TB_VERIFICAR_ACTIVO_FN(2) AS ES_ACTIVO FROM DUAL;
/

---CLACULA VALOR TOTAL DEL PRODUCTO EN EL INVENTARIO 
FUNCTION FIDE_INVENTARIO_TB_CALCULAR_VALOR_TOTAL_FN(
    P_PRODUCTO_ID NUMBER
) RETURN NUMBER IS
    V_VALOR_TOTAL NUMBER;
BEGIN
    SELECT STOCK * PRECIO_UNIT
    INTO V_VALOR_TOTAL
    FROM AdminDB.FIDE_INVENTARIO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    RETURN V_VALOR_TOTAL;
END FIDE_INVENTARIO_TB_CALCULAR_VALOR_TOTAL_FN;
/
SELECT FIDE_INVENTARIO_TB_CALCULAR_VALOR_TOTAL_FN(2) AS VALOR_TOTAL FROM DUAL;
/

FUNCTION FIDE_INVENTARIO_TOTAL_PRODUCTOS_FN RETURN NUMBER IS
        v_total NUMBER;
    BEGIN
        SELECT SUM(STOCK) INTO v_total FROM FIDE_INVENTARIO_TB;
        RETURN v_total;
    END FIDE_INVENTARIO_TOTAL_PRODUCTOS_FN;


/*********************** FUNCIONES PARA LA TABLA TIPO_CURSO **********************/

---VERIFICA SI EL TIPO DE CURSO EXISTE 
FUNCTION FIDE_TIPO_CURSO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) 
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_TIPO_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- El curso existe
    ELSE
        RETURN 0; -- El curso no existe
    END IF;
END FIDE_TIPO_CURSO_TB_EXISTE_FN;
/
SELECT FIDE_TIPO_CURSO_TB_EXISTE_FN('Botanica Avanzada') AS CURSO_EXISTE FROM DUAL;
/

---OBTENER NOMBRE DEL CURSO POR ID 
FUNCTION FIDE_TIPO_CURSO_TB_OBTENER_NOMBRE_FN(P_TIPO_CURSO_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_TIPO_CURSO_TB
    WHERE TIPO_CURSO_ID = P_TIPO_CURSO_ID;

    RETURN V_NOMBRE;
END FIDE_TIPO_CURSO_TB_OBTENER_NOMBRE_FN;
/
SELECT FIDE_TIPO_CURSO_TB_OBTENER_NOMBRE_FN(1) AS NOMBRE_CURSO FROM DUAL;
/

-----CONTAR LOS CURSOS REGISTRADOS 
FUNCTION FIDE_TIPO_CURSO_TB_CONTAR_FN
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_TIPO_CURSO_TB;

    RETURN V_COUNT;
END FIDE_TIPO_CURSO_TB_CONTAR_FN;
/
SELECT FIDE_TIPO_CURSO_TB_CONTAR_FN() AS TOTAL_CURSOS FROM DUAL;
/
------- OBTENER ID DE CURSO POR NOMBRE 
FUNCTION FIDE_TIPO_CURSO_TB_OBTENER_ID_FN(
    P_NOMBRE VARCHAR2
) RETURN NUMBER IS
    V_TIPO_CURSO_ID NUMBER;
BEGIN
    SELECT TIPO_CURSO_ID
    INTO V_TIPO_CURSO_ID
    FROM AdminDB.FIDE_TIPO_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    RETURN V_TIPO_CURSO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- El curso no existe
END FIDE_TIPO_CURSO_TB_OBTENER_ID_FN;
/
SELECT FIDE_TIPO_CURSO_TB_OBTENER_ID_FN('Decoracion Navideña') AS CURSO_ID FROM DUAL;
/

/*********************** FUNCIONES PARA LA TABLA CURSO **********************/

----VERIFICA SI EXISTE POR NOMBRE 
FUNCTION FIDE_CURSO_TB_EXISTE_FN(
    P_NOMBRE VARCHAR2
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- El curso existe
    ELSE
        RETURN 0; -- El curso no existe
    END IF;
END FIDE_CURSO_TB_EXISTE_FN;
/
SELECT FIDE_CURSO_TB_EXISTE_FN('Curso de Botánica') AS CURSO_EXISTE FROM DUAL;
/
SELECT * FROM AdminDB.FIDE_CURSO_TB;

---------OBTENER ID DE CURSO 
FUNCTION FIDE_CURSO_TB_OBTENER_ID_FN(P_NOMBRE VARCHAR2) RETURN NUMBER IS
    V_CURSO_ID NUMBER;
BEGIN
    SELECT CURSO_ID
    INTO V_CURSO_ID
    FROM AdminDB.FIDE_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    RETURN V_CURSO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- El curso no existe
END FIDE_CURSO_TB_OBTENER_ID_FN;
/
SELECT FIDE_CURSO_TB_OBTENER_ID_FN('Botanica Avanzada') AS CURSO_ID FROM DUAL;
/
/*********************** FUNCIONES PARA LA TABLA SERVICIO **********************/

-----VERIFICA SI EL SERVICIO EXISTE
FUNCTION FIDE_SERVICIO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) 
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_SERVICIO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    RETURN CASE
        WHEN V_COUNT > 0 THEN 1 -- Existe
        ELSE 0 -- No existe
    END;
END FIDE_SERVICIO_TB_EXISTE_FN;
/
SELECT FIDE_SERVICIO_TB_EXISTE_FN('Presencial') AS EXISTE FROM DUAL;
/
-----OBTENER DESCRIPCION DE SERVICIO POR ID
FUNCTION FIDE_SERVICIO_TB_OBTENER_DESCRIPCION_FN(P_SERVICIO_ID NUMBER) 
RETURN VARCHAR2 IS
    V_DESCRIPCION VARCHAR2(250);
BEGIN
    SELECT DESCRIPCION
    INTO V_DESCRIPCION
    FROM AdminDB.FIDE_SERVICIO_TB
    WHERE SERVICIO_ID = P_SERVICIO_ID;

    RETURN V_DESCRIPCION;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Servicio no encontrado';
END FIDE_SERVICIO_TB_OBTENER_DESCRIPCION_FN;
/
SELECT FIDE_SERVICIO_TB_OBTENER_DESCRIPCION_FN(1) AS DESCRIPCION FROM DUAL;
/

---CONTAR LOS SERVICIOS DE LA TABLA
FUNCTION FIDE_SERVICIO_TB_CONTAR_FN
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_SERVICIO_TB;

    RETURN V_TOTAL;
END FIDE_SERVICIO_TB_CONTAR_FN;
/
SELECT FIDE_SERVICIO_TB_CONTAR_FN() AS TOTAL_SERVICIOS FROM DUAL;
/

---OBTENER NOMBRE DEL SERVICIO POR ID 
FUNCTION FIDE_SERVICIO_TB_OBTENER_NOMBRE_FN(
    P_SERVICIO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_SERVICIO_TB
    WHERE SERVICIO_ID = P_SERVICIO_ID;

    RETURN V_NOMBRE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Servicio no encontrado';
END FIDE_SERVICIO_TB_OBTENER_NOMBRE_FN;
/
SELECT FIDE_SERVICIO_TB_OBTENER_NOMBRE_FN(2) AS NOMBRE FROM DUAL;
/

/*********************** FUNCIONES PARA LA TABLA EVENTO **********************/

----VERIFICA SI EXISTE EL EVENTO
FUNCTION FIDE_EVENTO_TB_EXISTE_FN(
    P_EVENTO_ID NUMBER
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE EVENTO_ID = P_EVENTO_ID;

    RETURN CASE
        WHEN V_COUNT > 0 THEN 1 -- Existe
        ELSE 0 -- No existe
    END;
END FIDE_EVENTO_TB_EXISTE_FN;
/
SELECT FIDE_EVENTO_TB_EXISTE_FN(1) AS EXISTE FROM DUAL;
/

------OBTENER ESTADO DEL EVENTO POR ID 
FUNCTION FIDE_EVENTO_TB_OBTENER_ESTADO_FN(P_EVENTO_ID NUMBER) 
RETURN NUMBER IS
    V_ESTADO_ID NUMBER;
BEGIN
    SELECT ESTADO_ID
    INTO V_ESTADO_ID
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE EVENTO_ID = P_EVENTO_ID;

    RETURN V_ESTADO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- Evento no encontrado
END FIDE_EVENTO_TB_OBTENER_ESTADO_FN;
/
SELECT FIDE_EVENTO_TB_OBTENER_ESTADO_FN(1) AS ESTADO FROM DUAL;
/

---------CONTAR EVENTOS PROGRAMAS EN LA MISMA FECHA 
FUNCTION FIDE_EVENTO_TB_CONTAR_POR_FECHA_FN(
    P_FECHA DATE
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE FECHA = P_FECHA;

    RETURN V_COUNT;
END FIDE_EVENTO_TB_CONTAR_POR_FECHA_FN;

/
SELECT FIDE_EVENTO_TB_CONTAR_POR_FECHA_FN(TO_DATE('2025-01-20', 'YYYY-MM-DD')) AS EVENTOS FROM DUAL;
/
---FUNCION PARA OBTENER EL SERVICIO DE UN EVENTO
FUNCTION FIDE_EVENTO_TB_OBTENER_SERVICIO_FN(
    P_EVENTO_ID NUMBER
) RETURN NUMBER IS
    V_SERVICIO_ID NUMBER;
BEGIN
    SELECT SERVICIO_ID
    INTO V_SERVICIO_ID
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE EVENTO_ID = P_EVENTO_ID;

    RETURN V_SERVICIO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- Evento no encontrado
END FIDE_EVENTO_TB_OBTENER_SERVICIO_FN;

/
SELECT FIDE_EVENTO_TB_OBTENER_SERVICIO_FN(1) AS SERVICIO FROM DUAL;
/

----OBTENER EVENTOS PROGRAMADOS POR USUARIO
FUNCTION FIDE_EVENTO_TB_CONTAR_POR_USUARIO_FN(
    P_USUARIO_ID NUMBER
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    RETURN V_COUNT;
END FIDE_EVENTO_TB_CONTAR_POR_USUARIO_FN;
/
SELECT FIDE_EVENTO_TB_CONTAR_POR_USUARIO_FN(1) AS EVENTOS_USUARIO FROM DUAL;
/

/*********************** FUNCIONES PARA LA TABLA CITAS **********************/

---OBTENER TOTAL DE CITAS POR ESTADO 
FUNCTION FIDE_CITA_TB_CITAS_POR_ESTADO_FN(
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
    V_CANTIDAD NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD
    FROM AdminDB.FIDE_CITA_TB
    WHERE ESTADO_ID = P_ESTADO_ID;

    RETURN V_CANTIDAD;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_CITA_TB_CITAS_POR_ESTADO_FN;
/
SELECT FIDE_CITA_TB_CITAS_POR_ESTADO_FN(1) FROM DUAL;
/

-------OBTENER LAS CITAS POR USUARIOS
FUNCTION FIDE_CITA_TB_CITAS_POR_USUARIO_FN(
    P_USUARIO_ID NUMBER
) RETURN NUMBER IS
    V_CANTIDAD NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD
    FROM AdminDB.FIDE_CITA_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    RETURN V_CANTIDAD;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_CITA_TB_CITAS_POR_USUARIO_FN;
/
SELECT FIDE_CITA_TB_CITAS_POR_USUARIO_FN(1) AS TOTAL_CITAS FROM DUAL;
/

----VERIFICA SI EL USUARIO TIENE CITAS
FUNCTION FIDE_CITA_TB_TIENES_CITAS_FUTURAS_FN(
    P_USUARIO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_CITA_TB
    WHERE USUARIO_ID = P_USUARIO_ID AND FECHA > SYSDATE;

    IF V_EXISTE > 0 THEN
        RETURN 1; -- Tiene citas futuras
    ELSE
        RETURN 0; -- No tiene citas futuras
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_CITA_TB_TIENES_CITAS_FUTURAS_FN;
/
SELECT FIDE_CITA_TB_TIENES_CITAS_FUTURAS_FN(1) AS CITAS_AGENDADAS FROM DUAL;
/

----VERIFICA EL ESTADO DE LA CITA DE UN SERVICIO 
FUNCTION FIDE_CITA_TB_ESTADO_POR_SERVICIO_FN(
    P_SERVICIO_ID NUMBER,
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
    V_CANTIDAD NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD
    FROM AdminDB.FIDE_CITA_TB
    WHERE SERVICIO_ID = P_SERVICIO_ID AND ESTADO_ID = P_ESTADO_ID;

    RETURN V_CANTIDAD;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_CITA_TB_ESTADO_POR_SERVICIO_FN;
/
SELECT FIDE_CITA_TB_ESTADO_POR_SERVICIO_FN(1, 2) AS ESTADO_DEL_SERVICIO FROM DUAL;
/

/*********************** FUNCIONES PARA LA TABLA METODO_PAGO **********************/

----VERIFICA SI EXISTE METODO DE PAGO POR ID 
FUNCTION FIDE_METODO_PAGO_TB_EXISTE_FN(
    P_METODO_PAGO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_METODO_PAGO_TB
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;

    IF V_EXISTE > 0 THEN
        RETURN 1; -- El método de pago existe
    ELSE
        RETURN 0; -- El método de pago no existe
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_METODO_PAGO_TB_EXISTE_FN;
/
SELECT FIDE_METODO_PAGO_TB_EXISTE_FN(1) AS EXISTE_METODO FROM DUAL;
/

---------OBTENER NOMBRE DE UN METODO DE PAGO 
FUNCTION FIDE_METODO_PAGO_TB_NOMBRE_FN(
    P_METODO_PAGO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_METODO_PAGO_TB
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;

    RETURN V_NOMBRE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Método de pago no encontrado'; -- No se encontró el método
    WHEN OTHERS THEN
        RETURN 'Error inesperado'; -- Error inesperado
END FIDE_METODO_PAGO_TB_NOMBRE_FN;
/
SELECT FIDE_METODO_PAGO_TB_NOMBRE_FN(1) FROM DUAL;
/

-----VERIFICA SI UN METODO ESTA ASOCIADO A UNA COMPRA
FUNCTION FIDE_METODO_PAGO_TB_ASOCIADO_COMPRA_FN(
    P_METODO_PAGO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_COMPRA_TB
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;

    IF V_EXISTE > 0 THEN
        RETURN 1; -- El método de pago está asociado a una compra
    ELSE
        RETURN 0; -- El método de pago no está asociado a ninguna compra
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_METODO_PAGO_TB_ASOCIADO_COMPRA_FN;
/
SELECT FIDE_METODO_PAGO_TB_ASOCIADO_COMPRA_FN(1) FROM DUAL;
/

-----OBTENER TOTAL DE METODOS DE PAGO 
FUNCTION FIDE_METODO_PAGO_TB_TOTAL_FN
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_METODO_PAGO_TB;

    RETURN V_TOTAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_METODO_PAGO_TB_TOTAL_FN;
/
SELECT FIDE_METODO_PAGO_TB_TOTAL_FN FROM DUAL;
/

/*********************** FUNCIONES PARA LA TABLA DESCUENTOS **********************/

----OBTENER EL PORCENTAJE DE DESCUENTO POR ID 
FUNCTION FIDE_DESCUENTO_TB_PORCENTAJE_FN(
    P_DESCUENTO_ID NUMBER
) RETURN NUMBER IS
    V_PORCENTAJE NUMBER;
BEGIN
    SELECT PORCENTAJE
    INTO V_PORCENTAJE
    FROM AdminDB.FIDE_DESCUENTO_TB
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;

    RETURN V_PORCENTAJE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN -1; -- No se encontró el descuento
    WHEN OTHERS THEN
        RETURN -2; -- Error inesperado
END FIDE_DESCUENTO_TB_PORCENTAJE_FN;
/
SELECT FIDE_DESCUENTO_TB_PORCENTAJE_FN(1) AS DESCUENTO FROM DUAL;
/
-------OBTENER NOMBRE Y PORCENTAJE DE DESCUENTO

SELECT * FROM AdminDB.FIDE_DESCUENTO_TB;

FUNCTION FIDE_DESCUENTO_TB_NOMBRE_Y_PORCENTAJE_FN(
    P_DESCUENTO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
    V_PORCENTAJE NUMBER;
BEGIN
    SELECT NOMBRE, PORCENTAJE
    INTO V_NOMBRE, V_PORCENTAJE
    FROM AdminDB.FIDE_DESCUENTO_TB
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;

    RETURN 'Nombre: ' || V_NOMBRE || ', Porcentaje: ' || V_PORCENTAJE || '%';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Descuento no encontrado';
    WHEN OTHERS THEN
        RETURN 'Error inesperado';
END FIDE_DESCUENTO_TB_NOMBRE_Y_PORCENTAJE_FN;
/
SELECT FIDE_DESCUENTO_TB_NOMBRE_Y_PORCENTAJE_FN(1) DESCUENTO FROM DUAL;
/

----CALCULAR EL DESCUENTO SOBRE EL PRECIO 
FUNCTION FIDE_DESCUENTO_TB_VALOR_DESCUENTO_FN(
    P_DESCUENTO_ID NUMBER,
    P_PRECIO_ORIGINAL NUMBER
) RETURN NUMBER IS
    V_PORCENTAJE NUMBER;
    V_DESCUENTO_VALUE NUMBER;
BEGIN
    -- Obtener el porcentaje del descuento
    SELECT PORCENTAJE
    INTO V_PORCENTAJE
    FROM AdminDB.FIDE_DESCUENTO_TB
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;

    -- Calcular el valor del descuento
    V_DESCUENTO_VALUE := P_PRECIO_ORIGINAL * (V_PORCENTAJE / 100);

    RETURN V_DESCUENTO_VALUE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN -1; -- Descuento no encontrado
    WHEN OTHERS THEN
        RETURN -2; -- Error inesperado
END FIDE_DESCUENTO_TB_VALOR_DESCUENTO_FN;
/
SELECT FIDE_DESCUENTO_TB_VALOR_DESCUENTO_FN(1, 1000)AS TOTAL_CON_DESCUENTO FROM DUAL;
/

---- OBTENER TODOS LOS DESCUENTOS DISPONIBLES 
FUNCTION FIDE_DESCUENTO_TB_TOTAL_FN
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_DESCUENTO_TB;

    RETURN V_TOTAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_DESCUENTO_TB_TOTAL_FN;
/
SELECT FIDE_DESCUENTO_TB_TOTAL_FN AS DESCUENTOS_DISPONIBLES FROM DUAL;

/*********************** FUNCIONES PARA LA TABLA COMPRA **********************/

---OBTENER DETALLES DE TIPOS DE COMPRA 
FUNCTION FIDE_TIPO_COMPRA_OBTENER_DETALLE_FN(
    p_tipo_compra_id IN NUMBER
) RETURN VARCHAR2 IS
    v_resultado VARCHAR2(4000);
BEGIN
    SELECT 
        'Producto: ' || p.PRODUCTO_NOMBRE
    INTO v_resultado
    FROM AdminDB.FIDE_TIPO_COMPRA_TB tc
    JOIN AdminDB.FIDE_PRODUCTO_TB p ON tc.PRODUCTO_ID = p.PRODUCTO_ID
    WHERE tc.TIPO_COMPRA_ID = p_tipo_compra_id
    AND tc.PRODUCTO_ID IS NOT NULL;

    RETURN v_resultado;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        BEGIN
            SELECT 
                'Curso: ' || c.NOMBRE
            INTO v_resultado
            FROM AdminDB.FIDE_TIPO_COMPRA_TB tc
            JOIN AdminDB.FIDE_CURSO_TB c ON tc.CURSO_ID = c.CURSO_ID
            WHERE tc.TIPO_COMPRA_ID = p_tipo_compra_id
            AND tc.CURSO_ID IS NOT NULL;

            RETURN v_resultado;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                SELECT 
                    'Servicio: ' || s.NOMBRE
                INTO v_resultado
                FROM AdminDB.FIDE_TIPO_COMPRA_TB tc
                JOIN AdminDB.FIDE_SERVICIO_TB s ON tc.SERVICIO_ID = s.SERVICIO_ID
                WHERE tc.TIPO_COMPRA_ID = p_tipo_compra_id
                AND tc.SERVICIO_ID IS NOT NULL;

                RETURN v_resultado;
        END;
END FIDE_TIPO_COMPRA_OBTENER_DETALLE_FN;
/
SELECT FIDE_TIPO_COMPRA_OBTENER_DETALLE_FN(1) FROM DUAL;
/
----CONTAR NUMEROS DE TIPOS DE COMPRAS 
FUNCTION FIDE_TIPO_COMPRA_CONTAR_TIPO_COMPRA_FN(
    p_categoria IN VARCHAR2
) RETURN NUMBER IS
    v_cuenta NUMBER;
BEGIN
    IF UPPER(p_categoria) = 'PRODUCTO' THEN
        SELECT COUNT(*) INTO v_cuenta
        FROM AdminDB.FIDE_TIPO_COMPRA_TB
        WHERE PRODUCTO_ID IS NOT NULL;

    ELSIF UPPER(p_categoria) = 'CURSO' THEN
        SELECT COUNT(*) INTO v_cuenta
        FROM AdminDB.FIDE_TIPO_COMPRA_TB
        WHERE CURSO_ID IS NOT NULL;

    ELSIF UPPER(p_categoria) = 'SERVICIO' THEN
        SELECT COUNT(*) INTO v_cuenta
        FROM AdminDB.FIDE_TIPO_COMPRA_TB
        WHERE SERVICIO_ID IS NOT NULL;

    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Categoría no válida. Use PRODUCTO, CURSO o SERVICIO.');
    END IF;

    RETURN v_cuenta;
END FIDE_TIPO_COMPRA_CONTAR_TIPO_COMPRA_FN;
/
SELECT FIDE_TIPO_COMPRA_CONTAR_TIPO_COMPRA_FN('Producto') AS TIPO_DE_COMPRA FROM DUAL;
/
----VALIDAR SI EXISTE 
FUNCTION FIDE_TIPO_COMPRA_EXISTE_FN(
    p_tipo_compra_id IN NUMBER
) RETURN BOOLEAN IS
    v_existe NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_existe
    FROM AdminDB.FIDE_TIPO_COMPRA_TB
    WHERE TIPO_COMPRA_ID = p_tipo_compra_id;

    RETURN v_existe > 0;
END FIDE_TIPO_COMPRA_EXISTE_FN;
/
SELECT CASE WHEN FIDE_TIPO_COMPRA_EXISTE_FN(1) THEN 'EXISTE' ELSE 'NO EXISTE' END AS RESULTADO FROM DUAL;
/
/*********************** FUNCIONES PARA EL DETALLE DE FACTURA**********************/
FUNCTION FIDE_DETALLE_FACTURA_CALCULAR_TOTAL_FN(
    p_detalle_factura_id IN NUMBER
) RETURN NUMBER IS
    v_total NUMBER;
BEGIN
    SELECT SUM(CANTIDAD_LINEAS * TOTAL_POR_LINEA)
    INTO v_total
    FROM AdminDB.FIDE_DETALLE_FACTURA_TB
    WHERE DETALLE_FACTURA_ID = p_detalle_factura_id;

    RETURN v_total;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0; -- Retornar 0 si no se encuentra la factura
END FIDE_DETALLE_FACTURA_CALCULAR_TOTAL_FN;
/
SELECT FIDE_DETALLE_FACTURA_CALCULAR_TOTAL_FN(1) FROM DUAL;
/
---obtener detalle de factura 
FUNCTION FIDE_DETALLE_FACTURA_OBTENER_FN(
    p_detalle_factura_id IN NUMBER
) RETURN VARCHAR2 IS
    v_resultado VARCHAR2(4000);
BEGIN
    SELECT LISTAGG('Línea: ' || CANTIDAD_LINEAS || ', Total: ' || TOTAL_POR_LINEA, '; ')
           WITHIN GROUP (ORDER BY DETALLE_FACTURA_ID)
    INTO v_resultado
    FROM AdminDB.FIDE_DETALLE_FACTURA_TB
    WHERE DETALLE_FACTURA_ID = p_detalle_factura_id;

    RETURN v_resultado;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'No se encontraron detalles para la factura especificada.';
END FIDE_DETALLE_FACTURA_OBTENER_FN;
/
SELECT FIDE_DETALLE_FACTURA_OBTENER_FN(1) FROM DUAL;
/

/*********************** FUNCIONES PARA LA TABLA FACTURA **********************/
FUNCTION FIDE_FACTURA_CALCULAR_TOTAL_FN(FACTURA_ID_IN NUMBER)
RETURN NUMBER IS
    monto_total NUMBER;
BEGIN
    SELECT (SUBTOTAL - (SUBTOTAL * (SELECT PORCENTAJE FROM AdminDB.FIDE_DESCUENTO_TB WHERE DESCUENTO_ID = f.DESCUENTO_ID) / 100) + IVA)
    INTO monto_total
    FROM AdminDB.FIDE_FACTURA_TB f
    WHERE FACTURA_ID = FACTURA_ID_IN;

    RETURN monto_total;
END FIDE_FACTURA_CALCULAR_TOTAL_FN;
/
SELECT FIDE_FACTURA_CALCULAR_TOTAL_FN(1) FROM DUAL;
/
---OBTENER EL IVA DE LA FACTURA 
FUNCTION FIDE_FACTURA_OBTENER_IVA_FN(FACTURA_ID_IN NUMBER)
RETURN NUMBER IS
    iva_aplicado NUMBER;
BEGIN
    SELECT IVA
    INTO iva_aplicado
    FROM AdminDB.FIDE_FACTURA_TB
    WHERE FACTURA_ID = FACTURA_ID_IN;

    RETURN iva_aplicado;
END FIDE_FACTURA_OBTENER_IVA_FN;
/
SELECT FIDE_FACTURA_OBTENER_IVA_FN(2) FROM DUAL;

---- OBTENER RESUMEN DE FACTURACION 
FUNCTION FIDE_FACTURA_RESUMEN_FACTURACION_FN(USUARIO_ID_IN NUMBER)
RETURN VARCHAR2 IS
    resumen VARCHAR2(200);
    total_facturas NUMBER;
    monto_total NUMBER;
    promedio_facturacion NUMBER;
BEGIN
    SELECT COUNT(*), SUM(MONTO_TOTAL), AVG(MONTO_TOTAL)
    INTO total_facturas, monto_total, promedio_facturacion
    FROM AdminDB.FIDE_FACTURA_TB
    WHERE USUARIO_ID = USUARIO_ID_IN;

    resumen := 'Usuario ' || USUARIO_ID_IN || ': Total Facturas = ' || total_facturas || 
               ', Monto Total = ' || monto_total || 
               ', Promedio = ' || promedio_facturacion;
               
    RETURN resumen;
END FIDE_FACTURA_RESUMEN_FACTURACION_FN;

/
SELECT FIDE_FACTURA_RESUMEN_FACTURACION_FN(1) FROM DUAL;
/
END FIDE_FUNCIONES_PKG;