--Usuario
CREATE USER AdminDB IDENTIFIED BY AdminDB;
GRANT DBA TO AdminDB;


-- Tablas de direcciones
CREATE TABLE AdminDB.FIDE_PROVINCIA_TB (
    PROVINCIA_ID NUMBER CONSTRAINT FIDE_PROVINCIA_TB_PROVINCIA_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL
);

CREATE TABLE AdminDB.FIDE_CANTON_TB (
    CANTON_ID NUMBER CONSTRAINT FIDE_PROVINCIA_TB_CANTON_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL
);

CREATE TABLE AdminDB.FIDE_DISTRITO_TB (
    DISTRITO_ID NUMBER CONSTRAINT FIDE_DISTRITO_TB_DISTRITO_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL
);

CREATE TABLE AdminDB.FIDE_DIRECCION_TB (
    DIRECCION_ID NUMBER CONSTRAINT FIDE_DIRECCION_TB_DIRECCION_ID_PK PRIMARY KEY,
    SENAS VARCHAR2(250) NOT NULL,
    PROVINCIA_ID NUMBER NOT NULL,
    DISTRITO_ID NUMBER NOT NULL,
    CANTON_ID NUMBER NOT NULL,
    
    -- Claves foráneas
    CONSTRAINT FIDE_DIRECCION_TB_PROVINCIA_ID_FK
        FOREIGN KEY (PROVINCIA_ID)
        REFERENCES FIDE_PROVINCIA_TB (PROVINCIA_ID),
        
    CONSTRAINT FIDE_DIRECCION_TB_DISTRITO_ID_FK
        FOREIGN KEY (DISTRITO_ID)
        REFERENCES FIDE_DISTRITO_TB (DISTRITO_ID),
        
    CONSTRAINT FIDE_CANTON_TB_CANTON_ID_FK
        FOREIGN KEY (CANTON_ID)
        REFERENCES FIDE_CANTON_TB (CANTON_ID) 
);

-- Otras Tablas
CREATE TABLE AdminDB.FIDE_ESTADO_TB (
    ESTADO_ID NUMBER CONSTRAINT FIDE_ESTADO_TB_ESTADO_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL
);


-- Tablas del módulo de usuarios

CREATE TABLE AdminDB.FIDE_ROL_TB (
    ROL_ID NUMBER CONSTRAINT FIDE_ROL_TB_ROL_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL
);

CREATE TABLE AdminDB.FIDE_USUARIO_TB (
    USUARIO_ID NUMBER CONSTRAINT FIDE_USUARIOS_TB_USUARIO_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    APELLIDO VARCHAR2(100) NOT NULL,
    CORREO VARCHAR2(100) CONSTRAINT FIDE_USUARIOS_TB_EMAIL_UNIQUE_IDX UNIQUE,
    CONTRASENA VARCHAR2(100) CONSTRAINT FIDE_USUARIOS_TB_CONTRASENA_NOT_NULL_IDX NOT NULL,
    USERNAME VARCHAR2(50),
    DIRECCION_ID NUMBER NOT NULL,
    ROL_ID NUMBER NOT NULL,
    ESTADO_ID NUMBER NOT NULL,
    
    -- Claves foráneas
    CONSTRAINT FIDE_USUARIOS_TB_ESTADO_ID_FK
        FOREIGN KEY (ESTADO_ID)
        REFERENCES FIDE_ESTADO_TB (ESTADO_ID),
    
    CONSTRAINT FIDE_USUARIOS_TB_ROL_ID_FK
        FOREIGN KEY (ROL_ID)
        REFERENCES FIDE_ROL_TB (ROL_ID),
    
    CONSTRAINT FIDE_USUARIOS_TB_DIRECCION_ID_FK
        FOREIGN KEY (DIRECCION_ID)
        REFERENCES FIDE_DIRECCION_TB (DIRECCION_ID)
);

-- Tablas del módulo de productos

CREATE TABLE AdminDB.FIDE_CATEGORIA_TB (
    CATEGORIA_ID NUMBER CONSTRAINT FIDE_CATEGORIA_TB_CATEGORIA_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL
);

CREATE TABLE AdminDB.FIDE_PRODUCTO_TB (
    PRODUCTO_ID NUMBER CONSTRAINT FIDE_PRODUCTO_TB_PRODUCTO_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    DESCRIPCION VARCHAR2(250),
    IMAGEN VARCHAR2(250),
    PRECIO_UNIT NUMBER NOT NULL,
    CATEGORIA_ID NUMBER NOT NULL,
    
    -- Claves fóraneas
     CONSTRAINT FIDE_PRODUCTO_TB_CATEGORIA_ID_FK
        FOREIGN KEY (CATEGORIA_ID)
        REFERENCES FIDE_CATEGORIA_TB (CATEGORIA_ID)
);

CREATE TABLE AdminDB.FIDE_INVENTARIO_TB (
    INVENTARIO_ID NUMBER CONSTRAINT FIDE_INVENTARIO_TB_INVENTARIO_ID_PK PRIMARY KEY,
    STOCK NUMBER NOT NULL,
    DIAS_EN_STOCK NUMBER, 
    ESTADO_ID NUMBER NOT NULL,
    PRODUCTO_ID NUMBER NOT NULL,
    
    -- Claves fóraneas
     CONSTRAINT FIDE_INVENTARIO_TB_ESTADO_ID_FK
        FOREIGN KEY (ESTADO_ID)
        REFERENCES FIDE_ESTADO_TB (ESTADO_ID),
        
     CONSTRAINT FIDE_INVENTARIO_TB_PRODUCTO_ID_FK
        FOREIGN KEY (PRODUCTO_ID)
        REFERENCES FIDE_PRODUCTO_TB (PRODUCTO_ID)
);

-- Tablas del módulo de cursos
CREATE TABLE AdminDB.FIDE_TIPO_CURSO_TB (
    TIPO_CURSO_ID NUMBER CONSTRAINT FIDE_TIPO_CURSO_TB_TIPO_CURSO_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL
);

CREATE TABLE AdminDB.FIDE_CURSO_TB (
    CURSO_ID NUMBER CONSTRAINT FIDE_CURSO_TB_CURSO_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    DESCRIPCION VARCHAR2(250),
    FECHA DATE NOT NULL,
    HORA VARCHAR2(10),  
    IMAGEN VARCHAR2(250),
    PRECIO DECIMAL(10, 2) NOT NULL,
    CAPACIDAD NUMBER NOT NULL,
    TIPO_CURSO_ID NUMBER,  
    ESTADO_ID NUMBER,
    DIRECCION_ID NUMBER,
    
    -- Claves fóraneas
     CONSTRAINT FIDE_CURSO_TB_TIPO_CURSO_ID_FK
        FOREIGN KEY (TIPO_CURSO_ID)
        REFERENCES FIDE_TIPO_CURSO_TB (TIPO_CURSO_ID),
        
     CONSTRAINT FIDE_CURSO_TB_ESTADO_ID_FK
        FOREIGN KEY (ESTADO_ID)
        REFERENCES FIDE_ESTADO_TB (ESTADO_ID),
        
     CONSTRAINT FIDE_CURSO_TB_DIRECCION_ID_FK
        FOREIGN KEY (DIRECCION_ID)
        REFERENCES FIDE_DIRECCION_TB (DIRECCION_ID)
);

-- Tablas del módulo de servicios

CREATE TABLE AdminDB.FIDE_SERVICIO_TB (
    SERVICIO_ID NUMBER CONSTRAINT FIDE_SERVICIO_TB_SERVICIO_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    DESCRIPCION VARCHAR2(250),
    IMAGEN VARCHAR2(250)
);

CREATE TABLE AdminDB.FIDE_EVENTO_TB (
    EVENTO_ID NUMBER CONSTRAINT FIDE_EVENTO_TB_EVENTO_ID_PK PRIMARY KEY,
    USUARIO_ID NUMBER NOT NULL,
    SERVICIO_ID NUMBER NOT NULL,
    DIRECCION_ID NUMBER NOT NULL,
    ESTADO_ID NUMBER NOT NULL,
    FECHA DATE,
    
    -- Claves fóraneas
    CONSTRAINT FIDE_EVENTO_TB_USUARIO_ID_FK
        FOREIGN KEY (USUARIO_ID)
        REFERENCES FIDE_USUARIO_TB (USUARIO_ID),
        
    CONSTRAINT FIDE_EVENTO_TB_SERVICIO_ID_FK
        FOREIGN KEY (SERVICIO_ID)
        REFERENCES FIDE_SERVICIO_TB (SERVICIO_ID),
        
    CONSTRAINT FIDE_EVENTO_TB_DIRECCION_ID_FK
        FOREIGN KEY (DIRECCION_ID)
        REFERENCES FIDE_DIRECCION_TB (DIRECCION_ID),
        
    CONSTRAINT FIDE_EVENTO_TB_ESTADO_ID_FK
        FOREIGN KEY (ESTADO_ID)
        REFERENCES FIDE_ESTADO_TB (ESTADO_ID)
);


CREATE TABLE AdminDB.FIDE_CITA_TB (
    CITA_ID NUMBER CONSTRAINT FIDE_CITA_TB_CITA_ID_PK PRIMARY KEY,
    USUARIO_ID NUMBER NOT NULL,
    SERVICIO_ID NUMBER NOT NULL,
    ESTADO_ID NUMBER NOT NULL,
    FECHA DATE,
    HORA VARCHAR2(10),
    
      -- Claves fóraneas
    CONSTRAINT FIDE_CITA_TB_USUARIO_ID_FK
        FOREIGN KEY (USUARIO_ID)
        REFERENCES FIDE_USUARIO_TB (USUARIO_ID),
        
    CONSTRAINT FIDE_CITA_TB_SERVICIO_ID_FK
        FOREIGN KEY (SERVICIO_ID)
        REFERENCES FIDE_SERVICIO_TB (SERVICIO_ID),
        
    CONSTRAINT FIDE_CITA_TB_ESTADO_ID_FK
        FOREIGN KEY (ESTADO_ID)
        REFERENCES FIDE_ESTADO_TB (ESTADO_ID)
);

-- Tablas del módulo de compras
CREATE TABLE AdminDB.FIDE_METODO_PAGO_TB (
    METODO_PAGO_ID NUMBER CONSTRAINT FIDE_METODO_PAGO_TB_METODO_PAGO_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL
);


CREATE TABLE AdminDB.FIDE_DESCUENTO_TB (
    DESCUENTO_ID NUMBER CONSTRAINT FIDE_DESCUENTO_TB_DESCUENTO_ID_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    PORCENTAJE DECIMAL(10, 2) NOT NULL,
    ESTADO VARCHAR2(50)
);



CREATE TABLE AdminDB.FIDE_DETALLE_FACTURA_TB (
    DETALLE_FACTURA_ID NUMBER CONSTRAINT FIDE_DETALLE_FACTURA_TB_DETALLE_FACTURA_ID_PK PRIMARY KEY,
    CANTIDAD_LINEAS NUMBER NOT NULL,
    TOTAL_POR_LINEA NUMBER NOT NULL,
    PRODUCTO_ID NUMBER NOT NULL,
    
    -- Claves fóraneas
     CONSTRAINT FIDE_DETALLE_FACTURA_TB_TIPO_COMPRA_ID_FK
        FOREIGN KEY (PRODUCTO_ID)
        REFERENCES FIDE_PRODUCTO_TB (PRODUCTO_ID)
);

CREATE TABLE AdminDB.FIDE_FACTURA_TB (
    FACTURA_ID NUMBER CONSTRAINT FIDE_FACTURA_TB_FACTURA_ID_PK PRIMARY KEY,
    USUARIO_ID NUMBER NOT NULL,
    FECHA DATE NOT NULL,
    DETALLE_FACTURA_ID NUMBER NOT NULL,  
    DESCUENTO_ID NUMBER,                  
    IVA DECIMAL(10, 2) NOT NULL,           
    SUBTOTAL DECIMAL(10, 2) NOT NULL,     
    MONTO_TOTAL DECIMAL(10, 2) NOT NULL,   
    METODO_PAGO_ID NUMBER NOT NULL,
    
    -- Claves fóraneas
     CONSTRAINT FIDE_FACTURA_TB_DETALLE_FACTURA_ID_FK
        FOREIGN KEY (DETALLE_FACTURA_ID)
        REFERENCES FIDE_DETALLE_FACTURA_TB (DETALLE_FACTURA_ID),
        
     CONSTRAINT FIDE_FACTURA_TB_USUARIO_ID_FK
        FOREIGN KEY (USUARIO_ID)
        REFERENCES FIDE_USUARIO_TB (USUARIO_ID),
        
     CONSTRAINT FIDE_FACTURA_TB_METODO_PAGO_ID_FK
        FOREIGN KEY (METODO_PAGO_ID)
        REFERENCES FIDE_METODO_PAGO_TB (METODO_PAGO_ID),
        
     CONSTRAINT FIDE_FACTURA_TB_DESCUENTO_ID_FK
        FOREIGN KEY (DESCUENTO_ID)
        REFERENCES FIDE_DESCUENTO_TB (DESCUENTO_ID)   
);

CREATE TABLE AdminDB.FIDE_CARRITO_TB (
    USUARIO_ID NUMBER,
    PRODUCTO_ID NUMBER,
    CANTIDAD NUMBER NOT NULL,
    PRIMARY KEY (USUARIO_ID, PRODUCTO_ID),
    FOREIGN KEY (USUARIO_ID) REFERENCES FIDE_USUARIO_TB(USUARIO_ID),
    FOREIGN KEY (PRODUCTO_ID) REFERENCES FIDE_PRODUCTO_TB(PRODUCTO_ID)
);

--**************************************************************************************************
-- INSERCIONES
--**************************************************************************************************

INSERT INTO AdminDB.FIDE_ESTADO_TB (ESTADO_ID, NOMBRE) 
VALUES (1, 'Activo');

INSERT INTO AdminDB.FIDE_ESTADO_TB (ESTADO_ID, NOMBRE) 
VALUES (2, 'Inactivo');




INSERT INTO AdminDB.FIDE_TIPO_CURSO_TB (TIPO_CURSO_ID, NOMBRE) 
VALUES (1, 'Curso en línea');

INSERT INTO AdminDB.FIDE_TIPO_CURSO_TB (TIPO_CURSO_ID, NOMBRE) 
VALUES (2, 'Curso presencial');

--Canton
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (1, 'Cartago');
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (2, 'Paraíso');
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (3, 'Turrialba');
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (4, 'Heredia');
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (5, 'San Rafael');
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (6, 'Barva');
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (7, 'Liberia');
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (8, 'Nicoya');
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (9, 'Santa Cruz');
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (10, 'Limón');
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (11, 'Puerto Limón');
INSERT INTO AdminDB.FIDE_CANTON_TB (CANTON_ID, NOMBRE) VALUES (12, 'Siquirres');

--Distrito: 
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (1, 'San Juan');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (2, 'Catedral');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (3, 'Paraíso');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (4, 'Orosi');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (5, 'Turrialba');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (6, 'La Suiza');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (7, 'Heredia');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (8, 'Mercedes');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (9, 'San Rafael');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (10, 'San Isidro');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (11, 'Barva');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (12, 'San José');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (13, 'Liberia');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (14, 'Cañas Dulces');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (15, 'Nicoya');
INSERT INTO AdminDB.FIDE_DISTRITO_TB (DISTRITO_ID, NOMBRE) VALUES (16, 'San Antonio');

--Direccion
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (1, 'Av. 2, Frente a la iglesia', 3, 3, 1);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (2, 'Calle 10, Casa verde', 3, 4, 1);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (3, 'Calle 5, Barrio Santa Lucia', 4, 7, 4);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (4, 'Av. 3, Frente a la plaza', 4, 8, 4);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (5, 'Calle 9, Frente al parque', 4, 11, 4);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (6, 'Calle 3, Barrio La Cruz', 5, 13, 7);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (7, 'Calle 15, Cerca del río', 5, 14, 7);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (8, 'Calle 11, Barrio Central', 5, 15, 8);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (9, 'Av. 5, Junto al parque', 5, 16, 8);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (10, 'Calle 6, Barrio El Cocal', 6, 10, 10);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (11, 'Calle 8, Al lado del hospital', 6, 11, 10);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (12, 'Calle 7, Frente al puerto', 6, 12, 11);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (13, 'Av. 4, En el centro', 6, 13, 11);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (14, 'Calle 12, Cerca de la iglesia', 3, 5, 1);
INSERT INTO AdminDB.FIDE_DIRECCION_TB (DIRECCION_ID, SENAS, PROVINCIA_ID, DISTRITO_ID, CANTON_ID)
VALUES (15, 'Calle 4, A 100 metros del puente', 3, 6, 1);

--Usuario
INSERT INTO AdminDB.FIDE_USUARIO_TB (USUARIO_ID, NOMBRE, APELLIDO, CORREO, CONTRASENA, USERNAME, DIRECCION_ID, ROL_ID, ESTADO_ID)
VALUES (10, 'Juan', 'Pérez', 'juan.perez@juan.com', 'contraseña123','juan', 12, 1, 1);
INSERT INTO AdminDB.FIDE_USUARIO_TB (USUARIO_ID, NOMBRE, APELLIDO, CORREO, CONTRASENA, USERNAME, DIRECCION_ID, ROL_ID, ESTADO_ID)
VALUES (12, 'María', 'González', 'maria.gonzalez@maria.com', 'contraseña456', 'maria' , 12, 2, 2);

--Categoria
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (1, 'Plantas Ornamentales');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (2, 'Arreglos Florales');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (3, 'Ramos de Flores');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (4, 'Decoración para Bodas');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (5, 'Centros de Mesa');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (6, 'Plantas Medicinales');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (7, 'Suculentas y Cactus');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (8, 'Semillas y Fertilizantes');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (9, 'Macetas Decorativas');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (10, 'Decoración de Jardines');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (11, 'Árboles Frutales');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (12, 'Flores Tropicales');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (13, 'Accesorios para Jardinería');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (14, 'Hierbas Aromáticas');
INSERT INTO AdminDB.FIDE_CATEGORIA_TB (CATEGORIA_ID, NOMBRE) VALUES (15, 'Decoraciones Temáticas');

--Producto
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(1, 'Helecho Boston', 'Planta ornamental ideal para interiores.', 'helecho_boston.jpg', 3500, 1);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(2, 'Rosa Roja Premium', 'Ramo de 12 rosas rojas frescas.', 'ramo_rosas.jpg', 12000, 3);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(3, 'Centro de Mesa Floral', 'Decoración floral con flores tropicales.', 'centro_floral.jpg', 8000, 5);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(4, 'Ramo de Novia Elegante', 'Ramo diseñado especialmente para bodas.', 'ramo_novia.jpg', 15000, 4);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(5, 'Maceta Cerámica Blanca', 'Maceta decorativa de cerámica blanca.', 'maceta_ceramica.jpg', 2500, 9);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(6, 'Suculenta Jade', 'Pequeña suculenta perfecta para oficinas.', 'suculenta_jade.jpg', 3000, 7);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(7, 'Fertilizante Orgánico', 'Mejora el crecimiento de tus plantas.', 'fertilizante_organico.jpg', 1500, 8);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(8, 'Orquídea Tropical', 'Orquídea color púrpura vibrante.', 'orquidea_tropical.jpg', 18000, 12);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(9, 'Planta Aloe Vera', 'Planta medicinal con múltiples beneficios.', 'aloe_vera.jpg', 5000, 6);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(10, 'Kit de Jardinería Básico', 'Incluye tijeras, guantes y pala pequeña.', 'kit_jardineria.jpg', 12000, 13);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(11, 'Maceta de Madera Rústica', 'Maceta decorativa hecha de madera.', 'maceta_madera.jpg', 4000, 9);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(12, 'Árbol de Limón', 'Pequeño árbol frutal ideal para patios.', 'arbol_limon.jpg', 20000, 11);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(13, 'Romero Fresco', 'Hierba aromática en maceta.', 'romero.jpg', 2000, 14);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(14, 'Guirnalda Floral', 'Decoración temática para eventos.', 'guirnalda_floral.jpg', 6000, 15);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(15, 'Florero de Cristal', 'Florero transparente para arreglos.', 'florero_cristal.jpg', 5000, 5);

--Curso: 
INSERT INTO AdminDB.FIDE_CURSO_TB (CURSO_ID, NOMBRE, DESCRIPCION, FECHA, HORA, IMAGEN, PRECIO, CAPACIDAD, TIPO_CURSO_ID, ESTADO_ID, DIRECCION_ID) 
VALUES (11, 'Curso de Jardinería Básica', 'Aprende a cuidar y mantener tus plantas.', TO_DATE('2024-01-15', 'YYYY-MM-DD'), '10:00 AM', 'imagen1.jpg', 150.00, 20, 2, 1, 1);
INSERT INTO AdminDB.FIDE_CURSO_TB (CURSO_ID, NOMBRE, DESCRIPCION, FECHA, HORA, IMAGEN, PRECIO, CAPACIDAD, TIPO_CURSO_ID, ESTADO_ID, DIRECCION_ID) 
VALUES (12, 'Arreglos Florales Avanzados', 'Crea arreglos para eventos especiales.', TO_DATE('2024-02-10', 'YYYY-MM-DD'), '02:00 PM', 'imagen2.jpg', 200.00, 15, 1, 1, 2);
INSERT INTO AdminDB.FIDE_CURSO_TB (CURSO_ID, NOMBRE, DESCRIPCION, FECHA, HORA, IMAGEN, PRECIO, CAPACIDAD, TIPO_CURSO_ID, ESTADO_ID, DIRECCION_ID) 
VALUES (13, 'Huertos Urbanos', 'Diseña y mantén tu propio huerto en casa.', TO_DATE('2024-03-20', 'YYYY-MM-DD'), '09:00 AM', 'imagen3.jpg', 180.00, 25, 1, 1, 3);
INSERT INTO AdminDB.FIDE_CURSO_TB (CURSO_ID, NOMBRE, DESCRIPCION, FECHA, HORA, IMAGEN, PRECIO, CAPACIDAD, TIPO_CURSO_ID, ESTADO_ID, DIRECCION_ID) 
VALUES (14, 'Decoración con Plantas', 'Incorpora plantas en la decoración de interiores.', TO_DATE('2024-04-05', 'YYYY-MM-DD'), '03:00 PM', 'imagen4.jpg', 120.00, 20, 2, 1, 4);
INSERT INTO AdminDB.FIDE_CURSO_TB (CURSO_ID, NOMBRE, DESCRIPCION, FECHA, HORA, IMAGEN, PRECIO, CAPACIDAD, TIPO_CURSO_ID, ESTADO_ID, DIRECCION_ID) 
VALUES (15, 'Fotografía de Naturaleza', 'Captura la belleza natural con tu cámara.', TO_DATE('2024-05-15', 'YYYY-MM-DD'), '01:00 PM', 'imagen5.jpg', 250.00, 10, 1, 1, 5);
INSERT INTO AdminDB.FIDE_CURSO_TB (CURSO_ID, NOMBRE, DESCRIPCION, FECHA, HORA, IMAGEN, PRECIO, CAPACIDAD, TIPO_CURSO_ID, ESTADO_ID, DIRECCION_ID) 
VALUES (16, 'Técnicas de Compostaje', 'Reduce residuos y genera abono para tus plantas.', TO_DATE('2024-06-10', 'YYYY-MM-DD'), '11:00 AM', 'imagen6.jpg', 100.00, 30, 2, 1, 6);
INSERT INTO AdminDB.FIDE_CURSO_TB (CURSO_ID, NOMBRE, DESCRIPCION, FECHA, HORA, IMAGEN, PRECIO, CAPACIDAD, TIPO_CURSO_ID, ESTADO_ID, DIRECCION_ID) 
VALUES (17, 'Paisajismo Básico', 'Diseña espacios exteriores armoniosos.', TO_DATE('2024-07-12', 'YYYY-MM-DD'), '04:00 PM', 'imagen7.jpg', 300.00, 12, 2, 1, 7);
INSERT INTO AdminDB.FIDE_CURSO_TB (CURSO_ID, NOMBRE, DESCRIPCION, FECHA, HORA, IMAGEN, PRECIO, CAPACIDAD, TIPO_CURSO_ID, ESTADO_ID, DIRECCION_ID) 
VALUES (18, 'Botánica para Principiantes', 'Conoce las principales familias de plantas.', TO_DATE('2024-08-18', 'YYYY-MM-DD'), '09:30 AM', 'imagen8.jpg', 170.00, 25, 1, 1, 8);
INSERT INTO AdminDB.FIDE_CURSO_TB (CURSO_ID, NOMBRE, DESCRIPCION, FECHA, HORA, IMAGEN, PRECIO, CAPACIDAD, TIPO_CURSO_ID, ESTADO_ID, DIRECCION_ID) 
VALUES (19, 'Sistemas de Riego Automatizado', 'Implementa riego eficiente en tus proyectos.', TO_DATE('2024-09-20', 'YYYY-MM-DD'), '10:30 AM', 'imagen9.jpg', 220.00, 18, 1, 1, 9);
INSERT INTO AdminDB.FIDE_CURSO_TB (CURSO_ID, NOMBRE, DESCRIPCION, FECHA, HORA, IMAGEN, PRECIO, CAPACIDAD, TIPO_CURSO_ID, ESTADO_ID, DIRECCION_ID) 
VALUES (20, 'Taller de Bonsái', 'Aprende a crear y cuidar bonsáis.', TO_DATE('2024-10-05', 'YYYY-MM-DD'), '02:30 PM', 'imagen10.jpg', 350.00, 8, 2, 1, 10);

--Servicio: 
INSERT INTO AdminDB.FIDE_SERVICIO_TB (SERVICIO_ID, NOMBRE, DESCRIPCION, IMAGEN)
VALUES (1, 'Decoración de Bodas', 'Transforma tu boda en un evento inolvidable con nuestras decoraciones naturales.', 'decoracion_bodas.jpg');
INSERT INTO AdminDB.FIDE_SERVICIO_TB (SERVICIO_ID, NOMBRE, DESCRIPCION, IMAGEN)
VALUES (2, 'Arreglos Florales Personalizados', 'Crea arreglos florales únicos para cualquier ocasión especial.', 'arreglos_florales.jpg');
INSERT INTO AdminDB.FIDE_SERVICIO_TB (SERVICIO_ID, NOMBRE, DESCRIPCION, IMAGEN)
VALUES (3, 'Mantenimiento de Jardines', 'Servicio profesional para mantener tus jardines impecables.', 'mantenimiento_jardines.jpg');
INSERT INTO AdminDB.FIDE_SERVICIO_TB (SERVICIO_ID, NOMBRE, DESCRIPCION, IMAGEN)
VALUES (4, 'Diseño de Paisajismo', 'Planificación y diseño de paisajes personalizados.', 'diseno_paisajismo.jpg');
INSERT INTO AdminDB.FIDE_SERVICIO_TB (SERVICIO_ID, NOMBRE, DESCRIPCION, IMAGEN)
VALUES (5, 'Decoración para Eventos', 'Ambientación natural para eventos sociales y corporativos.', 'decoracion_eventos.jpg');
INSERT INTO AdminDB.FIDE_SERVICIO_TB (SERVICIO_ID, NOMBRE, DESCRIPCION, IMAGEN)
VALUES (6, 'Instalación de Sistemas de Riego', 'Implementación de riego automático para jardines y huertos.', 'sistemas_riego.jpg');
INSERT INTO AdminDB.FIDE_SERVICIO_TB (SERVICIO_ID, NOMBRE, DESCRIPCION, IMAGEN)
VALUES (7, 'Asesoría en Huertos Urbanos', 'Consultoría para diseñar y mantener huertos urbanos en casa.', 'asesoria_huertos.jpg');
INSERT INTO AdminDB.FIDE_SERVICIO_TB (SERVICIO_ID, NOMBRE, DESCRIPCION, IMAGEN)
VALUES (8, 'Decoración de Interiores con Plantas', 'Incorpora el diseño natural en tus espacios interiores.', 'decoracion_interiores.jpg');
INSERT INTO AdminDB.FIDE_SERVICIO_TB (SERVICIO_ID, NOMBRE, DESCRIPCION, IMAGEN)
VALUES (9, 'Talleres de Jardinería', 'Sesiones prácticas para aprender técnicas de jardinería.', 'talleres_jardineria.jpg');
INSERT INTO AdminDB.FIDE_SERVICIO_TB (SERVICIO_ID, NOMBRE, DESCRIPCION, IMAGEN)
VALUES (10, 'Restauración de Áreas Verdes', 'Rehabilitación de espacios naturales y áreas verdes.', 'restauracion_areas_verdes.jpg');

--Evento: 
INSERT INTO AdminDB.FIDE_EVENTO_TB (EVENTO_ID, USUARIO_ID, SERVICIO_ID, DIRECCION_ID, ESTADO_ID, FECHA)
VALUES (1, 1, 1, 1, 1, TO_DATE('2024-03-15', 'YYYY-MM-DD'));
INSERT INTO AdminDB.FIDE_EVENTO_TB (EVENTO_ID, USUARIO_ID, SERVICIO_ID, DIRECCION_ID, ESTADO_ID, FECHA)
VALUES (2, 2, 2, 2, 1, TO_DATE('2024-04-01', 'YYYY-MM-DD'));
INSERT INTO AdminDB.FIDE_EVENTO_TB (EVENTO_ID, USUARIO_ID, SERVICIO_ID, DIRECCION_ID, ESTADO_ID, FECHA)
VALUES (3, 3, 3, 3, 2, TO_DATE('2024-05-20', 'YYYY-MM-DD'));
INSERT INTO AdminDB.FIDE_EVENTO_TB (EVENTO_ID, USUARIO_ID, SERVICIO_ID, DIRECCION_ID, ESTADO_ID, FECHA)
VALUES (4, 4, 4, 4, 1, TO_DATE('2024-06-10', 'YYYY-MM-DD'));
INSERT INTO AdminDB.FIDE_EVENTO_TB (EVENTO_ID, USUARIO_ID, SERVICIO_ID, DIRECCION_ID, ESTADO_ID, FECHA)
VALUES (5, 5, 5, 5, 2, TO_DATE('2024-07-25', 'YYYY-MM-DD'));
INSERT INTO AdminDB.FIDE_EVENTO_TB (EVENTO_ID, USUARIO_ID, SERVICIO_ID, DIRECCION_ID, ESTADO_ID, FECHA)
VALUES (6, 6, 6, 6, 1, TO_DATE('2024-08-15', 'YYYY-MM-DD'));
INSERT INTO AdminDB.FIDE_EVENTO_TB (EVENTO_ID, USUARIO_ID, SERVICIO_ID, DIRECCION_ID, ESTADO_ID, FECHA)
VALUES (7, 7, 7, 7, 1, TO_DATE('2024-09-30', 'YYYY-MM-DD'));
INSERT INTO AdminDB.FIDE_EVENTO_TB (EVENTO_ID, USUARIO_ID, SERVICIO_ID, DIRECCION_ID, ESTADO_ID, FECHA)
VALUES (8, 8, 8, 8, 2, TO_DATE('2024-10-10', 'YYYY-MM-DD'));
INSERT INTO AdminDB.FIDE_EVENTO_TB (EVENTO_ID, USUARIO_ID, SERVICIO_ID, DIRECCION_ID, ESTADO_ID, FECHA)
VALUES (9, 9, 9, 9, 1, TO_DATE('2024-11-05', 'YYYY-MM-DD'));
INSERT INTO AdminDB.FIDE_EVENTO_TB (EVENTO_ID, USUARIO_ID, SERVICIO_ID, DIRECCION_ID, ESTADO_ID, FECHA)
VALUES (10, 10, 10, 10, 2, TO_DATE('2024-12-01', 'YYYY-MM-DD'));

--Cita:
INSERT INTO AdminDB.FIDE_CITA_TB (CITA_ID, USUARIO_ID, SERVICIO_ID, ESTADO_ID, FECHA, HORA)
VALUES (1, 1, 1, 1, TO_DATE('2024-03-01', 'YYYY-MM-DD'), '09:00 AM');
INSERT INTO AdminDB.FIDE_CITA_TB (CITA_ID, USUARIO_ID, SERVICIO_ID, ESTADO_ID, FECHA, HORA)
VALUES (2, 2, 2, 1, TO_DATE('2024-04-05', 'YYYY-MM-DD'), '11:00 AM');
INSERT INTO AdminDB.FIDE_CITA_TB (CITA_ID, USUARIO_ID, SERVICIO_ID, ESTADO_ID, FECHA, HORA)
VALUES (3, 3, 3, 2, TO_DATE('2024-05-10', 'YYYY-MM-DD'), '02:00 PM');
INSERT INTO AdminDB.FIDE_CITA_TB (CITA_ID, USUARIO_ID, SERVICIO_ID, ESTADO_ID, FECHA, HORA)
VALUES (4, 4, 4, 1, TO_DATE('2024-06-15', 'YYYY-MM-DD'), '10:00 AM');
INSERT INTO AdminDB.FIDE_CITA_TB (CITA_ID, USUARIO_ID, SERVICIO_ID, ESTADO_ID, FECHA, HORA)
VALUES (5, 5, 5, 2, TO_DATE('2024-07-20', 'YYYY-MM-DD'), '03:00 PM');
INSERT INTO AdminDB.FIDE_CITA_TB (CITA_ID, USUARIO_ID, SERVICIO_ID, ESTADO_ID, FECHA, HORA)
VALUES (6, 6, 6, 1, TO_DATE('2024-08-10', 'YYYY-MM-DD'), '01:00 PM');
INSERT INTO AdminDB.FIDE_CITA_TB (CITA_ID, USUARIO_ID, SERVICIO_ID, ESTADO_ID, FECHA, HORA)
VALUES (7, 7, 7, 2, TO_DATE('2024-09-25', 'YYYY-MM-DD'), '04:00 PM');
INSERT INTO AdminDB.FIDE_CITA_TB (CITA_ID, USUARIO_ID, SERVICIO_ID, ESTADO_ID, FECHA, HORA)
VALUES (8, 8, 8, 1, TO_DATE('2024-10-30', 'YYYY-MM-DD'), '12:00 PM');
INSERT INTO AdminDB.FIDE_CITA_TB (CITA_ID, USUARIO_ID, SERVICIO_ID, ESTADO_ID, FECHA, HORA)
VALUES (9, 9, 9, 1, TO_DATE('2024-11-15', 'YYYY-MM-DD'), '09:30 AM');
INSERT INTO AdminDB.FIDE_CITA_TB (CITA_ID, USUARIO_ID, SERVICIO_ID, ESTADO_ID, FECHA, HORA)
VALUES (10, 10, 10, 2, TO_DATE('2024-12-20', 'YYYY-MM-DD'), '02:30 PM');

-- Producto
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(1, 'Helecho Boston', 'Planta ornamental ideal para interiores.', 'helecho_boston.jpg', 3500, 1);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(2, 'Rosa Roja Premium', 'Ramo de 12 rosas rojas frescas.', 'ramo_rosas.jpg', 12000, 3);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(3, 'Centro de Mesa Floral', 'Decoración floral con flores tropicales.', 'centro_floral.jpg', 8000, 5);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(4, 'Ramo de Novia Elegante', 'Ramo diseñado especialmente para bodas.', 'ramo_novia.jpg', 15000, 4);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(5, 'Maceta Cerámica Blanca', 'Maceta decorativa de cerámica blanca.', 'maceta_ceramica.jpg', 2500, 9);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(6, 'Suculenta Jade', 'Pequeña suculenta perfecta para oficinas.', 'suculenta_jade.jpg', 3000, 7);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(7, 'Fertilizante Orgánico', 'Mejora el crecimiento de tus plantas.', 'fertilizante_organico.jpg', 1500, 8);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(8, 'Orquídea Tropical', 'Orquídea color púrpura vibrante.', 'orquidea_tropical.jpg', 18000, 12);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(9, 'Planta Aloe Vera', 'Planta medicinal con múltiples beneficios.', 'aloe_vera.jpg', 5000, 6);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(10, 'Kit de Jardinería Básico', 'Incluye tijeras, guantes y pala pequeña.', 'kit_jardineria.jpg', 12000, 13);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(11, 'Maceta de Madera Rústica', 'Maceta decorativa hecha de madera.', 'maceta_madera.jpg', 4000, 9);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(12, 'Árbol de Limón', 'Pequeño árbol frutal ideal para patios.', 'arbol_limon.jpg', 20000, 11);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(13, 'Romero Fresco', 'Hierba aromática en maceta.', 'romero.jpg', 2000, 14);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(14, 'Guirnalda Floral', 'Decoración temática para eventos.', 'guirnalda_floral.jpg', 6000, 15);
INSERT INTO AdminDB.FIDE_PRODUCTO_TB (PRODUCTO_ID, NOMBRE, DESCRIPCION, IMAGEN, PRECIO_UNIT, CATEGORIA_ID) VALUES 
(15, 'Florero de Cristal', 'Florero transparente para arreglos.', 'florero_cristal.jpg', 5000, 5);

-- Inventario
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (16, 50, 30, 1, 1);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (17, 20, 45, 1, 2);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (18, 30, 10, 2, 3);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (19, 40, 15, 1, 4);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (20, 25, 5, 2, 5);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (21, 15, 60, 1, 6);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (22, 10, 90, 1, 7);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (23, 35, 75, 1, 8);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (24, 20, 120, 1, 9);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (25, 50, 200, 2, 10);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (26, 10, 45, 1, 11);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (27, 15, 180, 1, 12);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (28, 12, 20, 2, 13);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (29, 5, 10, 1, 14);
INSERT INTO AdminDB.FIDE_INVENTARIO_TB (INVENTARIO_ID, STOCK, DIAS_EN_STOCK, ESTADO_ID, PRODUCTO_ID) 
VALUES (30, 20, 30, 2, 15);






--*************************************************************************************************
--VISTAS
--*************************************************************************************************

--Informacion del usuario
CREATE OR REPLACE VIEW FIDE_INFO_USUARIOS_V AS
SELECT U.NOMBRE AS FIRST_NAME, U.APELLIDO AS LAST_NAME, U.CORREO AS EMAIL, P.NOMBRE AS PROVINCIA, E.NOMBRE AS ESTADO
FROM AdminDB.FIDE_USUARIO_TB U, AdminDB.FIDE_DIRECCION_TB D, AdminDB.FIDE_PROVINCIA_TB P, AdminDB.FIDE_ESTADO_TB E
WHERE  U.DIRECCION_ID = D.DIRECCION_ID
    AND D.PROVINCIA_ID = P.PROVINCIA_ID
    AND U.ESTADO_ID = E.ESTADO_ID;
/
SELECT * FROM FIDE_INFO_USUARIOS_V;

--Informacion de los cursos 
CREATE OR REPLACE VIEW FIDE_INFO_CURSOS_V AS
SELECT C.CURSO_ID,C.NOMBRE AS CURSO_NOMBRE,C.DESCRIPCION AS CURSO_DESCRIPCION,C.FECHA AS FECHA_CURSO,C.HORA AS HORA_CURSO,
C.PRECIO AS PRECIO_CURSO,C.CAPACIDAD AS CAPACIDAD_CURSO,T.TIPO_CURSO_ID,T.NOMBRE AS TIPO_CURSO_NOMBRE
FROM AdminDB.FIDE_CURSO_TB C,AdminDB.FIDE_TIPO_CURSO_TB T
WHERE 
    C.TIPO_CURSO_ID = T.TIPO_CURSO_ID;
/
SELECT * FROM FIDE_INFO_CURSOS_V ;

--Informacion de la direccion de los usuarios
CREATE OR REPLACE VIEW FIDE_INFO_USUARIOS_DIRECCION_V AS
SELECT U.USUARIO_ID, U.NOMBRE AS NOMBRE_USUARIO, P.NOMBRE AS PROVINCIA_NOMBRE, C.NOMBRE AS CANTON_NOMBRE,
DIST.NOMBRE AS DISTRITO_NOMBRE, D.SENAS AS DIRECCION_SEÑAS
FROM AdminDB.FIDE_USUARIO_TB U, AdminDB.FIDE_DIRECCION_TB D, AdminDB.FIDE_PROVINCIA_TB P, AdminDB.FIDE_CANTON_TB C,
AdminDB.FIDE_DISTRITO_TB DIST
WHERE U.DIRECCION_ID = D.DIRECCION_ID
    AND D.PROVINCIA_ID = P.PROVINCIA_ID
    AND D.CANTON_ID = C.CANTON_ID
    AND D.DISTRITO_ID = DIST.DISTRITO_ID;
/
SELECT * FROM FIDE_INFO_USUARIOS_DIRECCION_V ;

--Informacion de los productos 
CREATE OR REPLACE VIEW FIDE_INFO_PRODUCTOS_INVENTARIO_V AS
SELECT C.CATEGORIA_ID,C.NOMBRE AS CATEGORIA_NOMBRE,P.PRODUCTO_ID,P.NOMBRE AS PRODUCTO_NOMBRE, P.DESCRIPCION AS PRODUCTO_DESCRIPCION,
P.PRECIO_UNIT AS PRODUCTO_PRECIO,I.INVENTARIO_ID,I.STOCK AS INVENTARIO_STOCK,
I.DIAS_EN_STOCK AS INVENTARIO_DIAS_EN_STOCK
FROM AdminDB.FIDE_CATEGORIA_TB C,  AdminDB.FIDE_PRODUCTO_TB P, AdminDB.FIDE_INVENTARIO_TB I
WHERE P.CATEGORIA_ID = C.CATEGORIA_ID
    AND I.PRODUCTO_ID = P.PRODUCTO_ID;
/
SELECT * FROM FIDE_INFO_PRODUCTOS_INVENTARIO_V;

--Informacion de los servicios
CREATE OR REPLACE VIEW FIDE_INFO_EVENTOS_CITAS_V AS
SELECT  E.EVENTO_ID, E.USUARIO_ID AS EVENTO_USUARIO_ID, E.FECHA AS EVENTO_FECHA, C.CITA_ID, C.USUARIO_ID AS CITA_USUARIO_ID, 
C.FECHA AS CITA_FECHA, C.HORA AS CITA_HORA
FROM AdminDB.FIDE_EVENTO_TB E, AdminDB.FIDE_CITA_TB C, AdminDB.FIDE_SERVICIO_TB S
WHERE E.SERVICIO_ID = S.SERVICIO_ID
    AND C.SERVICIO_ID = S.SERVICIO_ID;
/
SELECT * FROM FIDE_INFO_EVENTOS_CITAS_V;

--Informacion de las compras
CREATE OR REPLACE VIEW FIDE_INFO_COMPRAS_V AS
SELECT MP.NOMBRE AS METODO_PAGO_NOMBRE, D.NOMBRE AS DESCUENTO_NOMBRE, D.PORCENTAJE AS DESCUENTO_PORCENTAJE,  
F.FACTURA_ID,  F.USUARIO_ID AS FACTURA_USUARIO_ID, F.FECHA AS FACTURA_FECHA, F.IVA AS FACTURA_IVA, F.SUBTOTAL AS FACTURA_SUBTOTAL, 
F.MONTO_TOTAL AS FACTURA_MONTO_TOTAL
FROM AdminDB.FIDE_FACTURA_TB F, AdminDB.FIDE_METODO_PAGO_TB MP, AdminDB.FIDE_DESCUENTO_TB D
WHERE F.METODO_PAGO_ID = MP.METODO_PAGO_ID
    AND F.DESCUENTO_ID = D.DESCUENTO_ID;
    
/
SELECT * FROM FIDE_INFO_COMPRAS_V;

--Estado del usuario
CREATE OR REPLACE VIEW FIDE_USUARIOS_ESTADOS_V AS
SELECT E.ESTADO_ID, E.NOMBRE AS ESTADO_NOMBRE, U.USUARIO_ID, U.NOMBRE AS USUARIO_NOMBRE, U.APELLIDO AS USUARIO_APELLIDO, 
U.CORREO AS USUARIO_EMAIL
FROM AdminDB.FIDE_ESTADO_TB E, AdminDB.FIDE_USUARIO_TB U
WHERE U.ESTADO_ID = E.ESTADO_ID;
/
SELECT * FROM FIDE_USUARIOS_ESTADOS_V;

--Informacion de los usuarios, citas y metodos de pago 
CREATE OR REPLACE VIEW FIDE_INFO_USUARIOS_CITAS_METODO_PAGO_V AS
SELECT U.USUARIO_ID, U.NOMBRE AS USUARIO_NOMBRE, U.APELLIDO AS USUARIO_APELLIDO, U.CORREO AS USUARIO_EMAIL,
C.CITA_ID, C.FECHA AS CITA_FECHA, C.HORA AS CITA_HORA, MP.METODO_PAGO_ID, MP.NOMBRE AS METODO_PAGO_NOMBRE
FROM AdminDB.FIDE_USUARIO_TB U, AdminDB.FIDE_CITA_TB C, AdminDB.FIDE_METODO_PAGO_TB MP
WHERE U.USUARIO_ID = C.USUARIO_ID 
    AND MP.METODO_PAGO_ID = MP.METODO_PAGO_ID;
/
SELECT * FROM FIDE_INFO_USUARIOS_CITAS_METODO_PAGO_V;

--Informacion de los usuarios, cursos y el tipo de curso
CREATE OR REPLACE VIEW FIDE_INFO_USUARIOS_CURSOS_V AS
SELECT U.USUARIO_ID, U.NOMBRE AS USUARIO_NOMBRE, U.APELLIDO AS USUARIO_APELLIDO, C.CURSO_ID, C.NOMBRE AS CURSO_NOMBRE, 
TC.TIPO_CURSO_ID, TC.NOMBRE AS TIPO_CURSO_NOMBRE
FROM AdminDB.FIDE_USUARIO_TB U, AdminDB.FIDE_CURSO_TB C, AdminDB.FIDE_TIPO_CURSO_TB TC
WHERE U.USUARIO_ID = U.USUARIO_ID
    AND C.TIPO_CURSO_ID = TC.TIPO_CURSO_ID;
/
SELECT * FROM FIDE_INFO_USUARIOS_CURSOS_V;


--****************************************************************************************************
--SECUENCIAS
--****************************************************************************************************

CREATE SEQUENCE FIDE_CATEGORIA_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_CANTON_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_DISTRITO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_PROVINCIA_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_CITA_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_ESTADO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_DIRECCION_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_PRODUCTO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_INVENTARIO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_METODO_PAGO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_DESCUENTO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_DETALLE_FACTURA_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_FACTURA_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_SERVICIO_SEQ START WITH 1 INCREMENT BY 1; 
CREATE SEQUENCE FIDE_CURSO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_EVENTO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_ROL_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_TIPO_CURSO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FIDE_USUARIO_SEQ START WITH 1 INCREMENT BY 1;

--SE CREA OBJETO
CREATE OR REPLACE TYPE PROVINCIA_RESULTADO AS OBJECT (
    NOMBRE_PROVINCIA VARCHAR2(100),
    TOTAL_DIRECCIONES NUMBER
);

--************************************************************************************************
-- TRIGGERS SECUENCIAS
--************************************************************************************************

-- Para FIDE_CURSO_TB
CREATE OR REPLACE TRIGGER FIDE_CURSO_SEQ_TRG
BEFORE INSERT ON FIDE_CURSO_TB
FOR EACH ROW
BEGIN
    :NEW.CURSO_ID := FIDE_CURSO_SEQ.NEXTVAL;
END;
/

-- Para FIDE_SERVICIO_TB
CREATE OR REPLACE TRIGGER FIDE_SERVICIO_SEQ_TRG
BEFORE INSERT ON FIDE_SERVICIO_TB
FOR EACH ROW
BEGIN
    :NEW.SERVICIO_ID := FIDE_SERVICIO_SEQ.NEXTVAL;
END;

-- Para FIDE_CATEGORIA_TB
CREATE OR REPLACE TRIGGER FIDE_CATEGORIA_SEQ_TRG
BEFORE INSERT ON FIDE_CATEGORIA_TB
FOR EACH ROW
BEGIN
    :NEW.CATEGORIA_ID := FIDE_CATEGORIA_SEQ.NEXTVAL;
END;
/

-- Para FIDE_PRODUCTO_TB
CREATE OR REPLACE TRIGGER FIDE_PRODUCTO_SEQ_TRG
BEFORE INSERT ON FIDE_PRODUCTO_TB
FOR EACH ROW
BEGIN
    :NEW.PRODUCTO_ID := FIDE_PRODUCTO_SEQ.NEXTVAL;
END;
/

-- Para FIDE_INVENTARIO_TB
CREATE OR REPLACE TRIGGER FIDE_INVENTARIO_SEQ_TRG
BEFORE INSERT ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
    :NEW.INVENTARIO_ID := FIDE_INVENTARIO_SEQ.NEXTVAL;
END;
/

-- Para FIDE_METODO_PAGO_TB
CREATE OR REPLACE TRIGGER FIDE_METODO_PAGO_SEQ_TRG
BEFORE INSERT ON FIDE_METODO_PAGO_TB
FOR EACH ROW
BEGIN
    :NEW.METODO_PAGO_ID := FIDE_METODO_PAGO_SEQ.NEXTVAL;
END;
/

-- Para FIDE_DESCUENTO_TB
CREATE OR REPLACE TRIGGER FIDE_DESCUENTO_SEQ_TRG
BEFORE INSERT ON FIDE_DESCUENTO_TB
FOR EACH ROW
BEGIN
    :NEW.DESCUENTO_ID := FIDE_DESCUENTO_SEQ.NEXTVAL;
END;
/



-- Para FIDE_DETALLE_FACTURA_TB
CREATE OR REPLACE TRIGGER FIDE_DETALLE_FACTURA_SEQ_TRG
BEFORE INSERT ON FIDE_DETALLE_FACTURA_TB
FOR EACH ROW
BEGIN
    :NEW.DETALLE_FACTURA_ID := FIDE_DETALLE_FACTURA_SEQ.NEXTVAL;
END;
/

-- Para FIDE_FACTURA_TB
CREATE OR REPLACE TRIGGER FIDE_FACTURA_SEQ_TRG
BEFORE INSERT ON FIDE_FACTURA_TB
FOR EACH ROW
BEGIN
    :NEW.FACTURA_ID := FIDE_FACTURA_SEQ.NEXTVAL;
END;
/

-- Para FIDE_CANTON_TB
CREATE OR REPLACE TRIGGER FIDE_CANTON_SEQ_TRG
BEFORE INSERT ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
    :NEW.CANTON_ID := FIDE_CANTON_SEQ.NEXTVAL;
END;
/ 

-- Para FIDE_DISTRITO_TB
CREATE OR REPLACE TRIGGER FIDE_DISTRITO_SEQ_TRG
BEFORE INSERT ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
    :NEW.DISTRITO_ID := FIDE_DISTRITO_SEQ.NEXTVAL;
END;
/ 

-- Para FIDE_PROVINCIA_TB
CREATE OR REPLACE TRIGGER FIDE_PROVINCIA_SEQ_TRG
BEFORE INSERT ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
    :NEW.PROVINCIA_ID := FIDE_PROVINCIA_SEQ.NEXTVAL;
END;
/ 

-- Para FIDE_CITA_TB
CREATE OR REPLACE TRIGGER FIDE_CITA_SEQ_TRG
BEFORE INSERT ON FIDE_CITA_TB
FOR EACH ROW
BEGIN
    :NEW.CITA_ID := FIDE_CITA_SEQ.NEXTVAL;
END;
/ 

-- Para FIDE_ESTADO_TB
CREATE OR REPLACE TRIGGER FIDE_ESTADO_SEQ_TRG
BEFORE INSERT ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO_ID := FIDE_ESTADO_SEQ.NEXTVAL;
END;
/ 

-- Para FIDE_DIRECCION_TB
CREATE OR REPLACE TRIGGER FIDE_DIRECCION_SEQ_TRG
BEFORE INSERT ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
    :NEW.DIRECCION_ID := FIDE_DIRECCION_SEQ.NEXTVAL;
END;
/ 

-- Para FIDE_EVENTO_TB
CREATE OR REPLACE TRIGGER FIDE_EVENTO_SEQ_TRG
BEFORE INSERT ON FIDE_EVENTO_TB
FOR EACH ROW
BEGIN
    :NEW.EVENTO_ID := FIDE_EVENTO_SEQ.NEXTVAL;
END;
/ 

-- Para FIDE_ROL_TB
CREATE OR REPLACE TRIGGER FIDE_ROL_SEQ_TRG
BEFORE INSERT ON FIDE_ROL_TB
FOR EACH ROW
BEGIN
    :NEW.ROL_ID := FIDE_ROL_SEQ.NEXTVAL;
END;
/ 

-- Para FIDE_TIPO_CURSO_TB
CREATE OR REPLACE TRIGGER FIDE_TIPO_CURSO_SEQ_TRG
BEFORE INSERT ON FIDE_TIPO_CURSO_TB
FOR EACH ROW
BEGIN
    :NEW.TIPO_CURSO_ID := FIDE_TIPO_CURSO_SEQ.NEXTVAL;
END;
/ 

-- Para FIDE_USUARIO_TB
CREATE OR REPLACE TRIGGER FIDE_USUARIO_SEQ_TRG
BEFORE INSERT ON FIDE_USUARIO_TB
FOR EACH ROW
BEGIN
    :NEW.USUARIO_ID := FIDE_USUARIO_SEQ.NEXTVAL;
END;
/ 

--**************************************************************************************************
--TRIGGERS AUDITORIA
--**************************************************************************************************

--Tabla FIDE_CATEGORIA_TB

ALTER TABLE FIDE_CATEGORIA_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);


--TRIGGERS FECHA CREACIÓN Y MMODIFICACIÓN
CREATE OR REPLACE TRIGGER FIDE_CATEGORIA_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CATEGORIA_TB
FOR EACH ROW
BEGIN
IF INSERTING THEN
:NEW.FECHA_CREACION:=SYSTIMESTAMP;
ELSE
:NEW.FECHA_MODIFICACION:=SYSTIMESTAMP;
END IF;
END;

--TRIGGERS AUTORES
CREATE OR REPLACE TRIGGER FIDE_CATEGORIA_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_CATEGORIA_TB
FOR EACH ROW
BEGIN
IF INSERTING THEN
:NEW.CREADO_POR:=USER;
ELSE
:NEW.MODIFICADO_POR:=USER;
END IF;
END;

--TRIGGERS ACCIONES
CREATE OR REPLACE TRIGGER FIDE_CATEGORIA_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CATEGORIA_TB
FOR EACH ROW
BEGIN
IF INSERTING THEN
:NEW.ACCION:='INSERT';
ELSE
:NEW.ACCION:='UPDATE';
END IF;
END;

--TRIGGERS ESTADOS
CREATE OR REPLACE TRIGGER FIDE_CATEGORIA_ESTADO_TRG
BEFORE INSERT ON FIDE_CATEGORIA_TB
FOR EACH ROW
BEGIN
:NEW.ESTADO:='ACTIVO';
END;

--TABLA FIDE_CANTON_TB
ALTER TABLE FIDE_CANTON_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_CANTON_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_CANTON_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_CANTON_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_CANTON_ESTADO_TRG
BEFORE INSERT ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--TABLA FIDE_PROVINCIA_TB
ALTER TABLE FIDE_PROVINCIA_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_PROVINCIA_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_PROVINCIA_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_PROVINCIA_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_PROVINCIA_ESTADO_TRG
BEFORE INSERT ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--TABLA FIDE_DISTRITO_TB
ALTER TABLE FIDE_DISTRITO_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_DISTRITO_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DISTRITO_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DISTRITO_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DISTRITO_ESTADO_TRG
BEFORE INSERT ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--TABLA FIDE_DIRECCION_TB
ALTER TABLE FIDE_DIRECCION_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_DIRECCION_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DIRECCION_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DIRECCION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DIRECCION_ESTADO_TRG
BEFORE INSERT ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--TABLA FIDE_CURSO_TB
ALTER TABLE FIDE_CURSO_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_CURSO_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CURSO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_CURSO_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_CURSO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_CURSO_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CURSO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_CURSO_ESTADO_TRG
BEFORE INSERT ON FIDE_CURSO_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--TABLA FIDE_SERVICIO_TB
ALTER TABLE FIDE_SERVICIO_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_SERVICIO_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_SERVICIO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_SERVICIO_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_SERVICIO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_SERVICIO_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_SERVICIO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_SERVICIO_ESTADO_TRG
BEFORE INSERT ON FIDE_SERVICIO_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--TABLA FIDE_FACTURA_TB
ALTER TABLE FIDE_FACTURA_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_FACTURA_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_FACTURA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_FACTURA_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_FACTURA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_FACTURA_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_FACTURA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_FACTURA_ESTADO_TRG
BEFORE INSERT ON FIDE_FACTURA_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--TABLA FIDE_USUARIO_TB
ALTER TABLE FIDE_USUARIO_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_USUARIO_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_USUARIO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_USUARIO_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_USUARIO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_USUARIO_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_USUARIO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_USUARIO_ESTADO_TRG
BEFORE INSERT ON FIDE_USUARIO_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--TABLA_FIDE_ROL_TB
ALTER TABLE FIDE_ROL_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_ROL_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_ROL_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_ROL_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_ROL_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_ROL_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_ROL_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_ROL_ESTADO_TRG
BEFORE INSERT ON FIDE_ROL_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--FIDE_METODO_PAGO_TB
ALTER TABLE FIDE_METODO_PAGO_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_METODO_PAGO_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_METODO_PAGO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_METODO_PAGO_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_METODO_PAGO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_METODO_PAGO_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_METODO_PAGO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_METODO_PAGO_ESTADO_TRG
BEFORE INSERT ON FIDE_METODO_PAGO_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;



--FIDE_DESCUENTO_TB
ALTER TABLE FIDE_DESCUENTO_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_DESCUENTO_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DESCUENTO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DESCUENTO_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_DESCUENTO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DESCUENTO_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DESCUENTO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;


--FIDE_DETALLE_FACTURA_TB
ALTER TABLE FIDE_DETALLE_FACTURA_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_DETALLE_FACTURA_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DETALLE_FACTURA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DETALLE_FACTURA_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_DETALLE_FACTURA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DETALLE_FACTURA_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DETALLE_FACTURA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DETALLE_FACTURA_ESTADO_TRG
BEFORE INSERT ON FIDE_DETALLE_FACTURA_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--FIDE_CITA_TB
ALTER TABLE FIDE_CITA_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_CITA_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CITA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_CITA_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_CITA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_CITA_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CITA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_CITA_ESTADO_TRG
BEFORE INSERT ON FIDE_CITA_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--FIDE_INVENTARIO_TB
ALTER TABLE FIDE_INVENTARIO_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_INVENTARIO_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_INVENTARIO_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_INVENTARIO_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_INVENTARIO_ESTADO_TRG
BEFORE INSERT ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--FIDE_EVENTO_TB
ALTER TABLE FIDE_EVENTO_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_EVENTO_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_EVENTO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_EVENTO_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_EVENTO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_EVENTO_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_EVENTO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_EVENTO_ESTADO_TRG
BEFORE INSERT ON FIDE_EVENTO_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--FIDE_TIPO_CURSO_TB
ALTER TABLE FIDE_TIPO_CURSO_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_TIPO_CURSO_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_TIPO_CURSO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_TIPO_CURSO_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_TIPO_CURSO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_TIPO_CURSO_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_TIPO_CURSO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_TIPO_CURSO_ESTADO_TRG
BEFORE INSERT ON FIDE_TIPO_CURSO_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--FIDE_ESTADO_TB
ALTER TABLE FIDE_ESTADO_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_ESTADO_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_ESTADO_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_ESTADO_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_ESTADO_ESTADO_TRG
BEFORE INSERT ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;

--FIDE_PRODUCTO_TB
ALTER TABLE FIDE_PRODUCTO_TB
ADD (
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION DATE,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION DATE,
    ESTADO VARCHAR(10),
    ACCION VARCHAR(100)
);

CREATE OR REPLACE TRIGGER FIDE_PRODUCTO_TB_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PRODUCTO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_PRODUCTO_CREACION_MODIFICACION_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_PRODUCTO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := USER;
    ELSE
        :NEW.MODIFICADO_POR := USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_PRODUCTO_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PRODUCTO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSE
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_PRODUCTO_ESTADO_TRG
BEFORE INSERT ON FIDE_PRODUCTO_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO := 'ACTIVO';
END;





--*************************************************************************************************
-- PAQUETE FUNCIONES
--*************************************************************************************************

--ESPECIFICACIÓN

CREATE OR REPLACE PACKAGE FIDE_FUNCIONES_PKG AS
/*********************** FUNCIONES PARA PROVINCIA **********************/
    FUNCTION FIDE_PROVINCIA_TB_BUSCAR_NOMBRE_X_PROVINCIA_ID_FN(P_PROVINCIA_ID NUMBER)
    RETURN VARCHAR2;

    FUNCTION FIDE_PROVINCIA_TB_BUSCAR_PROVINCIA_X_NOMBRE_FN(P_NOMBRE VARCHAR2)
    RETURN NUMBER;
    
    FUNCTION FIDE_PROVINCIA_TB_LISTA_PROVINICAS_FN
    RETURN SYS.ODCIVARCHAR2LIST;

/*********************** FUNCIONES PARA CANTÓN **********************/
    FUNCTION FIDE_CANTON_TB_NOMBRE_CANTON_FN(P_CANTON_ID NUMBER)
    RETURN VARCHAR2;

    FUNCTION FIDE_CANTON_TB_BUSCAR_NOMBRE_CANTON_FN(P_NOMBRE VARCHAR2)
    RETURN NUMBER;

    FUNCTION FIDE_CANTON_TB_LISTA_CANTONES_FN
    RETURN SYS.ODCIVARCHAR2LIST;

/*********************** FUNCIONES PARA DISTRITO **********************/
    FUNCTION FIDE_DISTRITO_TB_BUSCAR_NOMBRE_X_DISTRITO_ID_FN(P_DISTRITO_ID NUMBER)
    RETURN VARCHAR2;

    FUNCTION FIDE_DISTRITO_TB_BUSCAR_DISTRITO_X_NOMBRE_FN(P_NOMBRE VARCHAR2)
    RETURN NUMBER;

    FUNCTION FIDE_DISTRITO_TB_LISTA_DISTRITOS_FN
    RETURN SYS.ODCIVARCHAR2LIST;

/*********************** FUNCIONES PARA DIRECCIONES **********************/
    FUNCTION FIDE_DIRECCION_TB_CONTAR_POR_PROVINCIA_FN(P_PROVINCIA_ID NUMBER)
    RETURN PROVINCIA_RESULTADO;

    FUNCTION FIDE_DIRECCION_TB_VALIDAR_FN(
        P_PROVINCIA_ID NUMBER,
        P_CANTON_ID NUMBER,
        P_DISTRITO_ID NUMBER
    ) RETURN NUMBER;

    FUNCTION FIDE_DIRECCION_TB_OBTENER_DETALLES_FN(P_DIRECCION_ID NUMBER)
    RETURN VARCHAR2;

    FUNCTION FIDE_DIRECCION_TB_FORMATO_FN(P_DIRECCION_ID NUMBER)
    RETURN VARCHAR2;

/*********************** FUNCIONES PARA ESTADOS **********************/
    FUNCTION FIDE_ESTADO_TB_OBTENER_NOMBRE_FN(P_ESTADO_ID NUMBER)
    RETURN VARCHAR2;

    FUNCTION FIDE_ESTADO_TB_VALIDAR_ACTIVO_FN(P_ESTADO_ID NUMBER)
    RETURN NUMBER;

    FUNCTION FIDE_ESTADO_TB_CONTAR_POR_ESTADO_FN(P_ESTADO_ID NUMBER)
    RETURN NUMBER;

    FUNCTION FIDE_ESTADO_TB_OBTENER_ESTADO_INVERSO_FN(P_ESTADO_ID NUMBER)
    RETURN NUMBER;

/*********************** FUNCIONES PARA ROLES **********************/
 
    FUNCTION FIDE_ROL_TB_VALIDAR_ADMIN_FN(P_ROL_ID NUMBER)
    RETURN NUMBER;

    FUNCTION FIDE_ROL_TB_VALIDAR_USUARIO_FN(P_ROL_ID NUMBER)
    RETURN NUMBER;

    FUNCTION FIDE_ROL_TB_OBTENER_NOMBRE_FN(P_ROL_ID NUMBER)
    RETURN VARCHAR2;
    
    FUNCTION FIDE_USUARIO_TB_VERIFICAR_ACTIVO_FN(P_USUARIO_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_USUARIO_TB_CONTAR_ACTIVOS_FN RETURN NUMBER;
    
    FUNCTION FIDE_USUARIO_TB_VERIFICAR_ROL_FN(P_USUARIO_ID NUMBER, P_ROL_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_USUARIO_TB_OBTENER_NOMBRE_COMPLETO_FN(P_USUARIO_ID NUMBER) RETURN VARCHAR2;

    FUNCTION FIDE_CATEGORIA_TB_EXISTE_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;
    
    FUNCTION FIDE_CATEGORIA_TB_OBTENER_NOMBRE_FN(P_CATEGORIA_ID NUMBER) RETURN VARCHAR2;
    
    FUNCTION FIDE_CATEGORIA_TB_CONTAR_TOTAL_FN RETURN NUMBER;
    
    FUNCTION FIDE_PRODUCTO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;
    
    FUNCTION FIDE_PRODUCTO_TB_OBTENER_PRECIO_FN(P_PRODUCTO_ID NUMBER) RETURN DECIMAL;
    
    FUNCTION FIDE_PRODUCTO_TB_CONTAR_POR_CATEGORIA_FN(P_CATEGORIA_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_PRODUCTO_TB_OBTENER_DESCRIPCION_FN(P_PRODUCTO_ID NUMBER) RETURN VARCHAR2;

    FUNCTION FIDE_INVENTARIO_TB_VERIFICAR_STOCK_FN(P_PRODUCTO_ID NUMBER) RETURN NUMBER;
    

    
    FUNCTION FIDE_INVENTARIO_TB_VERIFICAR_ACTIVO_FN(P_PRODUCTO_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_INVENTARIO_TB_CALCULAR_VALOR_TOTAL_FN(P_PRODUCTO_ID NUMBER) RETURN NUMBER;
    
    FUNCTION FIDE_INVENTARIO_TOTAL_PRODUCTOS_FN RETURN NUMBER;

    FUNCTION FIDE_TIPO_CURSO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;
    
    FUNCTION FIDE_TIPO_CURSO_TB_OBTENER_NOMBRE_FN(P_TIPO_CURSO_ID NUMBER) RETURN VARCHAR2;
    
    FUNCTION FIDE_TIPO_CURSO_TB_CONTAR_FN RETURN NUMBER;
    
    FUNCTION FIDE_TIPO_CURSO_TB_OBTENER_ID_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;

    FUNCTION FIDE_CURSO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;
    
    FUNCTION FIDE_CURSO_TB_OBTENER_ID_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;

    FUNCTION FIDE_SERVICIO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) RETURN NUMBER;
    
    FUNCTION FIDE_SERVICIO_TB_OBTENER_DESCRIPCION_FN(P_SERVICIO_ID NUMBER) RETURN VARCHAR2;
    
    FUNCTION FIDE_SERVICIO_TB_CONTAR_FN RETURN NUMBER;
    
    FUNCTION FIDE_SERVICIO_TB_OBTENER_NOMBRE_FN(P_SERVICIO_ID NUMBER) RETURN VARCHAR2;
    
    FUNCTION FIDE_EVENTO_TB_EXISTE_FN(P_EVENTO_ID NUMBER) RETURN NUMBER;
    
/*********************** FUNCIONES PARA LA TABLA METODO_PAGO **********************/
    FUNCTION FIDE_METODO_PAGO_TB_EXISTE_FN(P_METODO_PAGO_ID NUMBER) RETURN NUMBER;

    FUNCTION FIDE_METODO_PAGO_TB_NOMBRE_FN(P_METODO_PAGO_ID NUMBER) RETURN VARCHAR2;

    FUNCTION FIDE_METODO_PAGO_TB_ASOCIADO_COMPRA_FN(P_METODO_PAGO_ID NUMBER) RETURN NUMBER;

    FUNCTION FIDE_METODO_PAGO_TB_TOTAL_FN RETURN NUMBER;

    /*********************** FUNCIONES PARA LA TABLA DESCUENTOS **********************/
    FUNCTION FIDE_DESCUENTO_TB_PORCENTAJE_FN(P_DESCUENTO_ID NUMBER) RETURN NUMBER;

    FUNCTION FIDE_DESCUENTO_TB_NOMBRE_Y_PORCENTAJE_FN(P_DESCUENTO_ID NUMBER) RETURN VARCHAR2;

    FUNCTION FIDE_DESCUENTO_TB_VALOR_DESCUENTO_FN(P_DESCUENTO_ID NUMBER,P_PRECIO_ORIGINAL NUMBER) RETURN NUMBER;

    FUNCTION FIDE_DESCUENTO_TB_TOTAL_FN RETURN NUMBER;



/*********************** FUNCIONES PARA LA TABLA FACTURA **********************/
 
    FUNCTION FIDE_FACTURA_RESUMEN_FACTURACION_FN(USUARIO_ID_IN NUMBER) RETURN VARCHAR2;
    
    /***/
    FUNCTION FIDE_USUARIO_POR_NAME_FN(user_name VARCHAR2)RETURN SYS_REFCURSOR;
    
     FUNCTION FIDE_USUARIO_TB_VERIFICAR_CREDENCIALES_FN(
    P_CORREO IN VARCHAR2, 
    P_CONTRASENA IN VARCHAR2
)RETURN NUMBER;
    
    
--***Carrito

   -- Función para calcular el subtotal del carrito
    FUNCTION FIDE_CALCULAR_SUBTOTAL_CARRITO_FN(
        p_usuario_id IN NUMBER
    ) RETURN NUMBER;


END FIDE_FUNCIONES_PKG;














--BODY

CREATE OR REPLACE PACKAGE BODY FIDE_FUNCIONES_PKG AS
    
/*********************** FUNCIONES PARA PROVINCIA **********************/

---SELECCIONAR PROVINCIAS POR ID
FUNCTION FIDE_PROVINCIA_TB_BUSCAR_NOMBRE_X_PROVINCIA_ID_FN(P_PROVINCIA_ID NUMBER)
RETURN VARCHAR2 IS 
    V_NOMBRE VARCHAR2(100);
BEGIN
SELECT NOMBRE INTO V_NOMBRE
FROM AdminDB.FIDE_PROVINCIA_TB
WHERE PROVINCIA_ID= P_PROVINCIA_ID;
RETURN V_NOMBRE;
END FIDE_PROVINCIA_TB_BUSCAR_NOMBRE_X_PROVINCIA_ID_FN; 


--SELECCIONAR PROVINCIAS POR NOMBRE 
FUNCTION FIDE_PROVINCIA_TB_BUSCAR_PROVINCIA_X_NOMBRE_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS 
    V_PROVINCIA_ID NUMBER;
BEGIN
SELECT PROVINCIA_ID INTO V_PROVINCIA_ID
FROM AdminDB.FIDE_PROVINCIA_TB
WHERE NOMBRE= P_NOMBRE;
RETURN V_PROVINCIA_ID;
END FIDE_PROVINCIA_TB_BUSCAR_PROVINCIA_X_NOMBRE_FN; 


---ENLISTAR TODAS LAS PROVINCIAS DE LA TABLA 
FUNCTION FIDE_PROVINCIA_TB_LISTA_PROVINICAS_FN
RETURN SYS.ODCIVARCHAR2LIST IS
    V_PROVINCIAS SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    FOR R IN (SELECT NOMBRE FROM AdminDB.FIDE_PROVINCIA_TB) LOOP
        V_PROVINCIAS.EXTEND;
        V_PROVINCIAS(V_PROVINCIAS.COUNT) := R.NOMBRE;
    END LOOP;

    RETURN V_PROVINCIAS;
EXCEPTION
    WHEN OTHERS THEN
        -- Retornar una lista vacía en caso de error
        RETURN SYS.ODCIVARCHAR2LIST();
END FIDE_PROVINCIA_TB_LISTA_PROVINICAS_FN;


/*********************** FUNCIONES PARA CANTON **********************/

--SELECCIONAR CANTON POR ID 
FUNCTION FIDE_CANTON_TB_NOMBRE_CANTON_FN(P_CANTON_ID NUMBER)
RETURN VARCHAR2 IS 
    V_NOMBRE VARCHAR2(100);
BEGIN
SELECT NOMBRE INTO V_NOMBRE
FROM AdminDB.FIDE_CANTON_TB
WHERE CANTON_ID= P_CANTON_ID;
RETURN V_NOMBRE;
END FIDE_CANTON_TB_NOMBRE_CANTON_FN; 


--SELECCIONAR CANTON POR NOMBRE
FUNCTION FIDE_CANTON_TB_BUSCAR_NOMBRE_CANTON_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS 
    V_CANTON_ID NUMBER;
BEGIN
SELECT CANTON_ID INTO V_CANTON_ID
FROM AdminDB.FIDE_CANTON_TB
WHERE NOMBRE= P_NOMBRE;
RETURN V_CANTON_ID;
END FIDE_CANTON_TB_BUSCAR_NOMBRE_CANTON_FN; 

---ENLISTAR TODAS LOS CANTONES DE LA TABLA 
FUNCTION FIDE_CANTON_TB_LISTA_CANTONES_FN
RETURN SYS.ODCIVARCHAR2LIST IS
    V_CANTONES SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    FOR R IN (SELECT NOMBRE FROM AdminDB.FIDE_CANTON_TB) LOOP
        V_CANTONES.EXTEND;
        V_CANTONES(V_CANTONES.COUNT) := R.NOMBRE;
    END LOOP;

    RETURN V_CANTONES;
EXCEPTION
    WHEN OTHERS THEN
        -- Retornar una lista vacía en caso de error
        RETURN SYS.ODCIVARCHAR2LIST();
END FIDE_CANTON_TB_LISTA_CANTONES_FN;

/*********************** FUNCIONES PARA DISTRITO **********************/

---SELECCIONAR DISTRITO POR ID
FUNCTION FIDE_DISTRITO_TB_BUSCAR_NOMBRE_X_DISTRITO_ID_FN(P_DISTRITO_ID NUMBER)
RETURN VARCHAR2 IS 
    V_NOMBRE VARCHAR2(100);
BEGIN
SELECT NOMBRE INTO V_NOMBRE
FROM AdminDB.FIDE_DISTRITO_TB
WHERE DISTRITO_ID= P_DISTRITO_ID;
RETURN V_NOMBRE;
END FIDE_DISTRITO_TB_BUSCAR_NOMBRE_X_DISTRITO_ID_FN; 

--SELECCIONAR DISTRITO POR NOMBRE 
FUNCTION FIDE_DISTRITO_TB_BUSCAR_DISTRITO_X_NOMBRE_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS 
    V_DISTRITO_ID NUMBER;
BEGIN
SELECT DISTRITO_ID INTO V_DISTRITO_ID
FROM AdminDB.FIDE_DISTRITO_TB
WHERE NOMBRE= P_NOMBRE;
RETURN V_DISTRITO_ID;
END FIDE_DISTRITO_TB_BUSCAR_DISTRITO_X_NOMBRE_FN; 

---ENLISTAR TODAS LOS DISTRITOS DE LA TABLA 
FUNCTION FIDE_DISTRITO_TB_LISTA_DISTRITOS_FN
RETURN SYS.ODCIVARCHAR2LIST IS
    V_DISTRITOS SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    FOR R IN (SELECT NOMBRE FROM AdminDB.FIDE_DISTRITO_TB) LOOP
        V_DISTRITOS.EXTEND;
        V_DISTRITOS(V_DISTRITOS.COUNT) := R.NOMBRE;
    END LOOP;

    RETURN V_DISTRITOS;
EXCEPTION
    WHEN OTHERS THEN
        -- Retornar una lista vacía en caso de error
        RETURN SYS.ODCIVARCHAR2LIST();
END FIDE_DISTRITO_TB_LISTA_DISTRITOS_FN;


/*********************** FUNCIONES PARA LA TABLA DIRECCIONES **********************/
---CONTAR DIRECCIONES POR PROVINCIA 

FUNCTION FIDE_DIRECCION_TB_CONTAR_POR_PROVINCIA_FN(P_PROVINCIA_ID NUMBER)
RETURN PROVINCIA_RESULTADO IS
    V_NOMBRE_PROVINCIA VARCHAR2(100);
    V_TOTAL NUMBER;
BEGIN
    -- Obtener el nombre de la provincia
    SELECT NOMBRE
    INTO V_NOMBRE_PROVINCIA
    FROM AdminDB.FIDE_PROVINCIA_TB
    WHERE PROVINCIA_ID = P_PROVINCIA_ID;
    
    -- Contar direcciones
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_DIRECCION_TB
    WHERE PROVINCIA_ID = P_PROVINCIA_ID;
    
    -- Devolver el objeto
    RETURN PROVINCIA_RESULTADO(V_NOMBRE_PROVINCIA, V_TOTAL);
END FIDE_DIRECCION_TB_CONTAR_POR_PROVINCIA_FN;

---VALIDAR LA DIRECCION POR IDS 
FUNCTION FIDE_DIRECCION_TB_VALIDAR_FN(
    P_PROVINCIA_ID NUMBER,
    P_CANTON_ID NUMBER,
    P_DISTRITO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_DIRECCION_TB
    WHERE PROVINCIA_ID = P_PROVINCIA_ID
      AND CANTON_ID = P_CANTON_ID
      AND DISTRITO_ID = P_DISTRITO_ID;

    -- Retornar 1 si existe, 0 si no existe
    RETURN CASE WHEN V_EXISTE > 0 THEN 1 ELSE 0 END;
END FIDE_DIRECCION_TB_VALIDAR_FN;

---OBTENER DETALLE DE DIRECCIONES
FUNCTION FIDE_DIRECCION_TB_OBTENER_DETALLES_FN(
    P_DIRECCION_ID NUMBER
) RETURN VARCHAR2 IS
    V_DETALLES VARCHAR2(400);
BEGIN
    SELECT CONCAT(CONCAT(CONCAT(P.NOMBRE, ', '), C.NOMBRE), CONCAT(', ', CONCAT(D.NOMBRE, ': ')))
           || SENAS
    INTO V_DETALLES
    FROM AdminDB.FIDE_DIRECCION_TB DIR
    JOIN AdminDB.FIDE_PROVINCIA_TB P ON DIR.PROVINCIA_ID = P.PROVINCIA_ID
    JOIN AdminDB.FIDE_CANTON_TB C ON DIR.CANTON_ID = C.CANTON_ID
    JOIN AdminDB.FIDE_DISTRITO_TB D ON DIR.DISTRITO_ID = D.DISTRITO_ID
    WHERE DIR.DIRECCION_ID = P_DIRECCION_ID;

    RETURN V_DETALLES;
END FIDE_DIRECCION_TB_OBTENER_DETALLES_FN;

-------CONCATENAR DIRECCION 
FUNCTION FIDE_DIRECCION_TB_FORMATO_FN(
    P_DIRECCION_ID NUMBER
) RETURN VARCHAR2 IS
    V_FORMATO VARCHAR2(400);
BEGIN
    SELECT P.NOMBRE || ', ' || C.NOMBRE || ', ' || D.NOMBRE || ' - ' || DIR.SENAS
    INTO V_FORMATO
    FROM AdminDB.FIDE_DIRECCION_TB DIR
    JOIN AdminDB.FIDE_PROVINCIA_TB P ON DIR.PROVINCIA_ID = P.PROVINCIA_ID
    JOIN AdminDB.FIDE_CANTON_TB C ON DIR.CANTON_ID = C.CANTON_ID
    JOIN AdminDB.FIDE_DISTRITO_TB D ON DIR.DISTRITO_ID = D.DISTRITO_ID
    WHERE DIR.DIRECCION_ID = P_DIRECCION_ID;

    RETURN V_FORMATO;
END FIDE_DIRECCION_TB_FORMATO_FN;


/*********************** FUNCIONES PARA LA TABLA ESTADOS **********************/
---OBTENER NOMBRE DE ESTADO POR ID 
FUNCTION FIDE_ESTADO_TB_OBTENER_NOMBRE_FN(P_ESTADO_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE_ESTADO VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE_ESTADO
    FROM AdminDB.FIDE_ESTADO_TB
    WHERE ESTADO_ID = P_ESTADO_ID;

    RETURN V_NOMBRE_ESTADO;
END FIDE_ESTADO_TB_OBTENER_NOMBRE_FN;

-----------VALIDA SI ESTA ACTIVO 
FUNCTION FIDE_ESTADO_TB_VALIDAR_ACTIVO_FN(
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
BEGIN
    IF P_ESTADO_ID = 1 THEN
        RETURN 1;  -- Retorna 1 si el estado es "Activo"
    ELSE
        RETURN 0;  -- Retorna 0 si el estado no es "Activo"
    END IF;
END FIDE_ESTADO_TB_VALIDAR_ACTIVO_FN;

--------------CONTAR REGISTROS POR ESTADO
FUNCTION FIDE_ESTADO_TB_CONTAR_POR_ESTADO_FN(P_ESTADO_ID NUMBER) 
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_ESTADO_TB
    WHERE ESTADO_ID = P_ESTADO_ID;

    RETURN V_TOTAL;
END FIDE_ESTADO_TB_CONTAR_POR_ESTADO_FN;

-----------DEVUELVE ESTADO INVERSO 
FUNCTION FIDE_ESTADO_TB_OBTENER_ESTADO_INVERSO_FN(
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
    V_ESTADO_INVERSO NUMBER;
BEGIN
    IF P_ESTADO_ID = 1 THEN
        V_ESTADO_INVERSO := 2; -- Si es Activo, retorna Inactivo
    ELSE
        V_ESTADO_INVERSO := 1; -- Si es Inactivo, retorna Activo
    END IF;

    RETURN V_ESTADO_INVERSO;
END FIDE_ESTADO_TB_OBTENER_ESTADO_INVERSO_FN;

/*********************** FUNCIONES PARA LA TABLA ROL **********************/
---VALIDA SI EL ROL ES ADMIN
FUNCTION FIDE_ROL_TB_VALIDAR_ADMIN_FN(P_ROL_ID NUMBER) 
RETURN NUMBER IS
BEGIN
    IF P_ROL_ID = 1 THEN
        RETURN 1;  -- Retorna 1 si el rol es "Administrador"
    ELSE
        RETURN 0;  -- Retorna 0 si no es "Administrador"
    END IF;
END FIDE_ROL_TB_VALIDAR_ADMIN_FN;

----------VALIDA SI ES USUARIO 
FUNCTION FIDE_ROL_TB_VALIDAR_USUARIO_FN(
    P_ROL_ID NUMBER
) RETURN NUMBER IS
BEGIN
    IF P_ROL_ID = 2 THEN
        RETURN 1;  -- Retorna 1 si el rol es "Usuario"
    ELSE
        RETURN 0;  -- Retorna 0 si no es "Usuario"
    END IF;
END FIDE_ROL_TB_VALIDAR_USUARIO_FN;


---Obtener nombre de rol 
FUNCTION FIDE_ROL_TB_OBTENER_NOMBRE_FN(P_ROL_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE_ROL VARCHAR2(50);
BEGIN
    IF P_ROL_ID = 1 THEN
        V_NOMBRE_ROL := 'Administrador';
    ELSIF P_ROL_ID = 2 THEN
        V_NOMBRE_ROL := 'Usuario';
    ELSE
        V_NOMBRE_ROL := 'Desconocido';  -- En caso de que no sea 1 ni 2
    END IF;

    RETURN V_NOMBRE_ROL;
END FIDE_ROL_TB_OBTENER_NOMBRE_FN;

/*********************** FUNCIONES PARA LA TABLA USUARIOS **********************/

-----VERIFICA SI UN USUARIO ESTÁ ACTIVO
FUNCTION FIDE_USUARIO_TB_VERIFICAR_ACTIVO_FN(P_USUARIO_ID NUMBER) 
RETURN NUMBER IS
    V_ESTADO_ID NUMBER;
BEGIN
    -- Obtener el estado del usuario
    SELECT ESTADO_ID
    INTO V_ESTADO_ID
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    -- Verificar si el usuario está activo (ESTADO_ID = 1)
    IF V_ESTADO_ID = 1 THEN
        RETURN 1;  -- Usuario activo
    ELSE
        RETURN 0;  -- Usuario inactivo
    END IF;
END FIDE_USUARIO_TB_VERIFICAR_ACTIVO_FN;

-----CONTAR CANTIDAD DE USUARIOS ACTIVOS 
FUNCTION FIDE_USUARIO_TB_CONTAR_ACTIVOS_FN 
RETURN NUMBER IS
    V_CANTIDAD_ACTIVOS NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD_ACTIVOS
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE ESTADO_ID = 1;  -- Solo cuenta los usuarios activos

    RETURN V_CANTIDAD_ACTIVOS;
END FIDE_USUARIO_TB_CONTAR_ACTIVOS_FN;

----VALIDA EL ROL DEL USUARIO
FUNCTION FIDE_USUARIO_TB_VERIFICAR_ROL_FN(P_USUARIO_ID NUMBER, P_ROL_ID NUMBER) 
RETURN NUMBER IS
    V_ROL_ID NUMBER;
BEGIN
    -- Verifica si el usuario tiene el rol
    SELECT ROL_ID 
    INTO V_ROL_ID
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    IF V_ROL_ID = P_ROL_ID THEN
        RETURN 1;  -- El usuario tiene el rol especificado (TRUE)
    ELSE
        RETURN 0;  -- El usuario no tiene el rol especificado (FALSE)
    END IF;
END FIDE_USUARIO_TB_VERIFICAR_ROL_FN;

-----OBTENER EL NOMBRE COMPLETO DEL USUARIO 
FUNCTION FIDE_USUARIO_TB_OBTENER_NOMBRE_COMPLETO_FN(
    P_USUARIO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE_COMPLETO VARCHAR2(200);
BEGIN
    SELECT NOMBRE || ' ' || APELLIDO
    INTO V_NOMBRE_COMPLETO
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    RETURN V_NOMBRE_COMPLETO;
END FIDE_USUARIO_TB_OBTENER_NOMBRE_COMPLETO_FN;

/*********************** FUNCIONES PARA LA TABLA CATEGORIA **********************/

----VERIFICA SI CATEGORIA EXISTE POR NOMBRE 
FUNCTION FIDE_CATEGORIA_TB_EXISTE_FN(P_NOMBRE VARCHAR2) 
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_CATEGORIA_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- La categoría existe
    ELSE
        RETURN 0; -- La categoría no existe
    END IF;
END FIDE_CATEGORIA_TB_EXISTE_FN;

----OBTENER CATEGORIA POR ID 
FUNCTION FIDE_CATEGORIA_TB_OBTENER_NOMBRE_FN(P_CATEGORIA_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_CATEGORIA_TB
    WHERE CATEGORIA_ID = P_CATEGORIA_ID;

    RETURN V_NOMBRE;
END FIDE_CATEGORIA_TB_OBTENER_NOMBRE_FN;

---CONTAR TOTAL DE CATEGORIAS 
FUNCTION FIDE_CATEGORIA_TB_CONTAR_TOTAL_FN 
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_CATEGORIA_TB;

    RETURN V_TOTAL;
END FIDE_CATEGORIA_TB_CONTAR_TOTAL_FN;

/*********************** FUNCIONES PARA PRODUCTOS **********************/
FUNCTION FIDE_PRODUCTO_TB_EXISTE_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- El producto existe
    ELSE
        RETURN 0; -- El producto no existe
    END IF;
END FIDE_PRODUCTO_TB_EXISTE_FN;

----OBTENER PRECIO DE UN PRODUCTO X ID 
FUNCTION FIDE_PRODUCTO_TB_OBTENER_PRECIO_FN(P_PRODUCTO_ID NUMBER)
RETURN DECIMAL IS
    V_PRECIO DECIMAL(10, 2);
BEGIN
    SELECT PRECIO_UNIT
    INTO V_PRECIO
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    RETURN V_PRECIO;
END FIDE_PRODUCTO_TB_OBTENER_PRECIO_FN;

---CONTAR PRODUCTOS POR CATEGORÍA 
FUNCTION FIDE_PRODUCTO_TB_CONTAR_POR_CATEGORIA_FN(P_CATEGORIA_ID NUMBER)
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE CATEGORIA_ID = P_CATEGORIA_ID;

    RETURN V_COUNT;
END FIDE_PRODUCTO_TB_CONTAR_POR_CATEGORIA_FN;


---OBTENER DESCRIPCION DEL PRODUCTO 
FUNCTION FIDE_PRODUCTO_TB_OBTENER_DESCRIPCION_FN(P_PRODUCTO_ID NUMBER)
RETURN VARCHAR2 IS
    V_DESCRIPCION VARCHAR2(250);
BEGIN
    SELECT DESCRIPCION
    INTO V_DESCRIPCION
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    RETURN V_DESCRIPCION;
END FIDE_PRODUCTO_TB_OBTENER_DESCRIPCION_FN;

/*********************** FUNCIONES PARA LA TABLA INVENTARIO **********************/

---VERIFICA SI UN PRODUCTO ESTA EN STOCK 
FUNCTION FIDE_INVENTARIO_TB_VERIFICAR_STOCK_FN(
    P_PRODUCTO_ID NUMBER
) RETURN NUMBER IS
    V_STOCK NUMBER;
BEGIN
    SELECT STOCK 
    INTO V_STOCK
    FROM AdminDB.FIDE_INVENTARIO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    IF V_STOCK > 0 THEN
        RETURN 1; -- Hay stock disponible
    ELSE
        RETURN 0; -- No hay stock
    END IF;
END FIDE_INVENTARIO_TB_VERIFICAR_STOCK_FN;




---VERIFICA SI EL PRODUCTO ESTA ACTIVO EN EL INVENTARIO
FUNCTION FIDE_INVENTARIO_TB_VERIFICAR_ACTIVO_FN(
    P_PRODUCTO_ID NUMBER
) RETURN NUMBER IS
    V_ESTADO_ID NUMBER;
BEGIN
    SELECT ESTADO_ID
    INTO V_ESTADO_ID
    FROM AdminDB.FIDE_INVENTARIO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    IF V_ESTADO_ID = 1 THEN
        RETURN 1; -- Producto activo
    ELSE
        RETURN 0; -- Producto inactivo
    END IF;
END FIDE_INVENTARIO_TB_VERIFICAR_ACTIVO_FN;

---CLACULA VALOR TOTAL DEL PRODUCTO EN EL INVENTARIO 
FUNCTION FIDE_INVENTARIO_TB_CALCULAR_VALOR_TOTAL_FN(
    P_PRODUCTO_ID NUMBER
) RETURN NUMBER IS
    V_VALOR_TOTAL NUMBER;
BEGIN
    SELECT I.STOCK * P.PRECIO_UNIT
    INTO V_VALOR_TOTAL
    FROM AdminDB.FIDE_INVENTARIO_TB I
    JOIN AdminDB.FIDE_PRODUCTO_TB P
    ON I.PRODUCTO_ID = P.PRODUCTO_ID
    WHERE I.PRODUCTO_ID = P_PRODUCTO_ID;

    RETURN V_VALOR_TOTAL;
END FIDE_INVENTARIO_TB_CALCULAR_VALOR_TOTAL_FN;


FUNCTION FIDE_INVENTARIO_TOTAL_PRODUCTOS_FN RETURN NUMBER IS
        v_total NUMBER;
    BEGIN
        SELECT SUM(STOCK) INTO v_total FROM FIDE_INVENTARIO_TB;
        RETURN v_total;
    END FIDE_INVENTARIO_TOTAL_PRODUCTOS_FN;


/*********************** FUNCIONES PARA LA TABLA TIPO_CURSO **********************/

---VERIFICA SI EL TIPO DE CURSO EXISTE 
FUNCTION FIDE_TIPO_CURSO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) 
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_TIPO_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- El curso existe
    ELSE
        RETURN 0; -- El curso no existe
    END IF;
END FIDE_TIPO_CURSO_TB_EXISTE_FN;


---OBTENER NOMBRE DEL CURSO POR ID 
FUNCTION FIDE_TIPO_CURSO_TB_OBTENER_NOMBRE_FN(P_TIPO_CURSO_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_TIPO_CURSO_TB
    WHERE TIPO_CURSO_ID = P_TIPO_CURSO_ID;

    RETURN V_NOMBRE;
END FIDE_TIPO_CURSO_TB_OBTENER_NOMBRE_FN;


-----CONTAR LOS CURSOS REGISTRADOS 
FUNCTION FIDE_TIPO_CURSO_TB_CONTAR_FN
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_TIPO_CURSO_TB;

    RETURN V_COUNT;
END FIDE_TIPO_CURSO_TB_CONTAR_FN;

------- OBTENER ID DE CURSO POR NOMBRE 
FUNCTION FIDE_TIPO_CURSO_TB_OBTENER_ID_FN(
    P_NOMBRE VARCHAR2
) RETURN NUMBER IS
    V_TIPO_CURSO_ID NUMBER;
BEGIN
    SELECT TIPO_CURSO_ID
    INTO V_TIPO_CURSO_ID
    FROM AdminDB.FIDE_TIPO_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    RETURN V_TIPO_CURSO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- El curso no existe
END FIDE_TIPO_CURSO_TB_OBTENER_ID_FN;


/*********************** FUNCIONES PARA LA TABLA CURSO **********************/

----VERIFICA SI EXISTE POR NOMBRE 
FUNCTION FIDE_CURSO_TB_EXISTE_FN(
    P_NOMBRE VARCHAR2
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- El curso existe
    ELSE
        RETURN 0; -- El curso no existe
    END IF;
END FIDE_CURSO_TB_EXISTE_FN;

---------OBTENER ID DE CURSO 
FUNCTION FIDE_CURSO_TB_OBTENER_ID_FN(P_NOMBRE VARCHAR2) RETURN NUMBER IS
    V_CURSO_ID NUMBER;
BEGIN
    SELECT CURSO_ID
    INTO V_CURSO_ID
    FROM AdminDB.FIDE_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    RETURN V_CURSO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- El curso no existe
END FIDE_CURSO_TB_OBTENER_ID_FN;

/*********************** FUNCIONES PARA LA TABLA SERVICIO **********************/

-----VERIFICA SI EL SERVICIO EXISTE
FUNCTION FIDE_SERVICIO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) 
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_SERVICIO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    RETURN CASE
        WHEN V_COUNT > 0 THEN 1 -- Existe
        ELSE 0 -- No existe
    END;
END FIDE_SERVICIO_TB_EXISTE_FN;

-----OBTENER DESCRIPCION DE SERVICIO POR ID
FUNCTION FIDE_SERVICIO_TB_OBTENER_DESCRIPCION_FN(P_SERVICIO_ID NUMBER) 
RETURN VARCHAR2 IS
    V_DESCRIPCION VARCHAR2(250);
BEGIN
    SELECT DESCRIPCION
    INTO V_DESCRIPCION
    FROM AdminDB.FIDE_SERVICIO_TB
    WHERE SERVICIO_ID = P_SERVICIO_ID;

    RETURN V_DESCRIPCION;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Servicio no encontrado';
END FIDE_SERVICIO_TB_OBTENER_DESCRIPCION_FN;

---CONTAR LOS SERVICIOS DE LA TABLA
FUNCTION FIDE_SERVICIO_TB_CONTAR_FN
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_SERVICIO_TB;

    RETURN V_TOTAL;
END FIDE_SERVICIO_TB_CONTAR_FN;


---OBTENER NOMBRE DEL SERVICIO POR ID 
FUNCTION FIDE_SERVICIO_TB_OBTENER_NOMBRE_FN(
    P_SERVICIO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_SERVICIO_TB
    WHERE SERVICIO_ID = P_SERVICIO_ID;

    RETURN V_NOMBRE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Servicio no encontrado';
END FIDE_SERVICIO_TB_OBTENER_NOMBRE_FN;

/*********************** FUNCIONES PARA LA TABLA EVENTO **********************/

----VERIFICA SI EXISTE EL EVENTO
FUNCTION FIDE_EVENTO_TB_EXISTE_FN(
    P_EVENTO_ID NUMBER
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE EVENTO_ID = P_EVENTO_ID;

    RETURN CASE
        WHEN V_COUNT > 0 THEN 1 -- Existe
        ELSE 0 -- No existe
    END;
END FIDE_EVENTO_TB_EXISTE_FN;

------OBTENER ESTADO DEL EVENTO POR ID 
FUNCTION FIDE_EVENTO_TB_OBTENER_ESTADO_FN(P_EVENTO_ID NUMBER) 
RETURN NUMBER IS
    V_ESTADO_ID NUMBER;
BEGIN
    SELECT ESTADO_ID
    INTO V_ESTADO_ID
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE EVENTO_ID = P_EVENTO_ID;

    RETURN V_ESTADO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- Evento no encontrado
END FIDE_EVENTO_TB_OBTENER_ESTADO_FN;

---------CONTAR EVENTOS PROGRAMAS EN LA MISMA FECHA 
FUNCTION FIDE_EVENTO_TB_CONTAR_POR_FECHA_FN(
    P_FECHA DATE
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE FECHA = P_FECHA;

    RETURN V_COUNT;
END FIDE_EVENTO_TB_CONTAR_POR_FECHA_FN;

---FUNCION PARA OBTENER EL SERVICIO DE UN EVENTO
FUNCTION FIDE_EVENTO_TB_OBTENER_SERVICIO_FN(
    P_EVENTO_ID NUMBER
) RETURN NUMBER IS
    V_SERVICIO_ID NUMBER;
BEGIN
    SELECT SERVICIO_ID
    INTO V_SERVICIO_ID
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE EVENTO_ID = P_EVENTO_ID;

    RETURN V_SERVICIO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- Evento no encontrado
END FIDE_EVENTO_TB_OBTENER_SERVICIO_FN;


----OBTENER EVENTOS PROGRAMADOS POR USUARIO
FUNCTION FIDE_EVENTO_TB_CONTAR_POR_USUARIO_FN(
    P_USUARIO_ID NUMBER
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    RETURN V_COUNT;
END FIDE_EVENTO_TB_CONTAR_POR_USUARIO_FN;


/*********************** FUNCIONES PARA LA TABLA CITAS **********************/

---OBTENER TOTAL DE CITAS POR ESTADO 
FUNCTION FIDE_CITA_TB_CITAS_POR_ESTADO_FN(
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
    V_CANTIDAD NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD
    FROM AdminDB.FIDE_CITA_TB
    WHERE ESTADO_ID = P_ESTADO_ID;

    RETURN V_CANTIDAD;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_CITA_TB_CITAS_POR_ESTADO_FN;

-------OBTENER LAS CITAS POR USUARIOS
FUNCTION FIDE_CITA_TB_CITAS_POR_USUARIO_FN(
    P_USUARIO_ID NUMBER
) RETURN NUMBER IS
    V_CANTIDAD NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD
    FROM AdminDB.FIDE_CITA_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    RETURN V_CANTIDAD;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_CITA_TB_CITAS_POR_USUARIO_FN;


----VERIFICA SI EL USUARIO TIENE CITAS
FUNCTION FIDE_CITA_TB_TIENES_CITAS_FUTURAS_FN(
    P_USUARIO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_CITA_TB
    WHERE USUARIO_ID = P_USUARIO_ID AND FECHA > SYSDATE;

    IF V_EXISTE > 0 THEN
        RETURN 1; -- Tiene citas futuras
    ELSE
        RETURN 0; -- No tiene citas futuras
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_CITA_TB_TIENES_CITAS_FUTURAS_FN;

----VERIFICA EL ESTADO DE LA CITA DE UN SERVICIO 
FUNCTION FIDE_CITA_TB_ESTADO_POR_SERVICIO_FN(
    P_SERVICIO_ID NUMBER,
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
    V_CANTIDAD NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD
    FROM AdminDB.FIDE_CITA_TB
    WHERE SERVICIO_ID = P_SERVICIO_ID AND ESTADO_ID = P_ESTADO_ID;

    RETURN V_CANTIDAD;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_CITA_TB_ESTADO_POR_SERVICIO_FN;


/*********************** FUNCIONES PARA LA TABLA METODO_PAGO **********************/

----VERIFICA SI EXISTE METODO DE PAGO POR ID 
FUNCTION FIDE_METODO_PAGO_TB_EXISTE_FN(
    P_METODO_PAGO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_METODO_PAGO_TB
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;

    IF V_EXISTE > 0 THEN
        RETURN 1; -- El método de pago existe
    ELSE
        RETURN 0; -- El método de pago no existe
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_METODO_PAGO_TB_EXISTE_FN;


---------OBTENER NOMBRE DE UN METODO DE PAGO 
FUNCTION FIDE_METODO_PAGO_TB_NOMBRE_FN(
    P_METODO_PAGO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_METODO_PAGO_TB
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;

    RETURN V_NOMBRE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Método de pago no encontrado'; -- No se encontró el método
    WHEN OTHERS THEN
        RETURN 'Error inesperado'; -- Error inesperado
END FIDE_METODO_PAGO_TB_NOMBRE_FN;

-----VERIFICA SI UN METODO ESTA ASOCIADO A UNA COMPRA
FUNCTION FIDE_METODO_PAGO_TB_ASOCIADO_COMPRA_FN(
    P_METODO_PAGO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_FACTURA_TB
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;

    IF V_EXISTE > 0 THEN
        RETURN 1; -- El método de pago está asociado a una compra
    ELSE
        RETURN 0; -- El método de pago no está asociado a ninguna compra
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_METODO_PAGO_TB_ASOCIADO_COMPRA_FN;

-----OBTENER TOTAL DE METODOS DE PAGO 
FUNCTION FIDE_METODO_PAGO_TB_TOTAL_FN
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_METODO_PAGO_TB;

    RETURN V_TOTAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_METODO_PAGO_TB_TOTAL_FN;

/*********************** FUNCIONES PARA LA TABLA DESCUENTOS **********************/

----OBTENER EL PORCENTAJE DE DESCUENTO POR ID 
FUNCTION FIDE_DESCUENTO_TB_PORCENTAJE_FN(
    P_DESCUENTO_ID NUMBER
) RETURN NUMBER IS
    V_PORCENTAJE NUMBER;
BEGIN
    SELECT PORCENTAJE
    INTO V_PORCENTAJE
    FROM AdminDB.FIDE_DESCUENTO_TB
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;

    RETURN V_PORCENTAJE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN -1; -- No se encontró el descuento
    WHEN OTHERS THEN
        RETURN -2; -- Error inesperado
END FIDE_DESCUENTO_TB_PORCENTAJE_FN;

-------OBTENER NOMBRE Y PORCENTAJE DE DESCUENTO
FUNCTION FIDE_DESCUENTO_TB_NOMBRE_Y_PORCENTAJE_FN(
    P_DESCUENTO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
    V_PORCENTAJE NUMBER;
BEGIN
    SELECT NOMBRE, PORCENTAJE
    INTO V_NOMBRE, V_PORCENTAJE
    FROM AdminDB.FIDE_DESCUENTO_TB
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;

    RETURN 'Nombre: ' || V_NOMBRE || ', Porcentaje: ' || V_PORCENTAJE || '%';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Descuento no encontrado';
    WHEN OTHERS THEN
        RETURN 'Error inesperado';
END FIDE_DESCUENTO_TB_NOMBRE_Y_PORCENTAJE_FN;

----CALCULAR EL DESCUENTO SOBRE EL PRECIO 
FUNCTION FIDE_DESCUENTO_TB_VALOR_DESCUENTO_FN(
    P_DESCUENTO_ID NUMBER,
    P_PRECIO_ORIGINAL NUMBER
) RETURN NUMBER IS
    V_PORCENTAJE NUMBER;
    V_DESCUENTO_VALUE NUMBER;
BEGIN
    -- Obtener el porcentaje del descuento
    SELECT PORCENTAJE
    INTO V_PORCENTAJE
    FROM AdminDB.FIDE_DESCUENTO_TB
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;

    -- Calcular el valor del descuento
    V_DESCUENTO_VALUE := P_PRECIO_ORIGINAL * (V_PORCENTAJE / 100);

    RETURN V_DESCUENTO_VALUE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN -1; -- Descuento no encontrado
    WHEN OTHERS THEN
        RETURN -2; -- Error inesperado
END FIDE_DESCUENTO_TB_VALOR_DESCUENTO_FN;

---- OBTENER TODOS LOS DESCUENTOS DISPONIBLES 
FUNCTION FIDE_DESCUENTO_TB_TOTAL_FN
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_DESCUENTO_TB;

    RETURN V_TOTAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END FIDE_DESCUENTO_TB_TOTAL_FN;





/*********************** FUNCIONES PARA EL DETALLE DE FACTURA**********************/
FUNCTION FIDE_DETALLE_FACTURA_CALCULAR_TOTAL_FN(
    p_detalle_factura_id IN NUMBER
) RETURN NUMBER IS
    v_total NUMBER;
BEGIN
    SELECT SUM(CANTIDAD_LINEAS * TOTAL_POR_LINEA)
    INTO v_total
    FROM AdminDB.FIDE_DETALLE_FACTURA_TB
    WHERE DETALLE_FACTURA_ID = p_detalle_factura_id;

    RETURN v_total;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0; -- Retornar 0 si no se encuentra la factura
END FIDE_DETALLE_FACTURA_CALCULAR_TOTAL_FN;

---obtener detalle de factura 
FUNCTION FIDE_DETALLE_FACTURA_OBTENER_FN(
    p_detalle_factura_id IN NUMBER
) RETURN VARCHAR2 IS
    v_resultado VARCHAR2(4000);
BEGIN
    SELECT LISTAGG('Línea: ' || CANTIDAD_LINEAS || ', Total: ' || TOTAL_POR_LINEA, '; ')
           WITHIN GROUP (ORDER BY DETALLE_FACTURA_ID)
    INTO v_resultado
    FROM AdminDB.FIDE_DETALLE_FACTURA_TB
    WHERE DETALLE_FACTURA_ID = p_detalle_factura_id;

    RETURN v_resultado;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'No se encontraron detalles para la factura especificada.';
END FIDE_DETALLE_FACTURA_OBTENER_FN;



---- OBTENER RESUMEN DE FACTURACION 
FUNCTION FIDE_FACTURA_RESUMEN_FACTURACION_FN(USUARIO_ID_IN NUMBER)
RETURN VARCHAR2 IS
    resumen VARCHAR2(200);
    total_facturas NUMBER;
    monto_total NUMBER;
    promedio_facturacion NUMBER;
BEGIN
    SELECT COUNT(*), SUM(MONTO_TOTAL), AVG(MONTO_TOTAL)
    INTO total_facturas, monto_total, promedio_facturacion
    FROM AdminDB.FIDE_FACTURA_TB
    WHERE USUARIO_ID = USUARIO_ID_IN;

    resumen := 'Usuario ' || USUARIO_ID_IN || ': Total Facturas = ' || total_facturas || 
               ', Monto Total = ' || monto_total || 
               ', Promedio = ' || promedio_facturacion;
               
    RETURN resumen;
END FIDE_FACTURA_RESUMEN_FACTURACION_FN;





FUNCTION FIDE_USUARIO_POR_NAME_FN(user_name VARCHAR2)RETURN SYS_REFCURSOR
AS
    CDATOS SYS_REFCURSOR;
BEGIN
    FIDE_PROCEDIMIENTOS_PKG.FIDE_USUARIO_GET(user_name,CDATOS);

    RETURN CDATOS;
END FIDE_USUARIO_POR_NAME_FN;



FUNCTION FIDE_CALCULAR_SUBTOTAL_CARRITO_FN(
    p_usuario_id IN NUMBER
) RETURN NUMBER IS
    v_subtotal NUMBER;
BEGIN
    SELECT NVL(SUM(c.CANTIDAD * p.PRECIO_UNIT), 0) INTO v_subtotal
    FROM FIDE_CARRITO_TB c
    JOIN FIDE_PRODUCTO_TB p ON c.PRODUCTO_ID = p.PRODUCTO_ID
    WHERE c.USUARIO_ID = p_usuario_id;

    RETURN v_subtotal;
    
FUNCTION FIDE_USUARIO_TB_VERIFICAR_CREDENCIALES_FN(
    P_CORREO IN VARCHAR2, 
    P_CONTRASENA IN VARCHAR2
)
RETURN NUMBER IS
    V_COUNT INTEGER;
BEGIN
    SELECT COUNT(*) INTO V_COUNT
    FROM FIDE_USUARIO_TB
    WHERE CORREO = P_CORREO AND CONTRASENA = P_CONTRASENA;

    IF V_COUNT > 0 THEN
        RETURN 1;  -- Las credenciales son correctas
    ELSE
        RETURN 0;  -- Las credenciales no son correctas
    END IF;
END FIDE_USUARIO_TB_VERIFICAR_CREDENCIALES_FN;    
    
END FIDE_CALCULAR_SUBTOTAL_CARRITO_FN;



END FIDE_FUNCIONES_PKG;

--*************************************************************************************************
-- PAQUETE PROCEDIMIENTOS
--*************************************************************************************************

--ESPECIFICACIÓN
CREATE OR REPLACE PACKAGE FIDE_PROCEDIMIENTOS_PKG AS
/*********************** CRUD CITAS **********************/

    PROCEDURE FIDE_CITA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_INSERTAR_CITA_SP(
        P_USUARIO_ID IN NUMBER,
        P_SERVICIO_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_FECHA IN DATE,
        P_HORA IN VARCHAR2
    );
    
    PROCEDURE FIDE_MODIFICAR_CITA_SP(
        P_CITA_ID IN NUMBER, 
        P_USUARIO_ID IN NUMBER,
        P_SERVICIO_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_FECHA IN DATE,
        P_HORA IN VARCHAR2
    );
    
    PROCEDURE FIDE_ELIMINAR_CITA_SP(P_CITA_ID IN NUMBER);

/*********************** CRUD EVENTOS **********************/

    PROCEDURE FIDE_EVENTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_INSERTAR_EVENTO_SP(
        P_USUARIO_ID IN NUMBER,
        P_SERVICIO_ID IN NUMBER,
        P_DIRECCION_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_FECHA IN DATE
    );

    PROCEDURE FIDE_ACTUALIZAR_EVENTO_SP(
        P_EVENTO_ID IN NUMBER,
        P_USUARIO_ID IN NUMBER,
        P_SERVICIO_ID IN NUMBER,
        P_DIRECCION_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_FECHA IN DATE
    );

    PROCEDURE FIDE_ELIMINAR_EVENTO_SP(P_EVENTO_ID IN NUMBER);

/*********************** CRUD PROVINCIA **********************/

    PROCEDURE FIDE_PROVINCIA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);
    
    PROCEDURE FIDE_INSERTAR_PROVINCIA_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_ACTUALIZAR_PROVINCIA_SP(
        P_PROVINCIA_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_ELIMINAR_PROVINCIA_SP(P_PROVINCIA_ID IN NUMBER);

/*********************** CRUD CANTON **********************/

    PROCEDURE FIDE_CANTON_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_CANTON_TB_INSERTAR_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_CANTON_TB_ACTUALIZAR_SP(
        P_CANTON_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_CANTON_TB_ELIMINAR_SP(P_CANTON_ID IN NUMBER);

/*********************** CRUD DISTRITO **********************/

    PROCEDURE FIDE_DISTRITO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DISTRITO_TB_INSERTAR_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_DISTRITO_TB_ACTUALIZAR_SP(
        P_DISTRITO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_DISTRITO_TB_ELIMINAR_SP(P_DISTRITO_ID IN NUMBER);

/***********************CRUD DIRECCION**********************/

    PROCEDURE FIDE_DIRECCION_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DIRECCION_TB_INSERTAR_SP(
        P_SENAS IN VARCHAR2,
        P_PROVINCIA_ID IN NUMBER,
        P_DISTRITO_ID IN NUMBER,
        P_CANTON_ID IN NUMBER
    );

    PROCEDURE FIDE_DIRECCION_TB_ACTUALIZAR_SP(
        P_DIRECCION_ID IN NUMBER,
        P_SENAS IN VARCHAR2,
        P_PROVINCIA_ID IN NUMBER,
        P_DISTRITO_ID IN NUMBER,
        P_CANTON_ID IN NUMBER
    );

    PROCEDURE FIDE_DIRECCION_TB_ELIMINAR_SP(P_DIRECCION_ID IN NUMBER);

/***********************CRUD ESTADO**********************/

    PROCEDURE FIDE_ESTADO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_ESTADO_TB_INSERTAR_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_ESTADO_TB_ACTUALIZAR_SP(P_ESTADO_ID IN NUMBER, P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_ESTADO_TB_ELIMINAR_SP(P_ESTADO_ID IN NUMBER);

/***********************CRUD ROL**********************/

    PROCEDURE FIDE_ROL_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_ROL_TB_INSERTAR_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_ROL_TB_ACTUALIZAR_SP(P_ROL_ID IN NUMBER, P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_ROL_TB_ELIMINAR_SP(P_ROL_ID IN NUMBER);

/***********************CRUD USUARIO**********************/

    PROCEDURE FIDE_USUARIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_USUARIO_TB_INSERTAR_SP(
        P_NOMBRE IN VARCHAR2,
        P_APELLIDO IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_CONTRASENA IN VARCHAR2,
        P_USERNAME IN VARCHAR2,
        P_DIRECCION_ID IN NUMBER,
        P_ROL_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER
    );

    PROCEDURE FIDE_USUARIO_TB_ELIMINAR_SP(P_USUARIO_ID IN NUMBER);

/***********************CRUD INVENTARIO**********************/

    PROCEDURE FIDE_INVENTARIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_INVENTARIO_TB_INSERT_SP(
        P_STOCK IN NUMBER,
        P_DIAS_EN_STOCK IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_PRODUCTO_ID IN NUMBER
    );

    PROCEDURE FIDE_INVENTARIO_TB_ACTUALIZAR_SP(
        P_INVENTARIO_ID IN NUMBER,
        P_STOCK IN NUMBER,
        P_DIAS_EN_STOCK IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_PRODUCTO_ID IN NUMBER
    );

    PROCEDURE FIDE_INVENTARIO_TB_ELIMINAR_SP(P_INVENTARIO_ID IN NUMBER);

/***********************CRUD TIPO_CURSO**********************/

    PROCEDURE FIDE_TIPO_CURSO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_TIPO_CURSO_TB_INSERTAR_SP(
        P_TIPO_CURSO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_TIPO_CURSO_TB_ACTUALIZAR_SP(P_TIPO_CURSO_ID IN NUMBER, P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_TIPO_CURSO_TB_ELIMINAR_SP(P_TIPO_CURSO_ID IN NUMBER);

/***********************CRUD CURSO**********************/

    PROCEDURE FIDE_CURSO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_CURSO_TB_INSERTAR_SP(
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_FECHA IN DATE,
        P_HORA IN VARCHAR2,
        P_IMAGEN IN VARCHAR2,
        P_PRECIO IN DECIMAL,
        P_CAPACIDAD IN NUMBER,
        P_TIPO_CURSO_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_DIRECCION_ID IN NUMBER
    );

    PROCEDURE FIDE_CURSO_TB_ACTUALIZAR_SP(
        P_CURSO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_FECHA IN DATE,
        P_HORA IN VARCHAR2,
        P_IMAGEN IN VARCHAR2,
        P_PRECIO IN DECIMAL,
        P_CAPACIDAD IN NUMBER,
        P_TIPO_CURSO_ID IN NUMBER,
        P_ESTADO_ID IN NUMBER,
        P_DIRECCION_ID IN NUMBER
    );

    PROCEDURE FIDE_CURSO_TB_ELIMINAR_SP(P_CURSO_ID IN NUMBER);

/***********************CRUD METODO_PAGO**********************/

    PROCEDURE FIDE_METODO_PAGO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_METODO_PAGO_TB_INSERTAR_SP(P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_METODO_PAGO_TB_ACTUALIZAR_SP(P_METODO_PAGO_ID IN NUMBER, P_NOMBRE IN VARCHAR2);

    PROCEDURE FIDE_METODO_PAGO_TB_ELIMINAR_SP(P_METODO_PAGO_ID IN NUMBER);

/***********************CRUD DESCUENTO**********************/

    PROCEDURE FIDE_DESCUENTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DESCUENTO_TB_INSERTAR_SP(
        P_NOMBRE IN VARCHAR2,
        P_PORCENTAJE IN DECIMAL,
        P_ESTADO IN VARCHAR2
    );

    PROCEDURE FIDE_DESCUENTO_TB_ACTUALIZAR_SP(
        P_DESCUENTO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_PORCENTAJE IN DECIMAL,
        P_ESTADO IN VARCHAR2
    );

    PROCEDURE FIDE_DESCUENTO_TB_ELIMINAR_SP(
        P_DESCUENTO_ID IN NUMBER
    );



/***********************CRUD DETALLE_FACTURA**********************/

    PROCEDURE FIDE_DETALLE_FACTURA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DETALLE_FACTURA_TB_INSERTAR_SP(
        P_CANTIDAD_LINEAS IN NUMBER,
        P_TOTAL_POR_LINEA IN NUMBER,
        P_PRODUCTO_ID IN NUMBER
    );

    PROCEDURE FIDE_DETALLE_FACTURA_TB_ACTUALIZAR_SP(
        P_DETALLE_FACTURA_ID IN NUMBER,
        P_CANTIDAD_LINEAS IN NUMBER,
        P_TOTAL_POR_LINEA IN NUMBER,
        P_PRODUCTO_ID IN NUMBER
    );

    PROCEDURE FIDE_DETALLE_FACTURA_TB_ELIMINAR_SP(
        P_DETALLE_FACTURA_ID IN NUMBER
    );

/***********************CRUD FACTURA**********************/

    PROCEDURE FIDE_FACTURA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_FACTURA_TB_INSERTAR_SP(
        P_USUARIO_ID IN NUMBER,
        P_FECHA IN DATE,
        P_DETALLE_FACTURA_ID IN NUMBER,
        P_DESCUENTO_ID IN NUMBER,
        P_IVA IN DECIMAL,
        P_SUBTOTAL IN DECIMAL,
        P_MONTO_TOTAL IN DECIMAL,
        P_METODO_PAGO_ID IN NUMBER
    );

    PROCEDURE FIDE_FACTURA_TB_ACTUALIZAR_SP(
        P_FACTURA_ID IN NUMBER,
        P_USUARIO_ID IN NUMBER,
        P_FECHA IN DATE,
        P_DETALLE_FACTURA_ID IN NUMBER,
        P_DESCUENTO_ID IN NUMBER,
        P_IVA IN DECIMAL,
        P_SUBTOTAL IN DECIMAL,
        P_MONTO_TOTAL IN DECIMAL,
        P_METODO_PAGO_ID IN NUMBER
    );

    PROCEDURE FIDE_FACTURA_TB_ELIMINAR_SP(
        P_FACTURA_ID IN NUMBER
    );


/***********************CRUD CATEGORIA**********************/

    PROCEDURE FIDE_CATEGORIA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_CATEGORIA_TB_INSERTAR_SP (
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_CATEGORIA_ACTUALIZAR_SP(
        P_CATEGORIA_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2
    );

    PROCEDURE FIDE_CATEGORIA_ELIMINAR_SP(P_CATEGORIA_ID IN NUMBER);

    
/***********************CRUD PRODUCTO**********************/

    PROCEDURE FIDE_PRODUCTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_PRODUCTO_TB_INSERTAR_SP (
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_IMAGEN IN VARCHAR2,
        P_PRECIO_UNIT IN NUMBER,
        P_CATEGORIA_ID IN NUMBER
    );

    PROCEDURE FIDE_PRODUCTO_ACTUALIZAR_SP(
        P_PRODUCTO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_IMAGEN IN VARCHAR2,
        P_PRECIO_UNIT IN NUMBER,
        P_CATEGORIA_ID IN NUMBER
    );

    PROCEDURE FIDE_PRODUCTO_ELIMINAR_SP(P_PRODUCTO_ID IN NUMBER);

/***********************CRUD SERVICIO**********************/

    PROCEDURE FIDE_SERVICIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_SERVICIO_TB_INSERTAR_SP (
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_IMAGEN IN VARCHAR2
    );

    PROCEDURE FIDE_SERVICIO_ACTUALIZAR_SP(
        P_SERVICIO_ID IN NUMBER,
        P_NOMBRE IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_IMAGEN IN VARCHAR2
    );

    PROCEDURE FIDE_SERVICIO_ELIMINAR_SP(P_SERVICIO_ID IN NUMBER);
    
/***********************REGISTROS POR ID**********************/

    -- INVENTARIO
    PROCEDURE FIDE_INVENTARIO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );

    -- PRODUCTO
    PROCEDURE FIDE_PRODUCTO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );

    -- CATEGORIA
    PROCEDURE FIDE_CATEGORIA_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );

    -- SERVICIO
    PROCEDURE FIDE_SERVICIO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
     -- ESTADO
    PROCEDURE FIDE_ESTADO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
     -- TIPO_CURSO
    PROCEDURE FIDE_TIPO_CURSO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
     -- DIRECCION
    PROCEDURE FIDE_DIRECCION_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
     -- CURSO
    PROCEDURE FIDE_CURSO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
    -- DESCUENTO
    PROCEDURE FIDE_DESCUENTO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
    -- CITA
    PROCEDURE FIDE_CITA_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
     -- FACTURA
    PROCEDURE FIDE_FACTURA_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
     -- USUARIO
    PROCEDURE FIDE_USUARIO_TB_GET_BY_ID(
        V_CURSOR OUT SYS_REFCURSOR,
        V_ID NUMBER
    );
    
    PROCEDURE FIDE_USUARIO_GET(user_name VARCHAR2,CSDATOS OUT SYS_REFCURSOR);
    
--******* CARRITO
    -- Procedimiento para agregar productos al carrito
    PROCEDURE FIDE_AGREGAR_PRODUCTO_CARRITO_SP(
        p_usuario_id IN NUMBER,
        p_producto_id IN NUMBER,
        p_cantidad IN NUMBER DEFAULT 1
    );

    -- Procedimiento para generar una factura
    PROCEDURE FIDE_GENERAR_FACTURA_SP (
        p_usuario_id IN NUMBER,
        p_metodo_pago_id IN NUMBER
    );

    -- Procedimiento para obtener el carrito de un usuario específico
   PROCEDURE FIDE_CARRITO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR);
   

    -- Procedimiento para eliminar un producto del carrito
    PROCEDURE FIDE_ELIMINAR_PRODUCTO_CARRITO_SP(
        p_usuario_id IN NUMBER,
        p_producto_id IN NUMBER
    );

    
END FIDE_PROCEDIMIENTOS_PKG;













--BODY

/***********************CRUD CITAS**********************/
--Procedimiento de lectura de citas 
PROCEDURE FIDE_CITA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * 
        FROM FIDE_CITA_TB;
END FIDE_CITA_TB_OBTENER_SP;

--Procedimiento de insert de citas
PROCEDURE FIDE_INSERTAR_CITA_SP(
    P_USUARIO_ID IN NUMBER,
    P_SERVICIO_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_FECHA IN DATE,
    P_HORA IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_CITA_TB (
        CITA_ID,
        USUARIO_ID,
        SERVICIO_ID,
        ESTADO_ID,
        FECHA,
        HORA
    )
    VALUES (
        FIDE_CITA_SEQ.NEXTVAL, 
        P_USUARIO_ID,
        P_SERVICIO_ID,
        P_ESTADO_ID,
        P_FECHA,
        P_HORA
    );
    COMMIT; 
END FIDE_INSERTAR_CITA_SP;

--Procedimiento de modificar de citas
PROCEDURE FIDE_MODIFICAR_CITA_SP(
    P_CITA_ID IN NUMBER, 
    P_USUARIO_ID IN NUMBER,
    P_SERVICIO_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_FECHA IN DATE,
    P_HORA IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_CITA_TB
    SET
        USUARIO_ID = P_USUARIO_ID,
        SERVICIO_ID = P_SERVICIO_ID,
        ESTADO_ID = P_ESTADO_ID,
        FECHA = P_FECHA,
        HORA = P_HORA
    WHERE CITA_ID = P_CITA_ID;
    COMMIT; 
END FIDE_MODIFICAR_CITA_SP;

--Procedimiento de eliminar de citas
PROCEDURE FIDE_ELIMINAR_CITA_SP(
    P_CITA_ID IN NUMBER 
) AS
BEGIN
    DELETE FROM FIDE_CITA_TB
    WHERE CITA_ID = P_CITA_ID;
    COMMIT; 
END FIDE_ELIMINAR_CITA_SP;


/***********************CRUD EVENTOS**********************/


--Procedimiento de lectura 
PROCEDURE FIDE_EVENTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * 
        FROM FIDE_EVENTO_TB;
END FIDE_EVENTO_TB_OBTENER_SP;

--Procedimiento de insert de evento
PROCEDURE FIDE_INSERTAR_EVENTO_SP(
    P_USUARIO_ID IN NUMBER,
    P_SERVICIO_ID IN NUMBER,
    P_DIRECCION_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_FECHA IN DATE
) AS
BEGIN
    INSERT INTO FIDE_EVENTO_TB (
        EVENTO_ID,
        USUARIO_ID,
        SERVICIO_ID,
        DIRECCION_ID,
        ESTADO_ID,
        FECHA
    )
    VALUES (
        FIDE_EVENTO_SEQ.NEXTVAL, 
        P_USUARIO_ID,
        P_SERVICIO_ID,
        P_DIRECCION_ID,
        P_ESTADO_ID,
        P_FECHA
    );
    COMMIT; 
END FIDE_INSERTAR_EVENTO_SP;

--Procedimiento de update de evento
PROCEDURE FIDE_ACTUALIZAR_EVENTO_SP(
    P_EVENTO_ID IN NUMBER,
    P_USUARIO_ID IN NUMBER,
    P_SERVICIO_ID IN NUMBER,
    P_DIRECCION_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_FECHA IN DATE
) AS
BEGIN
    UPDATE FIDE_EVENTO_TB
    SET 
        USUARIO_ID = P_USUARIO_ID,
        SERVICIO_ID = P_SERVICIO_ID,
        DIRECCION_ID = P_DIRECCION_ID,
        ESTADO_ID = P_ESTADO_ID,
        FECHA = P_FECHA
    WHERE 
        EVENTO_ID = P_EVENTO_ID;
    COMMIT; 
END FIDE_ACTUALIZAR_EVENTO_SP;

--Procedimiento almacenado de delete evento 
PROCEDURE FIDE_ELIMINAR_EVENTO_SP(
    P_EVENTO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_EVENTO_TB
    WHERE EVENTO_ID = P_EVENTO_ID;
    COMMIT; 
END FIDE_ELIMINAR_EVENTO_SP;


-------------------------Procedimientos de la parte de DIRECCIONES-------------------------------

/***********************CRUD PROVINCIA**********************/

--LECTURA
PROCEDURE FIDE_PROVINCIA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_PROVINCIA_TB;
END FIDE_PROVINCIA_TB_OBTENER_SP;


--Procedimiento de insert 
PROCEDURE FIDE_INSERTAR_PROVINCIA_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_PROVINCIA_TB (
        PROVINCIA_ID,
        NOMBRE
    )
    VALUES (
        FIDE_PROVINCIA_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT; 
END FIDE_INSERTAR_PROVINCIA_SP;


--Procedimiento update 
PROCEDURE FIDE_ACTUALIZAR_PROVINCIA_SP(
    P_PROVINCIA_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_PROVINCIA_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE 
        PROVINCIA_ID = P_PROVINCIA_ID;
    COMMIT; 
END FIDE_ACTUALIZAR_PROVINCIA_SP;


--Procedimiento delete 
PROCEDURE FIDE_ELIMINAR_PROVINCIA_SP(
    P_PROVINCIA_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_PROVINCIA_TB
    WHERE PROVINCIA_ID = P_PROVINCIA_ID;
    COMMIT; 
END FIDE_ELIMINAR_PROVINCIA_SP;


/***********************CRUD CANTON**********************/
--Lectura
PROCEDURE FIDE_CANTON_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_CANTON_TB;
END FIDE_CANTON_TB_OBTENER_SP;

--INSERT 
PROCEDURE FIDE_CANTON_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_CANTON_TB (
        CANTON_ID,
        NOMBRE
    )
    VALUES (
        FIDE_CANTON_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT; 
END FIDE_CANTON_TB_INSERTAR_SP;


--Update 
PROCEDURE FIDE_CANTON_TB_ACTUALIZAR_SP(
    P_CANTON_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_CANTON_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE 
        CANTON_ID = P_CANTON_ID;
    COMMIT; 
END FIDE_CANTON_TB_ACTUALIZAR_SP;

--Delete
PROCEDURE FIDE_CANTON_TB_ELIMINAR_SP(
    P_CANTON_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_CANTON_TB
    WHERE CANTON_ID = P_CANTON_ID;
    COMMIT; 
END FIDE_CANTON_TB_ELIMINAR_SP;

/***********************CRUD DISTRITO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_DISTRITO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_DISTRITO_TB;
END FIDE_DISTRITO_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT 
PROCEDURE FIDE_DISTRITO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_DISTRITO_TB (
        DISTRITO_ID,
        NOMBRE
    )
    VALUES (
        FIDE_DISTRITO_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT; 
END FIDE_DISTRITO_TB_INSERTAR_SP;


--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_DISTRITO_TB_ACTUALIZAR_SP(
    P_DISTRITO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_DISTRITO_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE 
        DISTRITO_ID = P_DISTRITO_ID;
    COMMIT; 
END FIDE_DISTRITO_TB_ACTUALIZAR_SP;

--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_DISTRITO_TB_ELIMINAR_SP(
    P_DISTRITO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_DISTRITO_TB
    WHERE DISTRITO_ID = P_DISTRITO_ID;
    COMMIT; 
END FIDE_DISTRITO_TB_ELIMINAR_SP;

/***********************CRUD DIRECCION**********************/

--Procedimiento de lectura 
PROCEDURE FIDE_DIRECCION_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_DIRECCION_TB;
END FIDE_DIRECCION_TB_OBTENER_SP;

--Procedimiento de insert 
PROCEDURE FIDE_DIRECCION_TB_INSERTAR_SP(
    P_SENAS IN VARCHAR2,
    P_PROVINCIA_ID IN NUMBER,
    P_DISTRITO_ID IN NUMBER,
    P_CANTON_ID IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_DIRECCION_TB (
        DIRECCION_ID,
        SENAS,
        PROVINCIA_ID,
        DISTRITO_ID,
        CANTON_ID
    )
    VALUES (
        FIDE_DIRECCION_SEQ.NEXTVAL, 
        P_SENAS,
        P_PROVINCIA_ID,
        P_DISTRITO_ID,
        P_CANTON_ID
    );
    COMMIT; 
END FIDE_DIRECCION_TB_INSERTAR_SP;

--Procedimiento update 
PROCEDURE FIDE_DIRECCION_TB_ACTUALIZAR_SP(
    P_DIRECCION_ID IN NUMBER,
    P_SENAS IN VARCHAR2,
    P_PROVINCIA_ID IN NUMBER,
    P_DISTRITO_ID IN NUMBER,
    P_CANTON_ID IN NUMBER
) AS
BEGIN
    UPDATE FIDE_DIRECCION_TB
    SET 
        SENAS = P_SENAS,
        PROVINCIA_ID = P_PROVINCIA_ID,
        DISTRITO_ID = P_DISTRITO_ID,
        CANTON_ID = P_CANTON_ID
    WHERE 
        DIRECCION_ID = P_DIRECCION_ID;
    COMMIT; 
END FIDE_DIRECCION_TB_ACTUALIZAR_SP;

--Procedimiento delete 
PROCEDURE FIDE_DIRECCION_TB_ELIMINAR_SP(
    P_DIRECCION_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_DIRECCION_TB
    WHERE DIRECCION_ID = P_DIRECCION_ID;
    COMMIT; 
END FIDE_DIRECCION_TB_ELIMINAR_SP;


/***************Procedimientos de la parte de ESTADO******************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_ESTADO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_ESTADO_TB;
END FIDE_ESTADO_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT
PROCEDURE FIDE_ESTADO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_ESTADO_TB (
        ESTADO_ID,
        NOMBRE
    )
    VALUES (
        FIDE_ESTADO_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT; 
END FIDE_ESTADO_TB_INSERTAR_SP;


--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_ESTADO_TB_ACTUALIZAR_SP(
    P_ESTADO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_ESTADO_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE 
        ESTADO_ID = P_ESTADO_ID;
    COMMIT; 
END FIDE_ESTADO_TB_ACTUALIZAR_SP;


--PROCEDIMIENTO DE DELETE 
PROCEDURE FIDE_ESTADO_TB_ELIMINAR_SP(
    P_ESTADO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_ESTADO_TB
    WHERE ESTADO_ID = P_ESTADO_ID;
    COMMIT; 
END FIDE_ESTADO_TB_ELIMINAR_SP;

-------------------------Procedimientos de la parte de USUARIOS-------------------------------
/***********************CRUD ROL**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_ROL_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_ROL_TB;
END FIDE_ROL_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT
PROCEDURE FIDE_ROL_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_ROL_TB (
        ROL_ID,
        NOMBRE
    )
    VALUES (
        FIDE_ROL_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT; 
END FIDE_ROL_TB_INSERTAR_SP;

--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_ROL_TB_ACTUALIZAR_SP(
    P_ROL_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_ROL_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE 
        ROL_ID = P_ROL_ID;
    COMMIT; 
END FIDE_ROL_TB_ACTUALIZAR_SP;

--PROCEDIMIENTO DELETE
PROCEDURE FIDE_ROL_TB_ELIMINAR_SP(
    P_ROL_ID IN NUMBER
) AS
BEGIN
    DELETE FROM AdminDB.FIDE_ROL_TB
    WHERE ROL_ID = P_ROL_ID;
    COMMIT; 
END FIDE_ROL_TB_ELIMINAR_SP;

/***********************CRUD USUARIO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_USUARIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_USUARIO_TB;
END FIDE_USUARIO_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT
PROCEDURE FIDE_USUARIO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2,
    P_APELLIDO IN VARCHAR2,
    P_CORREO IN VARCHAR2,
    P_CONTRASENA IN VARCHAR2,
    P_USERNAME IN VARCHAR2,
    P_DIRECCION_ID IN NUMBER,
    P_ROL_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_USUARIO_TB (
        USUARIO_ID,
        NOMBRE,
        APELLIDO,
        CORREO,
        CONTRASENA,
        USERNAME,
        DIRECCION_ID,
        ROL_ID,
        ESTADO_ID
    )
    VALUES (
         FIDE_USUARIO_SEQ.NEXTVAL, 
        P_NOMBRE,
        P_APELLIDO,
        P_CORREO,
        P_CONTRASENA,
        P_USERNAME,
        P_DIRECCION_ID,
        P_ROL_ID,
        P_ESTADO_ID
    );
    COMMIT; 
END FIDE_USUARIO_TB_INSERTAR_SP;

--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_USUARIO_TB_ELIMINAR_SP(
    P_USUARIO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_USUARIO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;
    COMMIT; 
END FIDE_USUARIO_TB_ELIMINAR_SP;

-------------------------Procedimientos de la parte de INVENTARIO-------------------------------
/***********************CRUD INVENTARIO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_INVENTARIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_INVENTARIO_TB;
END FIDE_INVENTARIO_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT
PROCEDURE FIDE_INVENTARIO_TB_INSERT_SP(
    P_STOCK IN NUMBER,
    P_DIAS_EN_STOCK IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_PRODUCTO_ID IN NUMBER
) AS
BEGIN
    INSERT INTO AdminDB.FIDE_INVENTARIO_TB (
        INVENTARIO_ID,
        STOCK,
        DIAS_EN_STOCK,
        ESTADO_ID,
        PRODUCTO_ID
    )
    VALUES (
       FIDE_INVENTARIO_SEQ.NEXTVAL,
        P_STOCK,
        P_DIAS_EN_STOCK,
        P_ESTADO_ID,
        P_PRODUCTO_ID
    );
    COMMIT;
END FIDE_INVENTARIO_TB_INSERT_SP;

--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_INVENTARIO_TB_ACTUALIZAR_SP(
    P_INVENTARIO_ID IN NUMBER,
    P_STOCK IN NUMBER,
    P_DIAS_EN_STOCK IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_PRODUCTO_ID IN NUMBER
) AS
BEGIN
    UPDATE FIDE_INVENTARIO_TB
    SET 
        STOCK = P_STOCK,
        DIAS_EN_STOCK = P_DIAS_EN_STOCK,
        ESTADO_ID = P_ESTADO_ID,
        PRODUCTO_ID = P_PRODUCTO_ID
    WHERE 
        INVENTARIO_ID = P_INVENTARIO_ID;
    COMMIT; 
END FIDE_INVENTARIO_TB_ACTUALIZAR_SP;

--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_INVENTARIO_TB_ELIMINAR_SP(
    P_INVENTARIO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_INVENTARIO_TB
    WHERE INVENTARIO_ID = P_INVENTARIO_ID;
    COMMIT; 
END FIDE_INVENTARIO_TB_ELIMINAR_SP;


-------------------------Procedimientos de la parte de CURSOS-------------------------------
/***********************CRUD TIPO_CURSO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_TIPO_CURSO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_TIPO_CURSO_TB;
END FIDE_TIPO_CURSO_TB_OBTENER_SP;

--PROCEDIMIENTO DE INSERT
PROCEDURE FIDE_TIPO_CURSO_TB_INSERTAR_SP(
    P_TIPO_CURSO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_TIPO_CURSO_TB (
        TIPO_CURSO_ID,
        NOMBRE
    ) VALUES (
        P_TIPO_CURSO_ID,
        P_NOMBRE
    );
    COMMIT;
END FIDE_TIPO_CURSO_TB_INSERTAR_SP;


--PROCEDIMIENTO UPDATE 
PROCEDURE FIDE_TIPO_CURSO_TB_ACTUALIZAR_SP(
    P_TIPO_CURSO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_TIPO_CURSO_TB
    SET
        NOMBRE = P_NOMBRE
    WHERE
        TIPO_CURSO_ID = P_TIPO_CURSO_ID;
    COMMIT;
END FIDE_TIPO_CURSO_TB_ACTUALIZAR_SP;

--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_TIPO_CURSO_TB_ELIMINAR_SP(
    P_TIPO_CURSO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_TIPO_CURSO_TB
    WHERE TIPO_CURSO_ID = P_TIPO_CURSO_ID;
    COMMIT;
END FIDE_TIPO_CURSO_TB_ELIMINAR_SP;


/***********************CRUD CURSO**********************/

--PROCEDIMIENTO LECTURA 
PROCEDURE FIDE_CURSO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_CURSO_TB;
END FIDE_CURSO_TB_OBTENER_SP;

--PROCEDIMIENTO INSERT
PROCEDURE FIDE_CURSO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_FECHA IN DATE,
    P_HORA IN VARCHAR2,
    P_IMAGEN IN VARCHAR2,
    P_PRECIO IN DECIMAL,
    P_CAPACIDAD IN NUMBER,
    P_TIPO_CURSO_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_DIRECCION_ID IN NUMBER
) AS
BEGIN
    INSERT INTO AdminDB.FIDE_CURSO_TB (
        CURSO_ID, 
        NOMBRE, 
        DESCRIPCION, 
        FECHA, 
        HORA, 
        IMAGEN, 
        PRECIO, 
        CAPACIDAD, 
        TIPO_CURSO_ID, 
        ESTADO_ID, 
        DIRECCION_ID
    )
    VALUES (
        FIDE_CURSO_SEQ.NEXTVAL, 
        P_NOMBRE,
        P_DESCRIPCION,
        P_FECHA,
        P_HORA,
        P_IMAGEN,
        P_PRECIO,
        P_CAPACIDAD,
        P_TIPO_CURSO_ID,
        P_ESTADO_ID,
        P_DIRECCION_ID
    );
    COMMIT;
END FIDE_CURSO_TB_INSERTAR_SP;

--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_CURSO_TB_ACTUALIZAR_SP(
    P_CURSO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_FECHA IN DATE,
    P_HORA IN VARCHAR2,
    P_IMAGEN IN VARCHAR2,
    P_PRECIO IN DECIMAL,
    P_CAPACIDAD IN NUMBER,
    P_TIPO_CURSO_ID IN NUMBER,
    P_ESTADO_ID IN NUMBER,
    P_DIRECCION_ID IN NUMBER
) AS
BEGIN
    UPDATE FIDE_CURSO_TB
    SET 
        NOMBRE = P_NOMBRE,
        DESCRIPCION = P_DESCRIPCION,
        FECHA = P_FECHA,
        HORA = P_HORA,
        IMAGEN = P_IMAGEN,
        PRECIO = P_PRECIO,
        CAPACIDAD = P_CAPACIDAD,
        TIPO_CURSO_ID = P_TIPO_CURSO_ID,
        ESTADO_ID = P_ESTADO_ID,
        DIRECCION_ID = P_DIRECCION_ID
    WHERE CURSO_ID = P_CURSO_ID;
    COMMIT;
END FIDE_CURSO_TB_ACTUALIZAR_SP;


--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_CURSO_TB_ELIMINAR_SP(
    P_CURSO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_CURSO_TB
    WHERE CURSO_ID = P_CURSO_ID;
    COMMIT;
END FIDE_CURSO_TB_ELIMINAR_SP;


-------------------------Procedimientos de la parte de COMPRAS-------------------------------
/***********************CRUD METODO_PAGO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_METODO_PAGO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * 
        FROM FIDE_METODO_PAGO_TB;
END FIDE_METODO_PAGO_TB_OBTENER_SP;

--PROCEDIMIENTO INSERT
PROCEDURE FIDE_METODO_PAGO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_METODO_PAGO_TB (
        METODO_PAGO_ID, 
        NOMBRE
    )
    VALUES (
        FIDE_METODO_PAGO_SEQ.NEXTVAL, 
        P_NOMBRE
    );
    COMMIT;
END FIDE_METODO_PAGO_TB_INSERTAR_SP;

--PROCEDIMIENTO UPDATE 
PROCEDURE FIDE_METODO_PAGO_TB_ACTUALIZAR_SP(
    P_METODO_PAGO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_METODO_PAGO_TB
    SET 
        NOMBRE = P_NOMBRE
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;
    COMMIT;
END FIDE_METODO_PAGO_TB_ACTUALIZAR_SP;

--PROCEDIMIENTO DELETE 
PROCEDURE FIDE_METODO_PAGO_TB_ELIMINAR_SP(
    P_METODO_PAGO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_METODO_PAGO_TB
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;
    COMMIT;
END FIDE_METODO_PAGO_TB_ELIMINAR_SP;


/***********************CRUD DESCUENTO**********************/

--PROCEDIMIENTO DE LECTURA 
PROCEDURE FIDE_DESCUENTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_DESCUENTO_TB;
END FIDE_DESCUENTO_TB_OBTENER_SP;


--PROCEDIMIENTO INSERT
PROCEDURE FIDE_DESCUENTO_TB_INSERTAR_SP(
    P_NOMBRE IN VARCHAR2,
    P_PORCENTAJE IN DECIMAL,
    P_ESTADO IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_DESCUENTO_TB (
        DESCUENTO_ID, 
        NOMBRE, 
        PORCENTAJE,
        ESTADO
    )
    VALUES (
        FIDE_DESCUENTO_SEQ.NEXTVAL, 
        P_NOMBRE,
        P_PORCENTAJE,
        P_ESTADO
    );
    COMMIT;
END FIDE_DESCUENTO_TB_INSERTAR_SP;

--PROCEDIMIENTO DE UPDATE 
PROCEDURE FIDE_DESCUENTO_TB_ACTUALIZAR_SP(
    P_DESCUENTO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_PORCENTAJE IN DECIMAL,
    P_ESTADO IN VARCHAR2
) AS
BEGIN
    UPDATE FIDE_DESCUENTO_TB
    SET 
        NOMBRE = P_NOMBRE,
        PORCENTAJE = P_PORCENTAJE,
        ESTADO = P_ESTADO
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;
    COMMIT;
END FIDE_DESCUENTO_TB_ACTUALIZAR_SP;

--PROCEDIMEINTO DELETE 
PROCEDURE FIDE_DESCUENTO_TB_ELIMINAR_SP(
    P_DESCUENTO_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_DESCUENTO_TB
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;
    COMMIT;
END FIDE_DESCUENTO_TB_ELIMINAR_SP;


/***********************CRUD DETALLE_FACTURA**********************/

--PROCEDIMIENTO LECTURA
PROCEDURE FIDE_DETALLE_FACTURA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_DETALLE_FACTURA_TB;
END FIDE_DETALLE_FACTURA_TB_OBTENER_SP;

--PROCEDIMIENTO INSERT
PROCEDURE FIDE_DETALLE_FACTURA_TB_INSERTAR_SP(
    P_CANTIDAD_LINEAS IN NUMBER,
    P_TOTAL_POR_LINEA IN NUMBER,
    P_PRODUCTO_ID IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_DETALLE_FACTURA_TB (
        DETALLE_FACTURA_ID, 
        CANTIDAD_LINEAS, 
        TOTAL_POR_LINEA, 
        PRODUCTO_ID
    )
    VALUES (
        FIDE_DETALLE_FACTURA_SEQ.NEXTVAL, 
        P_CANTIDAD_LINEAS,
        P_TOTAL_POR_LINEA,
        P_PRODUCTO_ID
    );
    COMMIT;
END FIDE_DETALLE_FACTURA_TB_INSERTAR_SP;

--PROCEDIMIENTO UPDATE 
PROCEDURE FIDE_DETALLE_FACTURA_TB_ACTUALIZAR_SP(
    P_DETALLE_FACTURA_ID IN NUMBER,
    P_CANTIDAD_LINEAS IN NUMBER,
    P_TOTAL_POR_LINEA IN NUMBER,
    P_PRODUCTO_ID IN NUMBER
) AS
BEGIN
    UPDATE FIDE_DETALLE_FACTURA_TB
    SET 
        CANTIDAD_LINEAS = P_CANTIDAD_LINEAS,
        TOTAL_POR_LINEA = P_TOTAL_POR_LINEA,
        PRODUCTO_ID = P_PRODUCTO_ID
    WHERE DETALLE_FACTURA_ID = P_DETALLE_FACTURA_ID;
    COMMIT;
END FIDE_DETALLE_FACTURA_TB_ACTUALIZAR_SP;

--PROCEDIMEITNO DELETE
PROCEDURE FIDE_DETALLE_FACTURA_TB_ELIMINAR_SP(
    P_DETALLE_FACTURA_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_DETALLE_FACTURA_TB
    WHERE DETALLE_FACTURA_ID = P_DETALLE_FACTURA_ID;
    COMMIT;
END FIDE_DETALLE_FACTURA_TB_ELIMINAR_SP;

/***********************CRUD FACTURA**********************/

--PROCEDIMEINTO LECTURA 
PROCEDURE FIDE_FACTURA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_FACTURA_TB;
END FIDE_FACTURA_TB_OBTENER_SP;

--PROCEDIMIENTO INSERT
PROCEDURE FIDE_FACTURA_TB_INSERTAR_SP(
    P_USUARIO_ID IN NUMBER,
    P_FECHA IN DATE,
    P_DETALLE_FACTURA_ID IN NUMBER,
    P_DESCUENTO_ID IN NUMBER,
    P_IVA IN DECIMAL,
    P_SUBTOTAL IN DECIMAL,
    P_MONTO_TOTAL IN DECIMAL,
    P_METODO_PAGO_ID IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_FACTURA_TB (
        FACTURA_ID, 
        USUARIO_ID, 
        FECHA, 
        DETALLE_FACTURA_ID, 
        DESCUENTO_ID, 
        IVA, 
        SUBTOTAL, 
        MONTO_TOTAL, 
        METODO_PAGO_ID
    )
    VALUES (
        FIDE_FACTURA_SEQ.NEXTVAL, 
        P_USUARIO_ID,
        P_FECHA,
        P_DETALLE_FACTURA_ID,
        P_DESCUENTO_ID,
        P_IVA,
        P_SUBTOTAL,
        P_MONTO_TOTAL,
        P_METODO_PAGO_ID
    );
    COMMIT;
END FIDE_FACTURA_TB_INSERTAR_SP;


--PROCEDIMIENTO UPDATE 
PROCEDURE FIDE_FACTURA_TB_ACTUALIZAR_SP(
    P_FACTURA_ID IN NUMBER,
    P_USUARIO_ID IN NUMBER,
    P_FECHA IN DATE,
    P_DETALLE_FACTURA_ID IN NUMBER,
    P_DESCUENTO_ID IN NUMBER,
    P_IVA IN DECIMAL,
    P_SUBTOTAL IN DECIMAL,
    P_MONTO_TOTAL IN DECIMAL,
    P_METODO_PAGO_ID IN NUMBER
) AS
BEGIN
    UPDATE FIDE_FACTURA_TB
    SET 
        USUARIO_ID = P_USUARIO_ID,
        FECHA = P_FECHA,
        DETALLE_FACTURA_ID = P_DETALLE_FACTURA_ID,
        DESCUENTO_ID = P_DESCUENTO_ID,
        IVA = P_IVA,
        SUBTOTAL = P_SUBTOTAL,
        MONTO_TOTAL = P_MONTO_TOTAL,
        METODO_PAGO_ID = P_METODO_PAGO_ID
    WHERE FACTURA_ID = P_FACTURA_ID;
    COMMIT;
END FIDE_FACTURA_TB_ACTUALIZAR_SP;


--PROCEDIMIENTO DELETE
PROCEDURE FIDE_FACTURA_TB_ELIMINAR_SP(
    P_FACTURA_ID IN NUMBER
) AS
BEGIN
    DELETE FROM FIDE_FACTURA_TB
    WHERE FACTURA_ID = P_FACTURA_ID;
    COMMIT;
END FIDE_FACTURA_TB_ELIMINAR_SP;

/***********************CRUD CATEGORIA**********************/

--READ
PROCEDURE FIDE_CATEGORIA_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_CATEGORIA_TB;
END FIDE_CATEGORIA_TB_OBTENER_SP;

--INSERT
PROCEDURE FIDE_CATEGORIA_TB_INSERTAR_SP (
    P_NOMBRE IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_CATEGORIA_TB (
        CATEGORIA_ID, 
        NOMBRE
    )
    VALUES (
        FIDE_CATEGORIA_SEQ.NEXTVAL, 
        P_NOMBRE
    );
     COMMIT;
END FIDE_CATEGORIA_TB_INSERTAR_SP;

--UPDATE
PROCEDURE FIDE_CATEGORIA_ACTUALIZAR_SP(
    P_CATEGORIA_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2
)
IS
BEGIN
    UPDATE FIDE_CATEGORIA_TB
    SET NOMBRE = P_NOMBRE
    WHERE CATEGORIA_ID = P_CATEGORIA_ID;
    COMMIT;
END FIDE_CATEGORIA_ACTUALIZAR_SP;

--DELETE
PROCEDURE FIDE_CATEGORIA_ELIMINAR_SP(P_CATEGORIA_ID IN NUMBER) AS
    BEGIN
        DELETE FROM FIDE_CATEGORIA_TB
        WHERE CATEGORIA_ID = P_CATEGORIA_ID;
        COMMIT;
    END FIDE_CATEGORIA_ELIMINAR_SP;
    
/***********************CRUD PRODUCTO**********************/

--READ
PROCEDURE FIDE_PRODUCTO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_PRODUCTO_TB;
END FIDE_PRODUCTO_TB_OBTENER_SP;

--INSERT
PROCEDURE FIDE_PRODUCTO_TB_INSERTAR_SP (
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_IMAGEN IN VARCHAR2,
    P_PRECIO_UNIT IN NUMBER,
    P_CATEGORIA_ID IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_PRODUCTO_TB (
        PRODUCTO_ID, 
        NOMBRE,
        DESCRIPCION,
        IMAGEN,
        PRECIO_UNIT,
        CATEGORIA_ID
    )
    VALUES (
        FIDE_PRODUCTO_SEQ.NEXTVAL, 
        P_NOMBRE,
        P_DESCRIPCION,
        P_IMAGEN,
        P_PRECIO_UNIT,
        P_CATEGORIA_ID
    );
     COMMIT;
END FIDE_PRODUCTO_TB_INSERTAR_SP;

--UPDATE
PROCEDURE FIDE_PRODUCTO_ACTUALIZAR_SP(
    P_PRODUCTO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_IMAGEN IN VARCHAR2,
    P_PRECIO_UNIT IN NUMBER,
    P_CATEGORIA_ID NUMBER
)
IS
BEGIN
    UPDATE FIDE_PRODUCTO_TB
    SET NOMBRE = P_NOMBRE,
        DESCRIPCION = P_DESCRIPCION,
        IMAGEN = P_IMAGEN,
        PRECIO_UNIT = P_PRECIO_UNIT,
        CATEGORIA_ID = P_CATEGORIA_ID
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;
    COMMIT;
END FIDE_PRODUCTO_ACTUALIZAR_SP;

--DELETE
PROCEDURE FIDE_PRODUCTO_ELIMINAR_SP(P_PRODUCTO_ID IN NUMBER) AS
    BEGIN
        DELETE FROM FIDE_PRODUCTO_TB
        WHERE PRODUCTO_ID = P_PRODUCTO_ID;
        COMMIT;
    END FIDE_PRODUCTO_ELIMINAR_SP;

/***********************CRUD SERVICIO**********************/

--READ
PROCEDURE FIDE_SERVICIO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT * FROM FIDE_SERVICIO_TB;
END FIDE_SERVICIO_TB_OBTENER_SP;

--INSERT
PROCEDURE FIDE_SERVICIO_TB_INSERTAR_SP (
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_IMAGEN IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_SERVICIO_TB (
        SERVICIO_ID, 
        NOMBRE, 
        DESCRIPCION,
        IMAGEN
    )
    VALUES (
        FIDE_SERVICIO_SEQ.NEXTVAL, 
        P_NOMBRE, 
        P_DESCRIPCION,
        P_IMAGEN
    );
     COMMIT;
END FIDE_SERVICIO_TB_INSERTAR_SP;

--UPDATE
PROCEDURE FIDE_SERVICIO_ACTUALIZAR_SP(
    P_SERVICIO_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_IMAGEN IN VARCHAR2
)
IS
BEGIN
    UPDATE FIDE_SERVICIO_TB
    SET NOMBRE = P_NOMBRE,
        DESCRIPCION = P_DESCRIPCION,
        IMAGEN = P_IMAGEN
    WHERE SERVICIO_ID = P_SERVICIO_ID;
    COMMIT;
END FIDE_SERVICIO_ACTUALIZAR_SP;

--DELETE
PROCEDURE FIDE_SERVICIO_ELIMINAR_SP(P_SERVICIO_ID IN NUMBER) AS
    BEGIN
        DELETE FROM FIDE_SERVICIO_TB
        WHERE SERVICIO_ID = P_SERVICIO_ID;
        COMMIT;
    END FIDE_SERVICIO_ELIMINAR_SP;
    
/***********************PROCEDIMIENTOS PARA OBTENER ID**********************/

--INVENTARIO
PROCEDURE FIDE_INVENTARIO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_INVENTARIO_TB
        WHERE INVENTARIO_ID = V_ID; 
END FIDE_INVENTARIO_TB_GET_BY_ID;

--FACTURA
PROCEDURE FIDE_FACTURA_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_FACTURA_TB
        WHERE FACTURA_ID = V_ID; 
END FIDE_FACTURA_TB_GET_BY_ID;

--PRODUCTO
PROCEDURE FIDE_PRODUCTO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_PRODUCTO_TB
        WHERE PRODUCTO_ID = V_ID; 
END FIDE_PRODUCTO_TB_GET_BY_ID;

--CATEGORIA
PROCEDURE FIDE_CATEGORIA_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_CATEGORIA_TB
        WHERE CATEGORIA_ID = V_ID; 
END FIDE_CATEGORIA_TB_GET_BY_ID;

--SERVICIO
PROCEDURE FIDE_SERVICIO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_SERVICIO_TB
        WHERE SERVICIO_ID = V_ID; 
END FIDE_SERVICIO_TB_GET_BY_ID;

--ESTADO
PROCEDURE FIDE_ESTADO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_ESTADO_TB
        WHERE ESTADO_ID = V_ID; 
END FIDE_ESTADO_TB_GET_BY_ID;

--TIPO CURSO
PROCEDURE FIDE_TIPO_CURSO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_TIPO_CURSO_TB
        WHERE TIPO_CURSO_ID = V_ID; 
END FIDE_TIPO_CURSO_TB_GET_BY_ID;

--DIRECCION
PROCEDURE FIDE_DIRECCION_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_DIRECCION_TB
        WHERE DIRECCION_ID = V_ID; 
END FIDE_DIRECCION_TB_GET_BY_ID;

--CURSO
PROCEDURE FIDE_CURSO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_CURSO_TB
        WHERE CURSO_ID = V_ID; 
END FIDE_CURSO_TB_GET_BY_ID;

--DESCUENTO
PROCEDURE FIDE_DESCUENTO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_DESCUENTO_TB
        WHERE DESCUENTO_ID = V_ID; 
END FIDE_DESCUENTO_TB_GET_BY_ID;

--CITA
PROCEDURE FIDE_CITA_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_CITA_TB
        WHERE CITA_ID = V_ID; 
END FIDE_CITA_TB_GET_BY_ID;

--USUARIO
PROCEDURE FIDE_USUARIO_TB_GET_BY_ID(
    V_CURSOR OUT SYS_REFCURSOR,
    V_ID NUMBER
)
AS
BEGIN
    OPEN V_CURSOR FOR
        SELECT * 
        FROM FIDE_USUARIO_TB
        WHERE USUARIO_ID = V_ID; 
END FIDE_USUARIO_TB_GET_BY_ID;

PROCEDURE FIDE_USUARIO_GET(user_name VARCHAR2,CSDATOS OUT SYS_REFCURSOR)
AS
dinamic VARCHAR2(4000);
BEGIN

    dinamic := 'SELECT usuario_id, nombre, apellido, correo, contrasena, username FROM Fide_usuario_tb WHERE username = :user_name';

   OPEN CSDATOS FOR dinamic
        USING user_name;
END FIDE_USUARIO_GET;

--*****CARRITO

-- Procedimiento para agregar productos al carrito
    PROCEDURE FIDE_AGREGAR_PRODUCTO_CARRITO_SP(
        p_usuario_id IN NUMBER,
        p_producto_id IN NUMBER,
        p_cantidad IN NUMBER DEFAULT 1
    ) IS
        v_stock NUMBER;
        v_existe NUMBER;
    BEGIN
        -- Verificar existencia del producto en inventario
        SELECT STOCK INTO v_stock 
        FROM FIDE_INVENTARIO_TB 
        WHERE PRODUCTO_ID = p_producto_id;

        IF v_stock >= p_cantidad THEN
            -- Verificar si el producto ya está en el carrito
            SELECT COUNT(*) INTO v_existe
            FROM FIDE_CARRITO_TB
            WHERE USUARIO_ID = p_usuario_id AND PRODUCTO_ID = p_producto_id;


            IF v_existe > 0 THEN
                -- Actualizar cantidad si ya existe en el carrito
               UPDATE FIDE_CARRITO_TB
              SET CANTIDAD = CANTIDAD + p_cantidad
               WHERE USUARIO_ID = p_usuario_id AND PRODUCTO_ID = p_producto_id;
            ELSE
                -- Insertar nuevo producto en el carrito
                INSERT INTO FIDE_CARRITO_TB (USUARIO_ID, PRODUCTO_ID, CANTIDAD)
                VALUES (p_usuario_id, p_producto_id, p_cantidad);
            END IF;
        ELSE
            RAISE_APPLICATION_ERROR(-20001, 'Stock insuficiente para el producto seleccionado');
        END IF;
        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20002, 'Producto no encontrado en inventario');
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END FIDE_AGREGAR_PRODUCTO_CARRITO_SP;

    PROCEDURE FIDE_GENERAR_FACTURA_SP (
    p_usuario_id     IN NUMBER,
    p_metodo_pago_id IN NUMBER
) AS
    v_subtotal   NUMBER := 0;
    v_iva        NUMBER := 0;
    v_total      NUMBER := 0;
    v_detalle_id NUMBER;
    v_descuento  NUMBER := 0;
    v_descuento_id NUMBER := NULL;  -- Variable para almacenar el ID del descuento
    v_carrito_vacio EXCEPTION;
    v_cant_carrito NUMBER;
BEGIN
    -- Verificar si el carrito está vacío
    SELECT COUNT(*) INTO v_cant_carrito 
    FROM FIDE_CARRITO_TB
    WHERE USUARIO_ID = p_usuario_id;

    IF v_cant_carrito = 0 THEN
        RAISE v_carrito_vacio;
    END IF;

    -- Calcular los totales
    SELECT 
        NVL(SUM(c.CANTIDAD * p.PRECIO_UNIT), 0),  -- Subtotal
        NVL(SUM(c.CANTIDAD * p.PRECIO_UNIT) * 0.13, 0)  -- IVA 13%
    INTO v_subtotal, v_iva
    FROM FIDE_CARRITO_TB c
    JOIN FIDE_PRODUCTO_TB p ON c.PRODUCTO_ID = p.PRODUCTO_ID
    WHERE c.USUARIO_ID = p_usuario_id;

    -- Calcular el total
    v_total := v_subtotal + v_iva;

    -- Verificar si hay descuento activo
    BEGIN
        SELECT NVL(PORCENTAJE, 0), DESCUENTO_ID INTO v_descuento, v_descuento_id
        FROM FIDE_DESCUENTO_TB
        WHERE ESTADO = 'ACTIVO'
        AND ROWNUM = 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_descuento := 0;
            v_descuento_id := NULL;
    END;

    -- Aplicar descuento si existe
    IF v_descuento > 0 THEN
        v_total := v_total * (1 - v_descuento / 100);
    END IF;

    -- Insertar detalle de factura
    FOR r IN (
        SELECT 
            c.PRODUCTO_ID, 
            c.CANTIDAD, 
            c.CANTIDAD * p.PRECIO_UNIT AS TOTAL_POR_LINEA
        FROM FIDE_CARRITO_TB c
        JOIN FIDE_PRODUCTO_TB p ON c.PRODUCTO_ID = p.PRODUCTO_ID
        WHERE c.USUARIO_ID = p_usuario_id
    ) LOOP
        -- Verificar si hay suficiente stock antes de actualizar el inventario
        UPDATE FIDE_INVENTARIO_TB 
        SET STOCK = STOCK - r.CANTIDAD 
        WHERE PRODUCTO_ID = r.PRODUCTO_ID
        AND STOCK >= r.CANTIDAD;

        INSERT INTO FIDE_DETALLE_FACTURA_TB (
            DETALLE_FACTURA_ID, 
            PRODUCTO_ID, 
            CANTIDAD_LINEAS, 
            TOTAL_POR_LINEA
        ) VALUES (
            FIDE_DETALLE_FACTURA_SEQ.NEXTVAL,
            r.PRODUCTO_ID,
            r.CANTIDAD,
            r.TOTAL_POR_LINEA
        )
        RETURNING DETALLE_FACTURA_ID INTO v_detalle_id;
    END LOOP;

    -- Insertar la factura
    INSERT INTO FIDE_FACTURA_TB (
        FACTURA_ID, 
        USUARIO_ID, 
        FECHA, 
        IVA, 
        SUBTOTAL, 
        MONTO_TOTAL, 
        METODO_PAGO_ID, 
        DETALLE_FACTURA_ID,
        DESCUENTO_ID  
    ) VALUES (
        FIDE_FACTURA_SEQ.NEXTVAL,
        p_usuario_id,
        SYSDATE,
        v_iva,
        v_subtotal,
        v_total,
        p_metodo_pago_id,
        v_detalle_id,
        v_descuento_id  
    );

    -- Limpiar el carrito después de generar la factura
    DELETE FROM FIDE_CARRITO_TB WHERE USUARIO_ID = p_usuario_id;

    COMMIT;

EXCEPTION
    WHEN v_carrito_vacio THEN
        RAISE_APPLICATION_ERROR(-20003, 'El carrito está vacío');
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END FIDE_GENERAR_FACTURA_SP;


    -- Procedimiento para obtener carrito de un usuario específico
PROCEDURE FIDE_CARRITO_TB_OBTENER_SP(P_RESULTADO OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN P_RESULTADO FOR 
        SELECT c.*, p.NOMBRE, p.DESCRIPCION, p.PRECIO_UNIT, p.IMAGEN 
        FROM FIDE_CARRITO_TB c
        JOIN FIDE_PRODUCTO_TB p ON c.PRODUCTO_ID = p.PRODUCTO_ID;
END FIDE_CARRITO_TB_OBTENER_SP;



    -- Procedimiento para eliminar un producto del carrito
    PROCEDURE FIDE_ELIMINAR_PRODUCTO_CARRITO_SP(
        p_usuario_id IN NUMBER,
        p_producto_id IN NUMBER
    ) IS
    BEGIN
        DELETE FROM FIDE_CARRITO_TB
        WHERE USUARIO_ID = p_usuario_id AND PRODUCTO_ID = p_producto_id;

        COMMIT;
    END FIDE_ELIMINAR_PRODUCTO_CARRITO_SP;

    

























