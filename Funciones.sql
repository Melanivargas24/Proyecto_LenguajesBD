---FUNCIONES PARA PROVINCIA 
---SELECCIONAR PROVINCIAS POR ID
set serveroutput on;
CREATE OR REPLACE FUNCTION FIDE_PROVINCIA_TB_BUSCAR_NOMBRE_X_PROVINCIA_ID_FN(P_PROVINCIA_ID NUMBER)
RETURN VARCHAR2 IS 
    V_NOMBRE VARCHAR2(100);
BEGIN
SELECT NOMBRE INTO V_NOMBRE
FROM AdminDB.FIDE_PROVINCIA_TB
WHERE PROVINCIA_ID= P_PROVINCIA_ID;
RETURN V_NOMBRE;
END; 

SELECT FIDE_PROVINCIA_TB_BUSCAR_NOMBRE_X_PROVINCIA_ID_FN(1) AS Provincia FROM DUAL;
/
--SELECCIONAR PROVINCIAS POR NOMBRE 
CREATE OR REPLACE FUNCTION FIDE_PROVINCIA_TB_BUSCAR_PROVINCIA_X_NOMBRE_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS 
    V_PROVINCIA_ID NUMBER;
BEGIN
SELECT PROVINCIA_ID INTO V_PROVINCIA_ID
FROM AdminDB.FIDE_PROVINCIA_TB
WHERE NOMBRE= P_NOMBRE;
RETURN V_PROVINCIA_ID;
END; 

SELECT FIDE_PROVINCIA_TB_BUSCAR_PROVINCIA_X_NOMBRE_FN('Alajuela') AS Provincia FROM DUAL;
/
SELECT * FROM AdminDB.FIDE_PROVINCIA_TB;
/
---ENLISTAR TODAS LAS PROVINCIAS DE LA TABLA 
CREATE OR REPLACE FUNCTION FIDE_PROVINCIA_TB_LISTA_PROVINICAS_FN
RETURN SYS.ODCIVARCHAR2LIST IS
    V_PROVINCIAS SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    FOR R IN (SELECT NOMBRE FROM AdminDB.FIDE_PROVINCIA_TB) LOOP
        V_PROVINCIAS.EXTEND;
        V_PROVINCIAS(V_PROVINCIAS.COUNT) := R.NOMBRE;
    END LOOP;

    RETURN V_PROVINCIAS;
EXCEPTION
    WHEN OTHERS THEN
        -- Retornar una lista vacía en caso de error
        RETURN SYS.ODCIVARCHAR2LIST();
END;
/
SELECT COLUMN_VALUE AS PROVINCIA
FROM TABLE(FIDE_PROVINCIA_TB_LISTA_PROVINICAS_FN());
----------------------------------------------------------
---FUNCIONES PARA CANTONES 
--SELECCIONAR CANTON POR ID 

CREATE OR REPLACE FUNCTION FIDE_CANTON_TB_NOMBRE_CANTON_FN(P_CANTON_ID NUMBER)
RETURN VARCHAR2 IS 
    V_NOMBRE VARCHAR2(100);
BEGIN
SELECT NOMBRE INTO V_NOMBRE
FROM AdminDB.FIDE_CANTON_TB
WHERE CANTON_ID= P_CANTON_ID;
RETURN V_NOMBRE;
END; 
/
SELECT FIDE_CANTON_TB_NOMBRE_CANTON_FN(1) AS CANTON FROM DUAL;
SELECT * FROM AdminDB.FIDE_CANTON_TB;

--SELECCIONAR CANTON POR NOMBRE 
CREATE OR REPLACE FUNCTION FIDE_CANTON_TB_BUSCAR_NOMBRE_CANTON_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS 
    V_CANTON_ID NUMBER;
BEGIN
SELECT CANTON_ID INTO V_CANTON_ID
FROM AdminDB.FIDE_CANTON_TB
WHERE NOMBRE= P_NOMBRE;
RETURN V_CANTON_ID;
END; 
/
SELECT FIDE_CANTON_TB_BUSCAR_NOMBRE_CANTON_FN('Central') AS CANTON FROM DUAL;
/

---ENLISTAR TODAS LOS CANTONES DE LA TABLA 
CREATE OR REPLACE FUNCTION FIDE_CANTON_TB_LISTA_CANTONES_FN
RETURN SYS.ODCIVARCHAR2LIST IS
    V_CANTONES SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    FOR R IN (SELECT NOMBRE FROM AdminDB.FIDE_CANTON_TB) LOOP
        V_CANTONES.EXTEND;
        V_CANTONES(V_CANTONES.COUNT) := R.NOMBRE;
    END LOOP;

    RETURN V_CANTONES;
EXCEPTION
    WHEN OTHERS THEN
        -- Retornar una lista vacía en caso de error
        RETURN SYS.ODCIVARCHAR2LIST();
END;
/
SELECT COLUMN_VALUE AS CANTON
FROM TABLE(FIDE_CANTON_TB_LISTA_CANTONES_FN());
---------------------------------------------------
----FUNCIONES DE DISTRITO

---SELECCIONAR DISTRITO POR ID
set serveroutput on;
CREATE OR REPLACE FUNCTION FIDE_DISTRITO_TB_BUSCAR_NOMBRE_X_DISTRITO_ID_FN(P_DISTRITO_ID NUMBER)
RETURN VARCHAR2 IS 
    V_NOMBRE VARCHAR2(100);
BEGIN
SELECT NOMBRE INTO V_NOMBRE
FROM AdminDB.FIDE_DISTRITO_TB
WHERE DISTRITO_ID= P_DISTRITO_ID;
RETURN V_NOMBRE;
END; 

SELECT FIDE_DISTRITO_TB_BUSCAR_NOMBRE_X_DISTRITO_ID_FN(1) AS DISTRITO FROM DUAL;
/
--SELECCIONAR DISTRITO POR NOMBRE 
CREATE OR REPLACE FUNCTION FIDE_DISTRITO_TB_BUSCAR_DISTRITO_X_NOMBRE_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS 
    V_DISTRITO_ID NUMBER;
BEGIN
SELECT DISTRITO_ID INTO V_DISTRITO_ID
FROM AdminDB.FIDE_DISTRITO_TB
WHERE NOMBRE= P_NOMBRE;
RETURN V_DISTRITO_ID;
END; 

SELECT FIDE_DISTRITO_TB_BUSCAR_DISTRITO_X_NOMBRE_FN('La Uruca') AS DISTRITO FROM DUAL;
/
SELECT * FROM AdminDB.FIDE_PROVINCIA_TB;
/
---ENLISTAR TODAS LOS DISTRITOS DE LA TABLA 
CREATE OR REPLACE FUNCTION FIDE_DISTRITO_TB_LISTA_DISTRITOS_FN
RETURN SYS.ODCIVARCHAR2LIST IS
    V_DISTRITOS SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
BEGIN
    FOR R IN (SELECT NOMBRE FROM AdminDB.FIDE_DISTRITO_TB) LOOP
        V_DISTRITOS.EXTEND;
        V_DISTRITOS(V_DISTRITOS.COUNT) := R.NOMBRE;
    END LOOP;

    RETURN V_DISTRITOS;
EXCEPTION
    WHEN OTHERS THEN
        -- Retornar una lista vacía en caso de error
        RETURN SYS.ODCIVARCHAR2LIST();
END;
/
SELECT COLUMN_VALUE AS DISTRITO
FROM TABLE(FIDE_DISTRITO_TB_LISTA_DISTRITOS_FN());
----------------------------------------------------------
-- FUNCIONES PARA LA TAB DIRECCIONES 
---CONTAR DIRECCIONES POR PROVINCIA 
--SE CREA OBJETO
CREATE OR REPLACE TYPE PROVINCIA_RESULTADO AS OBJECT (
    NOMBRE_PROVINCIA VARCHAR2(100),
    TOTAL_DIRECCIONES NUMBER
);
/
CREATE OR REPLACE FUNCTION FIDE_DIRECCION_TB_CONTAR_POR_PROVINCIA_FN(P_PROVINCIA_ID NUMBER)
RETURN PROVINCIA_RESULTADO IS
    V_NOMBRE_PROVINCIA VARCHAR2(100);
    V_TOTAL NUMBER;
BEGIN
    -- Obtener el nombre de la provincia
    SELECT NOMBRE
    INTO V_NOMBRE_PROVINCIA
    FROM AdminDB.FIDE_PROVINCIA_TB
    WHERE PROVINCIA_ID = P_PROVINCIA_ID;
    
    -- Contar direcciones
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_DIRECCION_TB
    WHERE PROVINCIA_ID = P_PROVINCIA_ID;
    
    -- Devolver el objeto
    RETURN PROVINCIA_RESULTADO(V_NOMBRE_PROVINCIA, V_TOTAL);
END;
/
SELECT 
    FIDE_DIRECCION_TB_CONTAR_POR_PROVINCIA_FN(1).NOMBRE_PROVINCIA AS NOMBRE_PROVINCIA,
    FIDE_DIRECCION_TB_CONTAR_POR_PROVINCIA_FN(1).TOTAL_DIRECCIONES AS TOTAL_DIRECCIONES
FROM DUAL;

---VALIDAR LA DIRECCION POR IDS 
CREATE OR REPLACE FUNCTION FIDE_DIRECCION_TB_VALIDAR_FN(
    P_PROVINCIA_ID NUMBER,
    P_CANTON_ID NUMBER,
    P_DISTRITO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_DIRECCION_TB
    WHERE PROVINCIA_ID = P_PROVINCIA_ID
      AND CANTON_ID = P_CANTON_ID
      AND DISTRITO_ID = P_DISTRITO_ID;

    -- Retornar 1 si existe, 0 si no existe
    RETURN CASE WHEN V_EXISTE > 0 THEN 1 ELSE 0 END;
END;
/
SELECT FIDE_DIRECCION_TB_VALIDAR_FN(1, 1, 1) AS DIRECCION_EXISTE FROM DUAL;


---OBTENER DETALLE DE DIRECCIONES
CREATE OR REPLACE FUNCTION FIDE_DIRECCION_TB_OBTENER_DETALLES_FN(
    P_DIRECCION_ID NUMBER
) RETURN VARCHAR2 IS
    V_DETALLES VARCHAR2(400);
BEGIN
    SELECT CONCAT(CONCAT(CONCAT(P.NOMBRE, ', '), C.NOMBRE), CONCAT(', ', CONCAT(D.NOMBRE, ': ')))
           || SENAS
    INTO V_DETALLES
    FROM AdminDB.FIDE_DIRECCION_TB DIR
    JOIN AdminDB.FIDE_PROVINCIA_TB P ON DIR.PROVINCIA_ID = P.PROVINCIA_ID
    JOIN AdminDB.FIDE_CANTON_TB C ON DIR.CANTON_ID = C.CANTON_ID
    JOIN AdminDB.FIDE_DISTRITO_TB D ON DIR.DISTRITO_ID = D.DISTRITO_ID
    WHERE DIR.DIRECCION_ID = P_DIRECCION_ID;

    RETURN V_DETALLES;
END;
/
SELECT FIDE_DIRECCION_TB_OBTENER_DETALLES_FN(1) AS DETALLES FROM DUAL;

-------CONCATENAR DIRECCION 
CREATE OR REPLACE FUNCTION FIDE_DIRECCION_TB_FORMATO_FN(
    P_DIRECCION_ID NUMBER
) RETURN VARCHAR2 IS
    V_FORMATO VARCHAR2(400);
BEGIN
    SELECT P.NOMBRE || ', ' || C.NOMBRE || ', ' || D.NOMBRE || ' - ' || DIR.SENAS
    INTO V_FORMATO
    FROM AdminDB.FIDE_DIRECCION_TB DIR
    JOIN AdminDB.FIDE_PROVINCIA_TB P ON DIR.PROVINCIA_ID = P.PROVINCIA_ID
    JOIN AdminDB.FIDE_CANTON_TB C ON DIR.CANTON_ID = C.CANTON_ID
    JOIN AdminDB.FIDE_DISTRITO_TB D ON DIR.DISTRITO_ID = D.DISTRITO_ID
    WHERE DIR.DIRECCION_ID = P_DIRECCION_ID;

    RETURN V_FORMATO;
END;
/ 
SELECT FIDE_DIRECCION_TB_FORMATO_FN(1) AS DIRECCION_EXACTA FROM DUAL;
/
--------------------------------------------------------------
FUNCIONES DE LA TABLA ESTADO 
---OBTENER NOMBRE DE ESTADO POR ID 
CREATE OR REPLACE FUNCTION FIDE_ESTADO_TB_OBTENER_NOMBRE_FN(P_ESTADO_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE_ESTADO VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE_ESTADO
    FROM AdminDB.FIDE_ESTADO_TB
    WHERE ESTADO_ID = P_ESTADO_ID;

    RETURN V_NOMBRE_ESTADO;
END;
/
SELECT FIDE_ESTADO_TB_OBTENER_NOMBRE_FN(1) AS ESTADO_NOMBRE FROM DUAL;
/
-----------VALIDA SI ESTA ACTIVO 
CREATE OR REPLACE FUNCTION FIDE_ESTADO_TB_VALIDAR_ACTIVO_FN(
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
BEGIN
    IF P_ESTADO_ID = 1 THEN
        RETURN 1;  -- Retorna 1 si el estado es "Activo"
    ELSE
        RETURN 0;  -- Retorna 0 si el estado no es "Activo"
    END IF;
END;
/

SELECT FIDE_ESTADO_TB_VALIDAR_ACTIVO_FN(1) AS ES_ACTIVO FROM DUAL;
/
--------------CONTAR REGISTROS POR ESTADO
CREATE OR REPLACE FUNCTION FIDE_ESTADO_TB_CONTAR_POR_ESTADO_FN(P_ESTADO_ID NUMBER) 
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_ESTADO_TB
    WHERE ESTADO_ID = P_ESTADO_ID;

    RETURN V_TOTAL;
END;
/
SELECT FIDE_ESTADO_TB_CONTAR_POR_ESTADO_FN(1) AS TOTAL_ACTIVOS FROM DUAL;
/
-----------DEVUELVE ESTADO INVERSO 
CREATE OR REPLACE FUNCTION FIDE_ESTADO_TB_OBTENER_ESTADO_INVERSO_FN(
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
    V_ESTADO_INVERSO NUMBER;
BEGIN
    IF P_ESTADO_ID = 1 THEN
        V_ESTADO_INVERSO := 2; -- Si es Activo, retorna Inactivo
    ELSE
        V_ESTADO_INVERSO := 1; -- Si es Inactivo, retorna Activo
    END IF;

    RETURN V_ESTADO_INVERSO;
END;
/
SELECT FIDE_ESTADO_TB_OBTENER_ESTADO_INVERSO_FN(1) AS ESTADO_INVERSO FROM DUAL;
----------------------------------------------------------------
---------------------FUNCIONES DE TAB ROL
---VALIDA SI EL ROL ES ADMIN
CREATE OR REPLACE FUNCTION FIDE_ROL_TB_VALIDAR_ADMIN_FN(P_ROL_ID NUMBER) 
RETURN NUMBER IS
BEGIN
    IF P_ROL_ID = 1 THEN
        RETURN 1;  -- Retorna 1 si el rol es "Administrador"
    ELSE
        RETURN 0;  -- Retorna 0 si no es "Administrador"
    END IF;
END;
/
SELECT FIDE_ROL_TB_VALIDAR_ADMIN_FN(1) AS ROL_ADMIN FROM DUAL;
/
----------VALIDA SI ES USUARIO 
CREATE OR REPLACE FUNCTION FIDE_ROL_TB_VALIDAR_USUARIO_FN(
    P_ROL_ID NUMBER
) RETURN NUMBER IS
BEGIN
    IF P_ROL_ID = 2 THEN
        RETURN 1;  -- Retorna 1 si el rol es "Usuario"
    ELSE
        RETURN 0;  -- Retorna 0 si no es "Usuario"
    END IF;
END;
/
SELECT FIDE_ROL_TB_VALIDAR_USUARIO_FN(2) AS ROL_USUARIO FROM DUAL;
/

---Obtener nombre de rol 

CREATE OR REPLACE FUNCTION FIDE_ROL_TB_OBTENER_NOMBRE_FN(P_ROL_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE_ROL VARCHAR2(50);
BEGIN
    IF P_ROL_ID = 1 THEN
        V_NOMBRE_ROL := 'Administrador';
    ELSIF P_ROL_ID = 2 THEN
        V_NOMBRE_ROL := 'Usuario';
    ELSE
        V_NOMBRE_ROL := 'Desconocido';  -- En caso de que no sea 1 ni 2
    END IF;

    RETURN V_NOMBRE_ROL;
END;
/
SELECT FIDE_ROL_TB_OBTENER_NOMBRE_FN(1) AS NOMBRE_ROL FROM DUAL;
/
-------------------------------------------------------------
--------------FUNCIONES USUARIOS


-----VERIFICA SI UN USUARIO ESTÁ ACTIVO
CREATE OR REPLACE FUNCTION FIDE_USUARIO_TB_VERIFICAR_ACTIVO_FN(P_USUARIO_ID NUMBER) 
RETURN NUMBER IS
    V_ESTADO_ID NUMBER;
BEGIN
    -- Obtener el estado del usuario
    SELECT ESTADO_ID
    INTO V_ESTADO_ID
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    -- Verificar si el usuario está activo (ESTADO_ID = 1)
    IF V_ESTADO_ID = 1 THEN
        RETURN 1;  -- Usuario activo
    ELSE
        RETURN 0;  -- Usuario inactivo
    END IF;
END;
/

SELECT FIDE_USUARIO_TB_VERIFICAR_ACTIVO_FN(1) AS ESTA_ACTIVO FROM DUAL;


-----CONTAR CANTIDAD DE USUARIOS ACTIVOS 
CREATE OR REPLACE FUNCTION FIDE_USUARIO_TB_CONTAR_ACTIVOS_FN 
RETURN NUMBER IS
    V_CANTIDAD_ACTIVOS NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD_ACTIVOS
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE ESTADO_ID = 1;  -- Solo cuenta los usuarios activos

    RETURN V_CANTIDAD_ACTIVOS;
END;
/
SELECT FIDE_USUARIO_TB_CONTAR_ACTIVOS_FN FROM DUAL;  -- Devuelve el número de usuarios activos



----VALIDA EL ROL DEL USUARIO
CREATE OR REPLACE FUNCTION FIDE_USUARIO_TB_VERIFICAR_ROL_FN(P_USUARIO_ID NUMBER, P_ROL_ID NUMBER) 
RETURN NUMBER IS
    V_ROL_ID NUMBER;
BEGIN
    -- Verifica si el usuario tiene el rol
    SELECT ROL_ID 
    INTO V_ROL_ID
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    IF V_ROL_ID = P_ROL_ID THEN
        RETURN 1;  -- El usuario tiene el rol especificado (TRUE)
    ELSE
        RETURN 0;  -- El usuario no tiene el rol especificado (FALSE)
    END IF;
END;
/
SELECT FIDE_USUARIO_TB_VERIFICAR_ROL_FN(1, 1) AS ADMINISTRADORES FROM DUAL; 
/
-----OBTENER EL NOMBRE COMPLETO DEL USUARIO 
CREATE OR REPLACE FUNCTION FIDE_USUARIO_TB_OBTENER_NOMBRE_COMPLETO_FN(
    P_USUARIO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE_COMPLETO VARCHAR2(200);
BEGIN
    SELECT NOMBRE || ' ' || APELLIDO
    INTO V_NOMBRE_COMPLETO
    FROM AdminDB.FIDE_USUARIO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    RETURN V_NOMBRE_COMPLETO;
END;
/
SELECT FIDE_USUARIO_TB_OBTENER_NOMBRE_COMPLETO_FN(1) AS NOMBRE_COMPLETO FROM DUAL;  -- Devuelve el nombre completo del usuario con ID 1

------------------------------------------------------------
-------TABLAS DE PRODUCTOS
---------FUNCIONES DE TAB DE CATEGORIA

----VERIFICA SI CATEGORIA EXISTE POR NOMBRE 
CREATE OR REPLACE FUNCTION FIDE_CATEGORIA_TB_EXISTE_FN(P_NOMBRE VARCHAR2) 
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_CATEGORIA_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- La categoría existe
    ELSE
        RETURN 0; -- La categoría no existe
    END IF;
END;
/
SELECT FIDE_CATEGORIA_TB_EXISTE_FN('Botanica') AS CATEGORIA_EXISTE FROM DUAL;
/
----OBTENER CATEGORIA POR ID 

CREATE OR REPLACE FUNCTION FIDE_CATEGORIA_TB_OBTENER_NOMBRE_FN(P_CATEGORIA_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_CATEGORIA_TB
    WHERE CATEGORIA_ID = P_CATEGORIA_ID;

    RETURN V_NOMBRE;
END;
/
SELECT FIDE_CATEGORIA_TB_OBTENER_NOMBRE_FN(5) AS NOMBRE_CATEGORIA FROM DUAL;
/
SELECT * FROM AdminDB.FIDE_CATEGORIA_TB;
/
---CONTAR TOTAL DE CATEGORIAS 
CREATE OR REPLACE FUNCTION FIDE_CATEGORIA_TB_CONTAR_TOTAL_FN 
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_CATEGORIA_TB;

    RETURN V_TOTAL;
END;
/
SELECT FIDE_CATEGORIA_TB_CONTAR_TOTAL_FN() AS TOTAL_CATEGORIAS FROM DUAL;
/
-------------------------------------------
---FUNCIONES PARA PRODUCTOS 
CREATE OR REPLACE FUNCTION FIDE_PRODUCTO_TB_EXISTE_FN(P_NOMBRE VARCHAR2)
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- El producto existe
    ELSE
        RETURN 0; -- El producto no existe
    END IF;
END;
/
----OBTENER PRECIO DE UN PRODUCTO X ID 
CREATE OR REPLACE FUNCTION FIDE_PRODUCTO_TB_OBTENER_PRECIO_FN(P_PRODUCTO_ID NUMBER)
RETURN DECIMAL IS
    V_PRECIO DECIMAL(10, 2);
BEGIN
    SELECT PRECIO_UNIT
    INTO V_PRECIO
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    RETURN V_PRECIO;
END;
/
SELECT FIDE_PRODUCTO_TB_OBTENER_PRECIO_FN(1) AS PRECIO FROM DUAL;
/
---CONTAR PRODUCTOS POR CATEGORÍA 
CREATE OR REPLACE FUNCTION FIDE_PRODUCTO_TB_CONTAR_POR_CATEGORIA_FN(P_CATEGORIA_ID NUMBER)
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE CATEGORIA_ID = P_CATEGORIA_ID;

    RETURN V_COUNT;
END;
/
SELECT FIDE_PRODUCTO_TB_CONTAR_POR_CATEGORIA_FN(5) AS TOTAL_PRODUCTOS FROM DUAL;
/
SELECT * FROM AdminDB.FIDE_CATEGORIA_TB;
/
---OBTENER DESCRIPCION DEL PRODUCTO 
CREATE OR REPLACE FUNCTION FIDE_PRODUCTO_TB_OBTENER_DESCRIPCION_FN(P_PRODUCTO_ID NUMBER)
RETURN VARCHAR2 IS
    V_DESCRIPCION VARCHAR2(250);
BEGIN
    SELECT DESCRIPCION
    INTO V_DESCRIPCION
    FROM AdminDB.FIDE_PRODUCTO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    RETURN V_DESCRIPCION;
END;
/
SELECT FIDE_PRODUCTO_TB_OBTENER_DESCRIPCION_FN(1) AS DESCRIPCION FROM DUAL;
/
---------------------------------------------------------------------
-----------FUNCIONES DE LA TABLA INVENTARIO
SELECT * FROM AdminDB.FIDE_INVENTARIO_TB;
/
---VERIFICA SI UN PRODUCTO ESTA EN STOCK 
CREATE OR REPLACE FUNCTION FIDE_INVENTARIO_TB_VERIFICAR_STOCK_FN(
    P_PRODUCTO_ID NUMBER
) RETURN NUMBER IS
    V_STOCK NUMBER;
BEGIN
    SELECT STOCK 
    INTO V_STOCK
    FROM AdminDB.FIDE_INVENTARIO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    IF V_STOCK > 0 THEN
        RETURN 1; -- Hay stock disponible
    ELSE
        RETURN 0; -- No hay stock
    END IF;
END;
/
SELECT FIDE_INVENTARIO_TB_VERIFICAR_STOCK_FN(2) AS TIENE_STOCK FROM DUAL;
/
---CALCULAR DIAS DE VIDA DEL PRODUCTO
CREATE OR REPLACE FUNCTION FIDE_INVENTARIO_TB_DIAS_PARA_VENCER_FN(
    P_INVENTARIO_ID NUMBER
) RETURN NUMBER IS
    V_DIAS_RESTANTES NUMBER;
BEGIN
    SELECT TRUNC(FECHA_VENCIMIENTO - SYSDATE)
    INTO V_DIAS_RESTANTES
    FROM AdminDB.FIDE_INVENTARIO_TB
    WHERE INVENTARIO_ID = P_INVENTARIO_ID;

    RETURN V_DIAS_RESTANTES;
END;
/
SELECT FIDE_INVENTARIO_TB_DIAS_PARA_VENCER_FN(2) AS DIAS_PARA_VENCER FROM DUAL;
/
---VERIFICA SI EL PRODUCTO ESTA ACTIVO EN EL INVENTARIO
CREATE OR REPLACE FUNCTION FIDE_INVENTARIO_TB_VERIFICAR_ACTIVO_FN(
    P_PRODUCTO_ID NUMBER
) RETURN NUMBER IS
    V_ESTADO_ID NUMBER;
BEGIN
    SELECT ESTADO_ID
    INTO V_ESTADO_ID
    FROM AdminDB.FIDE_INVENTARIO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    IF V_ESTADO_ID = 1 THEN
        RETURN 1; -- Producto activo
    ELSE
        RETURN 0; -- Producto inactivo
    END IF;
END;
/
SELECT FIDE_INVENTARIO_TB_VERIFICAR_ACTIVO_FN(2) AS ES_ACTIVO FROM DUAL;
/
---CLACULA VALOR TOTAL DEL PRODUCTO EN EL INVENTARIO 
CREATE OR REPLACE FUNCTION FIDE_INVENTARIO_TB_CALCULAR_VALOR_TOTAL_FN(
    P_PRODUCTO_ID NUMBER
) RETURN NUMBER IS
    V_VALOR_TOTAL NUMBER;
BEGIN
    SELECT STOCK * PRECIO_UNIT
    INTO V_VALOR_TOTAL
    FROM AdminDB.FIDE_INVENTARIO_TB
    WHERE PRODUCTO_ID = P_PRODUCTO_ID;

    RETURN V_VALOR_TOTAL;
END;
/
SELECT FIDE_INVENTARIO_TB_CALCULAR_VALOR_TOTAL_FN(2) AS VALOR_TOTAL FROM DUAL;
/
--------------------------------------
---------FUNCIONES PARA TABLA TIPO DE CURSO 
---VERIFICA SI EL TIPO DE CURSO EXISTE 
CREATE OR REPLACE FUNCTION FIDE_TIPO_CURSO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) 
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_TIPO_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- El curso existe
    ELSE
        RETURN 0; -- El curso no existe
    END IF;
END;
/
SELECT FIDE_TIPO_CURSO_TB_EXISTE_FN('Botanica Avanzada') AS CURSO_EXISTE FROM DUAL;
/
---OBTENER NOMBRE DEL CURSO POR ID 
CREATE OR REPLACE FUNCTION FIDE_TIPO_CURSO_TB_OBTENER_NOMBRE_FN(P_TIPO_CURSO_ID NUMBER) 
RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_TIPO_CURSO_TB
    WHERE TIPO_CURSO_ID = P_TIPO_CURSO_ID;

    RETURN V_NOMBRE;
END;
/
SELECT FIDE_TIPO_CURSO_TB_OBTENER_NOMBRE_FN(1) AS NOMBRE_CURSO FROM DUAL;
/
-----CONTAR LOS CURSOS REGISTRADOS 
CREATE OR REPLACE FUNCTION FIDE_TIPO_CURSO_TB_CONTAR_FN
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_TIPO_CURSO_TB;

    RETURN V_COUNT;
END;
/
SELECT FIDE_TIPO_CURSO_TB_CONTAR_FN() AS TOTAL_CURSOS FROM DUAL;
/
------- OBTENER ID DE CURSO POR NOMBRE 
CREATE OR REPLACE FUNCTION FIDE_TIPO_CURSO_TB_OBTENER_ID_FN(
    P_NOMBRE VARCHAR2
) RETURN NUMBER IS
    V_TIPO_CURSO_ID NUMBER;
BEGIN
    SELECT TIPO_CURSO_ID
    INTO V_TIPO_CURSO_ID
    FROM AdminDB.FIDE_TIPO_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    RETURN V_TIPO_CURSO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- El curso no existe
END;
/
SELECT FIDE_TIPO_CURSO_TB_OBTENER_ID_FN('Decoracion Navideña') AS CURSO_ID FROM DUAL;
/
--------------------------------------------------------------
--------FUNCIONES PARA TABLA CURSO
----VERIFICA SI EXISTE POR NOMBRE 
CREATE OR REPLACE FUNCTION FIDE_CURSO_TB_EXISTE_FN(
    P_NOMBRE VARCHAR2
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    IF V_COUNT > 0 THEN
        RETURN 1; -- El curso existe
    ELSE
        RETURN 0; -- El curso no existe
    END IF;
END;
/
SELECT FIDE_CURSO_TB_EXISTE_FN('Curso de Botánica') AS CURSO_EXISTE FROM DUAL;
/
SELECT * FROM AdminDB.FIDE_CURSO_TB;
---------OBTENER ID DE CURSO 
CREATE OR REPLACE FUNCTION FIDE_CURSO_TB_OBTENER_ID_FN(P_NOMBRE VARCHAR2) RETURN NUMBER IS
    V_CURSO_ID NUMBER;
BEGIN
    SELECT CURSO_ID
    INTO V_CURSO_ID
    FROM AdminDB.FIDE_CURSO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    RETURN V_CURSO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- El curso no existe
END;
/
SELECT FIDE_CURSO_TB_OBTENER_ID_FN('Botanica Avanzada') AS CURSO_ID FROM DUAL;
/
-----FUNCIONES PARA TABLAS DE SERVICIO 
-----VERIFICA SI EL SERVICIO EXISTE
CREATE OR REPLACE FUNCTION FIDE_SERVICIO_TB_EXISTE_FN(P_NOMBRE VARCHAR2) 
RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_SERVICIO_TB
    WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE);

    RETURN CASE
        WHEN V_COUNT > 0 THEN 1 -- Existe
        ELSE 0 -- No existe
    END;
END;
/
SELECT FIDE_SERVICIO_TB_EXISTE_FN('Presencial') AS EXISTE FROM DUAL;
/
-----OBTENER DESCRIPCION DE SERVICIO POR ID
CREATE OR REPLACE FUNCTION FIDE_SERVICIO_TB_OBTENER_DESCRIPCION_FN(P_SERVICIO_ID NUMBER) 
RETURN VARCHAR2 IS
    V_DESCRIPCION VARCHAR2(250);
BEGIN
    SELECT DESCRIPCION
    INTO V_DESCRIPCION
    FROM AdminDB.FIDE_SERVICIO_TB
    WHERE SERVICIO_ID = P_SERVICIO_ID;

    RETURN V_DESCRIPCION;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Servicio no encontrado';
END;
/
SELECT FIDE_SERVICIO_TB_OBTENER_DESCRIPCION_FN(1) AS DESCRIPCION FROM DUAL;
/
---CONTAR LOS SERVICIOS DE LA TABLA
CREATE OR REPLACE FUNCTION FIDE_SERVICIO_TB_CONTAR_FN
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_SERVICIO_TB;

    RETURN V_TOTAL;
END;
/
SELECT FIDE_SERVICIO_TB_CONTAR_FN() AS TOTAL_SERVICIOS FROM DUAL;
/
---OBTENER NOMBRE DEL SERVICIO POR ID 
CREATE OR REPLACE FUNCTION FIDE_SERVICIO_TB_OBTENER_NOMBRE_FN(
    P_SERVICIO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_SERVICIO_TB
    WHERE SERVICIO_ID = P_SERVICIO_ID;

    RETURN V_NOMBRE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Servicio no encontrado';
END;
/
SELECT FIDE_SERVICIO_TB_OBTENER_NOMBRE_FN(2) AS NOMBRE FROM DUAL;
/
-----------------------------------------------------
---------FUNCIONES PARA LA TABLA DE EVENTOS 
----VERIFICA SI EXISTE EL EVENTO
CREATE OR REPLACE FUNCTION FIDE_EVENTO_TB_EXISTE_FN(
    P_EVENTO_ID NUMBER
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE EVENTO_ID = P_EVENTO_ID;

    RETURN CASE
        WHEN V_COUNT > 0 THEN 1 -- Existe
        ELSE 0 -- No existe
    END;
END;
/
SELECT FIDE_EVENTO_TB_EXISTE_FN(1) AS EXISTE FROM DUAL;
/
------OBTENER ESTADO DEL EVENTO POR ID 
CREATE OR REPLACE FUNCTION FIDE_EVENTO_TB_OBTENER_ESTADO_FN(P_EVENTO_ID NUMBER) 
RETURN NUMBER IS
    V_ESTADO_ID NUMBER;
BEGIN
    SELECT ESTADO_ID
    INTO V_ESTADO_ID
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE EVENTO_ID = P_EVENTO_ID;

    RETURN V_ESTADO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- Evento no encontrado
END;
/
SELECT FIDE_EVENTO_TB_OBTENER_ESTADO_FN(1) AS ESTADO FROM DUAL;
/
---------CONTAR EVENTOS PROGRAMAS EN LA MISMA FECHA 
CREATE OR REPLACE FUNCTION FIDE_EVENTO_TB_CONTAR_POR_FECHA_FN(
    P_FECHA DATE
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE FECHA = P_FECHA;

    RETURN V_COUNT;
END;
/
SELECT FIDE_EVENTO_TB_CONTAR_POR_FECHA_FN(TO_DATE('2025-01-20', 'YYYY-MM-DD')) AS EVENTOS FROM DUAL;
/
---FUNCION PARA OBTENER EL SERVICIO DE UN EVENTO
CREATE OR REPLACE FUNCTION FIDE_EVENTO_TB_OBTENER_SERVICIO_FN(
    P_EVENTO_ID NUMBER
) RETURN NUMBER IS
    V_SERVICIO_ID NUMBER;
BEGIN
    SELECT SERVICIO_ID
    INTO V_SERVICIO_ID
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE EVENTO_ID = P_EVENTO_ID;

    RETURN V_SERVICIO_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL; -- Evento no encontrado
END;
/
SELECT FIDE_EVENTO_TB_OBTENER_SERVICIO_FN(1) AS SERVICIO FROM DUAL;
/
----OBTENER EVENTOS PROGRAMADOS POR USUARIO
CREATE OR REPLACE FUNCTION FIDE_EVENTO_TB_CONTAR_POR_USUARIO_FN(
    P_USUARIO_ID NUMBER
) RETURN NUMBER IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM AdminDB.FIDE_EVENTO_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    RETURN V_COUNT;
END;
/
SELECT FIDE_EVENTO_TB_CONTAR_POR_USUARIO_FN(1) AS EVENTOS_USUARIO FROM DUAL;
/
------------------------------------------------------
------FUNCIONES DE LA TABLA CITA
---OBTENER TOTAL DE CITAS POR ESTADO 
CREATE OR REPLACE FUNCTION FIDE_CITA_TB_CITAS_POR_ESTADO_FN(
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
    V_CANTIDAD NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD
    FROM AdminDB.FIDE_CITA_TB
    WHERE ESTADO_ID = P_ESTADO_ID;

    RETURN V_CANTIDAD;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END;
/
SELECT FIDE_CITA_TB_CITAS_POR_ESTADO_FN(1) FROM DUAL;
/
-------OBTENER LAS CITAS POR USUARIOS
CREATE OR REPLACE FUNCTION FIDE_CITA_TB_CITAS_POR_USUARIO_FN(
    P_USUARIO_ID NUMBER
) RETURN NUMBER IS
    V_CANTIDAD NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD
    FROM AdminDB.FIDE_CITA_TB
    WHERE USUARIO_ID = P_USUARIO_ID;

    RETURN V_CANTIDAD;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END;
/
SELECT FIDE_CITA_TB_CITAS_POR_USUARIO_FN(1) AS TOTAL_CITAS FROM DUAL;
/
----VERIFICA SI EL USUARIO TIENE CITAS
CREATE OR REPLACE FUNCTION FIDE_CITA_TB_TIENES_CITAS_FUTURAS_FN(
    P_USUARIO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_CITA_TB
    WHERE USUARIO_ID = P_USUARIO_ID AND FECHA > SYSDATE;

    IF V_EXISTE > 0 THEN
        RETURN 1; -- Tiene citas futuras
    ELSE
        RETURN 0; -- No tiene citas futuras
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END;
/
SELECT FIDE_CITA_TB_TIENES_CITAS_FUTURAS_FN(1) AS CITAS_AGENDADAS FROM DUAL;
/
----VERIFICA EL ESTADO DE LA CITA DE UN SERVICIO 
CREATE OR REPLACE FUNCTION FIDE_CITA_TB_ESTADO_POR_SERVICIO_FN(
    P_SERVICIO_ID NUMBER,
    P_ESTADO_ID NUMBER
) RETURN NUMBER IS
    V_CANTIDAD NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CANTIDAD
    FROM AdminDB.FIDE_CITA_TB
    WHERE SERVICIO_ID = P_SERVICIO_ID AND ESTADO_ID = P_ESTADO_ID;

    RETURN V_CANTIDAD;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END;
/
SELECT FIDE_CITA_TB_ESTADO_POR_SERVICIO_FN(1, 2) AS ESTADO_DEL_SERVICIO FROM DUAL;
/
---------------------------------------------------
----FUNCIONES TABLAS DE MODULO DE COMPRAS 
----FUNCIONES METODO DE PAGO
----VERIFICA SI EXISTE METODO DE PAGO POR ID 
CREATE OR REPLACE FUNCTION FIDE_METODO_PAGO_TB_EXISTE_FN(
    P_METODO_PAGO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_METODO_PAGO_TB
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;

    IF V_EXISTE > 0 THEN
        RETURN 1; -- El método de pago existe
    ELSE
        RETURN 0; -- El método de pago no existe
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END;
/
SELECT FIDE_METODO_PAGO_TB_EXISTE_FN(1) AS EXISTE_METODO FROM DUAL;
/
---------OBTENER NOMBRE DE UN METODO DE PAGO 
CREATE OR REPLACE FUNCTION FIDE_METODO_PAGO_TB_NOMBRE_FN(
    P_METODO_PAGO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM AdminDB.FIDE_METODO_PAGO_TB
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;

    RETURN V_NOMBRE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Método de pago no encontrado'; -- No se encontró el método
    WHEN OTHERS THEN
        RETURN 'Error inesperado'; -- Error inesperado
END;
/
SELECT FIDE_METODO_PAGO_TB_NOMBRE_FN(1) FROM DUAL;
/
-----VERIFICA SI UN METODO ESTA ASOCIADO A UNA COMPRA
CREATE OR REPLACE FUNCTION FIDE_METODO_PAGO_TB_ASOCIADO_COMPRA_FN(
    P_METODO_PAGO_ID NUMBER
) RETURN NUMBER IS
    V_EXISTE NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_EXISTE
    FROM AdminDB.FIDE_COMPRA_TB
    WHERE METODO_PAGO_ID = P_METODO_PAGO_ID;

    IF V_EXISTE > 0 THEN
        RETURN 1; -- El método de pago está asociado a una compra
    ELSE
        RETURN 0; -- El método de pago no está asociado a ninguna compra
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END;
/
SELECT FIDE_METODO_PAGO_TB_ASOCIADO_COMPRA_FN(1) FROM DUAL;
/
-----OBTENER TOTAL DE METODOS DE PAGO 
CREATE OR REPLACE FUNCTION FIDE_METODO_PAGO_TB_TOTAL_FN
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_METODO_PAGO_TB;

    RETURN V_TOTAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END;
/
SELECT FIDE_METODO_PAGO_TB_TOTAL_FN FROM DUAL;
/
-------------------------------------
-----------FUNCIONES DE DESCUENTOS
----OBTENER EL PORCENTAJE DE DESCUENTO POR ID 
CREATE OR REPLACE FUNCTION FIDE_DESCUENTO_TB_PORCENTAJE_FN(
    P_DESCUENTO_ID NUMBER
) RETURN NUMBER IS
    V_PORCENTAJE NUMBER;
BEGIN
    SELECT PORCENTAJE
    INTO V_PORCENTAJE
    FROM AdminDB.FIDE_DESCUENTO_TB
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;

    RETURN V_PORCENTAJE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN -1; -- No se encontró el descuento
    WHEN OTHERS THEN
        RETURN -2; -- Error inesperado
END;
/
SELECT FIDE_DESCUENTO_TB_PORCENTAJE_FN(1) AS DESCUENTO FROM DUAL;
/
-------OBTENER NOMBRE Y PORCENTAJE DE DESCUENTO

SELECT * FROM AdminDB.FIDE_DESCUENTO_TB;

CREATE OR REPLACE FUNCTION FIDE_DESCUENTO_TB_NOMBRE_Y_PORCENTAJE_FN(
    P_DESCUENTO_ID NUMBER
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(100);
    V_PORCENTAJE NUMBER;
BEGIN
    SELECT NOMBRE, PORCENTAJE
    INTO V_NOMBRE, V_PORCENTAJE
    FROM AdminDB.FIDE_DESCUENTO_TB
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;

    RETURN 'Nombre: ' || V_NOMBRE || ', Porcentaje: ' || V_PORCENTAJE || '%';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Descuento no encontrado';
    WHEN OTHERS THEN
        RETURN 'Error inesperado';
END;
/
SELECT FIDE_DESCUENTO_TB_NOMBRE_Y_PORCENTAJE_FN(1) DESCUENTO FROM DUAL;
/
----CALCULAR EL DESCUENTO SOBRE EL PRECIO 
CREATE OR REPLACE FUNCTION FIDE_DESCUENTO_TB_VALOR_DESCUENTO_FN(
    P_DESCUENTO_ID NUMBER,
    P_PRECIO_ORIGINAL NUMBER
) RETURN NUMBER IS
    V_PORCENTAJE NUMBER;
    V_DESCUENTO_VALUE NUMBER;
BEGIN
    -- Obtener el porcentaje del descuento
    SELECT PORCENTAJE
    INTO V_PORCENTAJE
    FROM AdminDB.FIDE_DESCUENTO_TB
    WHERE DESCUENTO_ID = P_DESCUENTO_ID;

    -- Calcular el valor del descuento
    V_DESCUENTO_VALUE := P_PRECIO_ORIGINAL * (V_PORCENTAJE / 100);

    RETURN V_DESCUENTO_VALUE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN -1; -- Descuento no encontrado
    WHEN OTHERS THEN
        RETURN -2; -- Error inesperado
END;
/
SELECT FIDE_DESCUENTO_TB_VALOR_DESCUENTO_FN(1, 1000)AS TOTAL_CON_DESCUENTO FROM DUAL;
/
---- OBTENER TODOS LOS DESCUENTOS DISPONIBLES 
CREATE OR REPLACE FUNCTION FIDE_DESCUENTO_TB_TOTAL_FN
RETURN NUMBER IS
    V_TOTAL NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_TOTAL
    FROM AdminDB.FIDE_DESCUENTO_TB;

    RETURN V_TOTAL;
EXCEPTION
    WHEN OTHERS THEN
        RETURN -1; -- Error inesperado
END;
/
SELECT FIDE_DESCUENTO_TB_TOTAL_FN AS DESCUENTOS_DISPONIBLES FROM DUAL;

------------------------------------------
-----FUNCIONES PARA TABLA COMPRA
---OBTENER DETALLES DE TIPOS DE COMPRA 
CREATE OR REPLACE FUNCTION ObtenerDetalleTipoCompra(
    p_tipo_compra_id IN NUMBER
) RETURN VARCHAR2 IS
    v_resultado VARCHAR2(4000);
BEGIN
    SELECT 
        'Producto: ' || p.PRODUCTO_NOMBRE
    INTO v_resultado
    FROM AdminDB.FIDE_TIPO_COMPRA_TB tc
    JOIN AdminDB.FIDE_PRODUCTO_TB p ON tc.PRODUCTO_ID = p.PRODUCTO_ID
    WHERE tc.TIPO_COMPRA_ID = p_tipo_compra_id
    AND tc.PRODUCTO_ID IS NOT NULL;

    RETURN v_resultado;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        BEGIN
            SELECT 
                'Curso: ' || c.NOMBRE
            INTO v_resultado
            FROM AdminDB.FIDE_TIPO_COMPRA_TB tc
            JOIN AdminDB.FIDE_CURSO_TB c ON tc.CURSO_ID = c.CURSO_ID
            WHERE tc.TIPO_COMPRA_ID = p_tipo_compra_id
            AND tc.CURSO_ID IS NOT NULL;

            RETURN v_resultado;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                SELECT 
                    'Servicio: ' || s.NOMBRE
                INTO v_resultado
                FROM AdminDB.FIDE_TIPO_COMPRA_TB tc
                JOIN AdminDB.FIDE_SERVICIO_TB s ON tc.SERVICIO_ID = s.SERVICIO_ID
                WHERE tc.TIPO_COMPRA_ID = p_tipo_compra_id
                AND tc.SERVICIO_ID IS NOT NULL;

                RETURN v_resultado;
        END;
END;
/
SELECT ObtenerDetalleTipoCompra(1) FROM DUAL;
/
----CONTAR NUMEROS DE TIPOS DE COMPRAS 
CREATE OR REPLACE FUNCTION ContarTiposCompra(
    p_categoria IN VARCHAR2
) RETURN NUMBER IS
    v_cuenta NUMBER;
BEGIN
    IF UPPER(p_categoria) = 'PRODUCTO' THEN
        SELECT COUNT(*) INTO v_cuenta
        FROM AdminDB.FIDE_TIPO_COMPRA_TB
        WHERE PRODUCTO_ID IS NOT NULL;

    ELSIF UPPER(p_categoria) = 'CURSO' THEN
        SELECT COUNT(*) INTO v_cuenta
        FROM AdminDB.FIDE_TIPO_COMPRA_TB
        WHERE CURSO_ID IS NOT NULL;

    ELSIF UPPER(p_categoria) = 'SERVICIO' THEN
        SELECT COUNT(*) INTO v_cuenta
        FROM AdminDB.FIDE_TIPO_COMPRA_TB
        WHERE SERVICIO_ID IS NOT NULL;

    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Categoría no válida. Use PRODUCTO, CURSO o SERVICIO.');
    END IF;

    RETURN v_cuenta;
END;
/
SELECT ContarTiposCompra('Producto') AS TIPO_DE_COMPRA FROM DUAL;
/
----VALIDAR SI EXISTE 
CREATE OR REPLACE FUNCTION ExisteTipoCompra(
    p_tipo_compra_id IN NUMBER
) RETURN BOOLEAN IS
    v_existe NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_existe
    FROM AdminDB.FIDE_TIPO_COMPRA_TB
    WHERE TIPO_COMPRA_ID = p_tipo_compra_id;

    RETURN v_existe > 0;
END;
/
SELECT CASE WHEN ExisteTipoCompra(1) THEN 'EXISTE' ELSE 'NO EXISTE' END AS RESULTADO FROM DUAL;
/
-----------------------
-------DETALLE DE FACTURA 
CREATE OR REPLACE FUNCTION CalcularTotalFactura(
    p_detalle_factura_id IN NUMBER
) RETURN NUMBER IS
    v_total NUMBER;
BEGIN
    SELECT SUM(CANTIDAD_LINEAS * TOTAL_POR_LINEA)
    INTO v_total
    FROM AdminDB.FIDE_DETALLE_FACTURA_TB
    WHERE DETALLE_FACTURA_ID = p_detalle_factura_id;

    RETURN v_total;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0; -- Retornar 0 si no se encuentra la factura
END;
/
SELECT CalcularTotalFactura(1) FROM DUAL;
/
---obtener detalle de factura 
CREATE OR REPLACE FUNCTION ObtenerDetalleFactura(
    p_detalle_factura_id IN NUMBER
) RETURN VARCHAR2 IS
    v_resultado VARCHAR2(4000);
BEGIN
    SELECT LISTAGG('Línea: ' || CANTIDAD_LINEAS || ', Total: ' || TOTAL_POR_LINEA, '; ')
           WITHIN GROUP (ORDER BY DETALLE_FACTURA_ID)
    INTO v_resultado
    FROM AdminDB.FIDE_DETALLE_FACTURA_TB
    WHERE DETALLE_FACTURA_ID = p_detalle_factura_id;

    RETURN v_resultado;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'No se encontraron detalles para la factura especificada.';
END;
/
SELECT ObtenerDetalleFactura(1) FROM DUAL;
/
---- --------------
------FUNCIONES DE LA TABLA FACTURA 
CREATE OR REPLACE FUNCTION CalcularMontoTotal(FACTURA_ID_IN NUMBER)
RETURN NUMBER IS
    monto_total NUMBER;
BEGIN
    SELECT (SUBTOTAL - (SUBTOTAL * (SELECT PORCENTAJE FROM AdminDB.FIDE_DESCUENTO_TB WHERE DESCUENTO_ID = f.DESCUENTO_ID) / 100) + IVA)
    INTO monto_total
    FROM AdminDB.FIDE_FACTURA_TB f
    WHERE FACTURA_ID = FACTURA_ID_IN;

    RETURN monto_total;
END;
/
SELECT CalcularMontoTotal(1) FROM DUAL;
/
---OBTENER EL IVA DE LA FACTURA 
CREATE OR REPLACE FUNCTION ObtenerIVA(FACTURA_ID_IN NUMBER)
RETURN NUMBER IS
    iva_aplicado NUMBER;
BEGIN
    SELECT IVA
    INTO iva_aplicado
    FROM AdminDB.FIDE_FACTURA_TB
    WHERE FACTURA_ID = FACTURA_ID_IN;

    RETURN iva_aplicado;
END;
/
SELECT ObtenerIVA(2) FROM DUAL;
---- OBTENER RESUMEN DE FACTURACION 
CREATE OR REPLACE FUNCTION ResumenFacturacionUsuario(USUARIO_ID_IN NUMBER)
RETURN VARCHAR2 IS
    resumen VARCHAR2(200);
    total_facturas NUMBER;
    monto_total NUMBER;
    promedio_facturacion NUMBER;
BEGIN
    SELECT COUNT(*), SUM(MONTO_TOTAL), AVG(MONTO_TOTAL)
    INTO total_facturas, monto_total, promedio_facturacion
    FROM AdminDB.FIDE_FACTURA_TB
    WHERE USUARIO_ID = USUARIO_ID_IN;

    resumen := 'Usuario ' || USUARIO_ID_IN || ': Total Facturas = ' || total_facturas || 
               ', Monto Total = ' || monto_total || 
               ', Promedio = ' || promedio_facturacion;
               
    RETURN resumen;
END;
/
SELECT ResumenFacturacionUsuario(1) FROM DUAL;
/






